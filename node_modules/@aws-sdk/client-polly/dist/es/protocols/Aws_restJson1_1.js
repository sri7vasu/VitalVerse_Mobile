import { __assign, __awaiter, __generator, __values } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { extendedEncodeURIComponent as __extendedEncodeURIComponent } from "@aws-sdk/smithy-client";
export function serializeAws_restJson1_1DeleteLexiconCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/lexicons/{Name}";
            if (input.Name !== undefined) {
                labelValue = input.Name;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: Name.");
                }
                resolvedPath = resolvedPath.replace("{Name}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: Name.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DescribeVoicesCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/voices";
            query = {};
            if (input.Engine !== undefined) {
                query["Engine"] = input.Engine;
            }
            if (input.IncludeAdditionalLanguageCodes !== undefined) {
                query["IncludeAdditionalLanguageCodes"] = input.IncludeAdditionalLanguageCodes.toString();
            }
            if (input.LanguageCode !== undefined) {
                query["LanguageCode"] = input.LanguageCode;
            }
            if (input.NextToken !== undefined) {
                query["NextToken"] = input.NextToken;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetLexiconCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/lexicons/{Name}";
            if (input.Name !== undefined) {
                labelValue = input.Name;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: Name.");
                }
                resolvedPath = resolvedPath.replace("{Name}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: Name.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetSpeechSynthesisTaskCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/synthesisTasks/{TaskId}";
            if (input.TaskId !== undefined) {
                labelValue = input.TaskId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TaskId.");
                }
                resolvedPath = resolvedPath.replace("{TaskId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TaskId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1ListLexiconsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/lexicons";
            query = {};
            if (input.NextToken !== undefined) {
                query["NextToken"] = input.NextToken;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1ListSpeechSynthesisTasksCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/synthesisTasks";
            query = {};
            if (input.MaxResults !== undefined) {
                query["MaxResults"] = input.MaxResults.toString();
            }
            if (input.NextToken !== undefined) {
                query["NextToken"] = input.NextToken;
            }
            if (input.Status !== undefined) {
                query["Status"] = input.Status;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1PutLexiconCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body, bodyParams;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/lexicons/{Name}";
            if (input.Name !== undefined) {
                labelValue = input.Name;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: Name.");
                }
                resolvedPath = resolvedPath.replace("{Name}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: Name.");
            }
            bodyParams = {};
            if (input.Content !== undefined) {
                bodyParams["Content"] = input.Content;
            }
            body = JSON.stringify(bodyParams);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1StartSpeechSynthesisTaskCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, body, bodyParams;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/synthesisTasks";
            bodyParams = {};
            if (input.Engine !== undefined) {
                bodyParams["Engine"] = input.Engine;
            }
            if (input.LanguageCode !== undefined) {
                bodyParams["LanguageCode"] = input.LanguageCode;
            }
            if (input.LexiconNames !== undefined) {
                bodyParams["LexiconNames"] = serializeAws_restJson1_1LexiconNameList(input.LexiconNames, context);
            }
            if (input.OutputFormat !== undefined) {
                bodyParams["OutputFormat"] = input.OutputFormat;
            }
            if (input.OutputS3BucketName !== undefined) {
                bodyParams["OutputS3BucketName"] = input.OutputS3BucketName;
            }
            if (input.OutputS3KeyPrefix !== undefined) {
                bodyParams["OutputS3KeyPrefix"] = input.OutputS3KeyPrefix;
            }
            if (input.SampleRate !== undefined) {
                bodyParams["SampleRate"] = input.SampleRate;
            }
            if (input.SnsTopicArn !== undefined) {
                bodyParams["SnsTopicArn"] = input.SnsTopicArn;
            }
            if (input.SpeechMarkTypes !== undefined) {
                bodyParams["SpeechMarkTypes"] = serializeAws_restJson1_1SpeechMarkTypeList(input.SpeechMarkTypes, context);
            }
            if (input.Text !== undefined) {
                bodyParams["Text"] = input.Text;
            }
            if (input.TextType !== undefined) {
                bodyParams["TextType"] = input.TextType;
            }
            if (input.VoiceId !== undefined) {
                bodyParams["VoiceId"] = input.VoiceId;
            }
            body = JSON.stringify(bodyParams);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1SynthesizeSpeechCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, body, bodyParams;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/speech";
            bodyParams = {};
            if (input.Engine !== undefined) {
                bodyParams["Engine"] = input.Engine;
            }
            if (input.LanguageCode !== undefined) {
                bodyParams["LanguageCode"] = input.LanguageCode;
            }
            if (input.LexiconNames !== undefined) {
                bodyParams["LexiconNames"] = serializeAws_restJson1_1LexiconNameList(input.LexiconNames, context);
            }
            if (input.OutputFormat !== undefined) {
                bodyParams["OutputFormat"] = input.OutputFormat;
            }
            if (input.SampleRate !== undefined) {
                bodyParams["SampleRate"] = input.SampleRate;
            }
            if (input.SpeechMarkTypes !== undefined) {
                bodyParams["SpeechMarkTypes"] = serializeAws_restJson1_1SpeechMarkTypeList(input.SpeechMarkTypes, context);
            }
            if (input.Text !== undefined) {
                bodyParams["Text"] = input.Text;
            }
            if (input.TextType !== undefined) {
                bodyParams["TextType"] = input.TextType;
            }
            if (input.VoiceId !== undefined) {
                bodyParams["VoiceId"] = input.VoiceId;
            }
            body = JSON.stringify(bodyParams);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function deserializeAws_restJson1_1DeleteLexiconCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteLexiconCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteLexiconOutput"
                    };
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteLexiconCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "LexiconNotFoundException": return [3 /*break*/, 2];
                        case "com.amazonaws.parrot.v1#LexiconNotFoundException": return [3 /*break*/, 2];
                        case "ServiceFailureException": return [3 /*break*/, 4];
                        case "com.amazonaws.parrot.v1#ServiceFailureException": return [3 /*break*/, 4];
                    }
                    return [3 /*break*/, 6];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1LexiconNotFoundExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 7];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 7];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DescribeVoicesCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DescribeVoicesCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DescribeVoicesOutput",
                        NextToken: undefined,
                        Voices: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    if (data.NextToken !== undefined && data.NextToken !== null) {
                        contents.NextToken = data.NextToken;
                    }
                    if (data.Voices !== undefined && data.Voices !== null) {
                        contents.Voices = deserializeAws_restJson1_1VoiceList(data.Voices, context);
                    }
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DescribeVoicesCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidNextTokenException": return [3 /*break*/, 2];
                        case "com.amazonaws.parrot.v1#InvalidNextTokenException": return [3 /*break*/, 2];
                        case "ServiceFailureException": return [3 /*break*/, 4];
                        case "com.amazonaws.parrot.v1#ServiceFailureException": return [3 /*break*/, 4];
                    }
                    return [3 /*break*/, 6];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidNextTokenExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 7];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 7];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetLexiconCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetLexiconCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetLexiconOutput",
                        Lexicon: undefined,
                        LexiconAttributes: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    if (data.Lexicon !== undefined && data.Lexicon !== null) {
                        contents.Lexicon = deserializeAws_restJson1_1Lexicon(data.Lexicon, context);
                    }
                    if (data.LexiconAttributes !== undefined && data.LexiconAttributes !== null) {
                        contents.LexiconAttributes = deserializeAws_restJson1_1LexiconAttributes(data.LexiconAttributes, context);
                    }
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetLexiconCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "LexiconNotFoundException": return [3 /*break*/, 2];
                        case "com.amazonaws.parrot.v1#LexiconNotFoundException": return [3 /*break*/, 2];
                        case "ServiceFailureException": return [3 /*break*/, 4];
                        case "com.amazonaws.parrot.v1#ServiceFailureException": return [3 /*break*/, 4];
                    }
                    return [3 /*break*/, 6];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1LexiconNotFoundExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 7];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 7];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetSpeechSynthesisTaskCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetSpeechSynthesisTaskCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetSpeechSynthesisTaskOutput",
                        SynthesisTask: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {
                        contents.SynthesisTask = deserializeAws_restJson1_1SynthesisTask(data.SynthesisTask, context);
                    }
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetSpeechSynthesisTaskCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidTaskIdException": return [3 /*break*/, 2];
                        case "com.amazonaws.parrot.v1#InvalidTaskIdException": return [3 /*break*/, 2];
                        case "ServiceFailureException": return [3 /*break*/, 4];
                        case "com.amazonaws.parrot.v1#ServiceFailureException": return [3 /*break*/, 4];
                        case "SynthesisTaskNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.parrot.v1#SynthesisTaskNotFoundException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidTaskIdExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1SynthesisTaskNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1ListLexiconsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1ListLexiconsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "ListLexiconsOutput",
                        Lexicons: undefined,
                        NextToken: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    if (data.Lexicons !== undefined && data.Lexicons !== null) {
                        contents.Lexicons = deserializeAws_restJson1_1LexiconDescriptionList(data.Lexicons, context);
                    }
                    if (data.NextToken !== undefined && data.NextToken !== null) {
                        contents.NextToken = data.NextToken;
                    }
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1ListLexiconsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidNextTokenException": return [3 /*break*/, 2];
                        case "com.amazonaws.parrot.v1#InvalidNextTokenException": return [3 /*break*/, 2];
                        case "ServiceFailureException": return [3 /*break*/, 4];
                        case "com.amazonaws.parrot.v1#ServiceFailureException": return [3 /*break*/, 4];
                    }
                    return [3 /*break*/, 6];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidNextTokenExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 7];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 7];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1ListSpeechSynthesisTasksCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1ListSpeechSynthesisTasksCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "ListSpeechSynthesisTasksOutput",
                        NextToken: undefined,
                        SynthesisTasks: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    if (data.NextToken !== undefined && data.NextToken !== null) {
                        contents.NextToken = data.NextToken;
                    }
                    if (data.SynthesisTasks !== undefined && data.SynthesisTasks !== null) {
                        contents.SynthesisTasks = deserializeAws_restJson1_1SynthesisTasks(data.SynthesisTasks, context);
                    }
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1ListSpeechSynthesisTasksCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidNextTokenException": return [3 /*break*/, 2];
                        case "com.amazonaws.parrot.v1#InvalidNextTokenException": return [3 /*break*/, 2];
                        case "ServiceFailureException": return [3 /*break*/, 4];
                        case "com.amazonaws.parrot.v1#ServiceFailureException": return [3 /*break*/, 4];
                    }
                    return [3 /*break*/, 6];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidNextTokenExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 7];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 7];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1PutLexiconCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1PutLexiconCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "PutLexiconOutput"
                    };
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1PutLexiconCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
        return __generator(this, function (_l) {
            switch (_l.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _l.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidLexiconException": return [3 /*break*/, 2];
                        case "com.amazonaws.parrot.v1#InvalidLexiconException": return [3 /*break*/, 2];
                        case "LexiconSizeExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.parrot.v1#LexiconSizeExceededException": return [3 /*break*/, 4];
                        case "MaxLexemeLengthExceededException": return [3 /*break*/, 6];
                        case "com.amazonaws.parrot.v1#MaxLexemeLengthExceededException": return [3 /*break*/, 6];
                        case "MaxLexiconsNumberExceededException": return [3 /*break*/, 8];
                        case "com.amazonaws.parrot.v1#MaxLexiconsNumberExceededException": return [3 /*break*/, 8];
                        case "ServiceFailureException": return [3 /*break*/, 10];
                        case "com.amazonaws.parrot.v1#ServiceFailureException": return [3 /*break*/, 10];
                        case "UnsupportedPlsAlphabetException": return [3 /*break*/, 12];
                        case "com.amazonaws.parrot.v1#UnsupportedPlsAlphabetException": return [3 /*break*/, 12];
                        case "UnsupportedPlsLanguageException": return [3 /*break*/, 14];
                        case "com.amazonaws.parrot.v1#UnsupportedPlsLanguageException": return [3 /*break*/, 14];
                    }
                    return [3 /*break*/, 16];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidLexiconExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 17];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1LexiconSizeExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 17];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MaxLexemeLengthExceededExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 17];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MaxLexiconsNumberExceededExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 17];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 17];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1UnsupportedPlsAlphabetExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 17];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1UnsupportedPlsLanguageExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 17];
                case 16:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _l.label = 17;
                case 17:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1StartSpeechSynthesisTaskCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1StartSpeechSynthesisTaskCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "StartSpeechSynthesisTaskOutput",
                        SynthesisTask: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {
                        contents.SynthesisTask = deserializeAws_restJson1_1SynthesisTask(data.SynthesisTask, context);
                    }
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1StartSpeechSynthesisTaskCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, parsedBody, message;
        return __generator(this, function (_r) {
            switch (_r.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _r.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "EngineNotSupportedException": return [3 /*break*/, 2];
                        case "com.amazonaws.parrot.v1#EngineNotSupportedException": return [3 /*break*/, 2];
                        case "InvalidS3BucketException": return [3 /*break*/, 4];
                        case "com.amazonaws.parrot.v1#InvalidS3BucketException": return [3 /*break*/, 4];
                        case "InvalidS3KeyException": return [3 /*break*/, 6];
                        case "com.amazonaws.parrot.v1#InvalidS3KeyException": return [3 /*break*/, 6];
                        case "InvalidSampleRateException": return [3 /*break*/, 8];
                        case "com.amazonaws.parrot.v1#InvalidSampleRateException": return [3 /*break*/, 8];
                        case "InvalidSnsTopicArnException": return [3 /*break*/, 10];
                        case "com.amazonaws.parrot.v1#InvalidSnsTopicArnException": return [3 /*break*/, 10];
                        case "InvalidSsmlException": return [3 /*break*/, 12];
                        case "com.amazonaws.parrot.v1#InvalidSsmlException": return [3 /*break*/, 12];
                        case "LanguageNotSupportedException": return [3 /*break*/, 14];
                        case "com.amazonaws.parrot.v1#LanguageNotSupportedException": return [3 /*break*/, 14];
                        case "LexiconNotFoundException": return [3 /*break*/, 16];
                        case "com.amazonaws.parrot.v1#LexiconNotFoundException": return [3 /*break*/, 16];
                        case "MarksNotSupportedForFormatException": return [3 /*break*/, 18];
                        case "com.amazonaws.parrot.v1#MarksNotSupportedForFormatException": return [3 /*break*/, 18];
                        case "ServiceFailureException": return [3 /*break*/, 20];
                        case "com.amazonaws.parrot.v1#ServiceFailureException": return [3 /*break*/, 20];
                        case "SsmlMarksNotSupportedForTextTypeException": return [3 /*break*/, 22];
                        case "com.amazonaws.parrot.v1#SsmlMarksNotSupportedForTextTypeException": return [3 /*break*/, 22];
                        case "TextLengthExceededException": return [3 /*break*/, 24];
                        case "com.amazonaws.parrot.v1#TextLengthExceededException": return [3 /*break*/, 24];
                    }
                    return [3 /*break*/, 26];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1EngineNotSupportedExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 27];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidS3BucketExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 27];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidS3KeyExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 27];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidSampleRateExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 27];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidSnsTopicArnExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 27];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidSsmlExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 27];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1LanguageNotSupportedExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 27];
                case 16:
                    _l = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1LexiconNotFoundExceptionResponse(parsedOutput, context)];
                case 17:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 27];
                case 18:
                    _m = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)];
                case 19:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 27];
                case 20:
                    _o = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];
                case 21:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 27];
                case 22:
                    _p = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)];
                case 23:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 27];
                case 24:
                    _q = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TextLengthExceededExceptionResponse(parsedOutput, context)];
                case 25:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 27];
                case 26:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _r.label = 27;
                case 27:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1SynthesizeSpeechCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            if (output.statusCode !== 200 && output.statusCode >= 400) {
                return [2 /*return*/, deserializeAws_restJson1_1SynthesizeSpeechCommandError(output, context)];
            }
            contents = {
                $metadata: deserializeMetadata(output),
                __type: "SynthesizeSpeechOutput",
                AudioStream: undefined,
                ContentType: undefined,
                RequestCharacters: undefined
            };
            if (output.headers["content-type"] !== undefined) {
                contents.ContentType = output.headers["content-type"];
            }
            if (output.headers["x-amzn-requestcharacters"] !== undefined) {
                contents.RequestCharacters = parseInt(output.headers["x-amzn-requestcharacters"], 10);
            }
            data = output.body;
            contents.AudioStream = data;
            return [2 /*return*/, Promise.resolve(contents)];
        });
    });
}
function deserializeAws_restJson1_1SynthesizeSpeechCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, parsedBody, message;
        return __generator(this, function (_o) {
            switch (_o.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _o.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "EngineNotSupportedException": return [3 /*break*/, 2];
                        case "com.amazonaws.parrot.v1#EngineNotSupportedException": return [3 /*break*/, 2];
                        case "InvalidSampleRateException": return [3 /*break*/, 4];
                        case "com.amazonaws.parrot.v1#InvalidSampleRateException": return [3 /*break*/, 4];
                        case "InvalidSsmlException": return [3 /*break*/, 6];
                        case "com.amazonaws.parrot.v1#InvalidSsmlException": return [3 /*break*/, 6];
                        case "LanguageNotSupportedException": return [3 /*break*/, 8];
                        case "com.amazonaws.parrot.v1#LanguageNotSupportedException": return [3 /*break*/, 8];
                        case "LexiconNotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.parrot.v1#LexiconNotFoundException": return [3 /*break*/, 10];
                        case "MarksNotSupportedForFormatException": return [3 /*break*/, 12];
                        case "com.amazonaws.parrot.v1#MarksNotSupportedForFormatException": return [3 /*break*/, 12];
                        case "ServiceFailureException": return [3 /*break*/, 14];
                        case "com.amazonaws.parrot.v1#ServiceFailureException": return [3 /*break*/, 14];
                        case "SsmlMarksNotSupportedForTextTypeException": return [3 /*break*/, 16];
                        case "com.amazonaws.parrot.v1#SsmlMarksNotSupportedForTextTypeException": return [3 /*break*/, 16];
                        case "TextLengthExceededException": return [3 /*break*/, 18];
                        case "com.amazonaws.parrot.v1#TextLengthExceededException": return [3 /*break*/, 18];
                    }
                    return [3 /*break*/, 20];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1EngineNotSupportedExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidSampleRateExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidSsmlExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1LanguageNotSupportedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1LexiconNotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 16:
                    _l = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)];
                case 17:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 18:
                    _m = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TextLengthExceededExceptionResponse(parsedOutput, context)];
                case 19:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 20:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _o.label = 21;
                case 21:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
var deserializeAws_restJson1_1EngineNotSupportedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "EngineNotSupportedException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1InvalidLexiconExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "InvalidLexiconException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1InvalidNextTokenExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "InvalidNextTokenException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1InvalidS3BucketExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "InvalidS3BucketException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1InvalidS3KeyExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "InvalidS3KeyException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1InvalidSampleRateExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "InvalidSampleRateException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1InvalidSnsTopicArnExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "InvalidSnsTopicArnException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1InvalidSsmlExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "InvalidSsmlException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1InvalidTaskIdExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "InvalidTaskIdException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1LanguageNotSupportedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "LanguageNotSupportedException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1LexiconNotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "LexiconNotFoundException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1LexiconSizeExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "LexiconSizeExceededException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1MarksNotSupportedForFormatExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "MarksNotSupportedForFormatException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1MaxLexemeLengthExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "MaxLexemeLengthExceededException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1MaxLexiconsNumberExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "MaxLexiconsNumberExceededException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1ServiceFailureExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "ServiceFailureException",
            $fault: "server",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1SsmlMarksNotSupportedForTextTypeExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "SsmlMarksNotSupportedForTextTypeException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1SynthesisTaskNotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "SynthesisTaskNotFoundException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1TextLengthExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "TextLengthExceededException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1UnsupportedPlsAlphabetExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "UnsupportedPlsAlphabetException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1UnsupportedPlsLanguageExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "UnsupportedPlsLanguageException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var serializeAws_restJson1_1LexiconNameList = function (input, context) {
    var e_1, _a;
    var contents = [];
    try {
        for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
            var entry = input_1_1.value;
            contents.push(entry);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return contents;
};
var serializeAws_restJson1_1SpeechMarkTypeList = function (input, context) {
    var e_2, _a;
    var contents = [];
    try {
        for (var input_2 = __values(input), input_2_1 = input_2.next(); !input_2_1.done; input_2_1 = input_2.next()) {
            var entry = input_2_1.value;
            contents.push(entry);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (input_2_1 && !input_2_1.done && (_a = input_2.return)) _a.call(input_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return contents;
};
var deserializeAws_restJson1_1EngineList = function (output, context) {
    return (output || []).map(function (entry) { return entry; });
};
var deserializeAws_restJson1_1LanguageCodeList = function (output, context) {
    return (output || []).map(function (entry) { return entry; });
};
var deserializeAws_restJson1_1Lexicon = function (output, context) {
    var contents = {
        __type: "Lexicon",
        Content: undefined,
        Name: undefined
    };
    if (output.Content !== undefined && output.Content !== null) {
        contents.Content = output.Content;
    }
    if (output.Name !== undefined && output.Name !== null) {
        contents.Name = output.Name;
    }
    return contents;
};
var deserializeAws_restJson1_1LexiconAttributes = function (output, context) {
    var contents = {
        __type: "LexiconAttributes",
        Alphabet: undefined,
        LanguageCode: undefined,
        LastModified: undefined,
        LexemesCount: undefined,
        LexiconArn: undefined,
        Size: undefined
    };
    if (output.Alphabet !== undefined && output.Alphabet !== null) {
        contents.Alphabet = output.Alphabet;
    }
    if (output.LanguageCode !== undefined && output.LanguageCode !== null) {
        contents.LanguageCode = output.LanguageCode;
    }
    if (output.LastModified !== undefined && output.LastModified !== null) {
        contents.LastModified = new Date(Math.round(output.LastModified * 1000));
    }
    if (output.LexemesCount !== undefined && output.LexemesCount !== null) {
        contents.LexemesCount = output.LexemesCount;
    }
    if (output.LexiconArn !== undefined && output.LexiconArn !== null) {
        contents.LexiconArn = output.LexiconArn;
    }
    if (output.Size !== undefined && output.Size !== null) {
        contents.Size = output.Size;
    }
    return contents;
};
var deserializeAws_restJson1_1LexiconDescription = function (output, context) {
    var contents = {
        __type: "LexiconDescription",
        Attributes: undefined,
        Name: undefined
    };
    if (output.Attributes !== undefined && output.Attributes !== null) {
        contents.Attributes = deserializeAws_restJson1_1LexiconAttributes(output.Attributes, context);
    }
    if (output.Name !== undefined && output.Name !== null) {
        contents.Name = output.Name;
    }
    return contents;
};
var deserializeAws_restJson1_1LexiconDescriptionList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1LexiconDescription(entry, context);
    });
};
var deserializeAws_restJson1_1LexiconNameList = function (output, context) {
    return (output || []).map(function (entry) { return entry; });
};
var deserializeAws_restJson1_1SpeechMarkTypeList = function (output, context) {
    return (output || []).map(function (entry) { return entry; });
};
var deserializeAws_restJson1_1SynthesisTask = function (output, context) {
    var contents = {
        __type: "SynthesisTask",
        CreationTime: undefined,
        Engine: undefined,
        LanguageCode: undefined,
        LexiconNames: undefined,
        OutputFormat: undefined,
        OutputUri: undefined,
        RequestCharacters: undefined,
        SampleRate: undefined,
        SnsTopicArn: undefined,
        SpeechMarkTypes: undefined,
        TaskId: undefined,
        TaskStatus: undefined,
        TaskStatusReason: undefined,
        TextType: undefined,
        VoiceId: undefined
    };
    if (output.CreationTime !== undefined && output.CreationTime !== null) {
        contents.CreationTime = new Date(Math.round(output.CreationTime * 1000));
    }
    if (output.Engine !== undefined && output.Engine !== null) {
        contents.Engine = output.Engine;
    }
    if (output.LanguageCode !== undefined && output.LanguageCode !== null) {
        contents.LanguageCode = output.LanguageCode;
    }
    if (output.LexiconNames !== undefined && output.LexiconNames !== null) {
        contents.LexiconNames = deserializeAws_restJson1_1LexiconNameList(output.LexiconNames, context);
    }
    if (output.OutputFormat !== undefined && output.OutputFormat !== null) {
        contents.OutputFormat = output.OutputFormat;
    }
    if (output.OutputUri !== undefined && output.OutputUri !== null) {
        contents.OutputUri = output.OutputUri;
    }
    if (output.RequestCharacters !== undefined &&
        output.RequestCharacters !== null) {
        contents.RequestCharacters = output.RequestCharacters;
    }
    if (output.SampleRate !== undefined && output.SampleRate !== null) {
        contents.SampleRate = output.SampleRate;
    }
    if (output.SnsTopicArn !== undefined && output.SnsTopicArn !== null) {
        contents.SnsTopicArn = output.SnsTopicArn;
    }
    if (output.SpeechMarkTypes !== undefined && output.SpeechMarkTypes !== null) {
        contents.SpeechMarkTypes = deserializeAws_restJson1_1SpeechMarkTypeList(output.SpeechMarkTypes, context);
    }
    if (output.TaskId !== undefined && output.TaskId !== null) {
        contents.TaskId = output.TaskId;
    }
    if (output.TaskStatus !== undefined && output.TaskStatus !== null) {
        contents.TaskStatus = output.TaskStatus;
    }
    if (output.TaskStatusReason !== undefined &&
        output.TaskStatusReason !== null) {
        contents.TaskStatusReason = output.TaskStatusReason;
    }
    if (output.TextType !== undefined && output.TextType !== null) {
        contents.TextType = output.TextType;
    }
    if (output.VoiceId !== undefined && output.VoiceId !== null) {
        contents.VoiceId = output.VoiceId;
    }
    return contents;
};
var deserializeAws_restJson1_1SynthesisTasks = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1SynthesisTask(entry, context);
    });
};
var deserializeAws_restJson1_1Voice = function (output, context) {
    var contents = {
        __type: "Voice",
        AdditionalLanguageCodes: undefined,
        Gender: undefined,
        Id: undefined,
        LanguageCode: undefined,
        LanguageName: undefined,
        Name: undefined,
        SupportedEngines: undefined
    };
    if (output.AdditionalLanguageCodes !== undefined &&
        output.AdditionalLanguageCodes !== null) {
        contents.AdditionalLanguageCodes = deserializeAws_restJson1_1LanguageCodeList(output.AdditionalLanguageCodes, context);
    }
    if (output.Gender !== undefined && output.Gender !== null) {
        contents.Gender = output.Gender;
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.LanguageCode !== undefined && output.LanguageCode !== null) {
        contents.LanguageCode = output.LanguageCode;
    }
    if (output.LanguageName !== undefined && output.LanguageName !== null) {
        contents.LanguageName = output.LanguageName;
    }
    if (output.Name !== undefined && output.Name !== null) {
        contents.Name = output.Name;
    }
    if (output.SupportedEngines !== undefined &&
        output.SupportedEngines !== null) {
        contents.SupportedEngines = deserializeAws_restJson1_1EngineList(output.SupportedEngines, context);
    }
    return contents;
};
var deserializeAws_restJson1_1VoiceList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1Voice(entry, context);
    });
};
var deserializeMetadata = function (output) { return ({
    httpStatusCode: output.statusCode,
    httpHeaders: output.headers,
    requestId: output.headers["x-amzn-requestid"]
}); };
// Collect low-level response body stream to Uint8Array.
var collectBody = function (streamBody, context) {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return (context.streamCollector(streamBody) || Promise.resolve(new Uint8Array()));
};
// Encode Uint8Array data into string with utf-8.
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) {
        return context.utf8Encoder(body);
    });
};
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
};
/**
 * Load an error code for the aws.rest-json-1.1 protocol.
 */
var loadRestJsonErrorCode = function (output, data) {
    var findKey = function (object, key) {
        return Object.keys(object).find(function (k) { return k.toLowerCase() === key.toLowerCase(); });
    };
    var sanitizeErrorCode = function (rawValue) {
        var cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    var headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
    return "";
};
//# sourceMappingURL=Aws_restJson1_1.js.map