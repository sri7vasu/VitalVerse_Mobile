"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var os_1 = require("os");
var path_1 = require("path");
var fs_1 = require("fs");
exports.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
exports.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
var swallowError = function () { return ({}); };
function loadSharedConfigFiles(init) {
    if (init === void 0) { init = {}; }
    var _a = init.filepath, filepath = _a === void 0 ? process.env[exports.ENV_CREDENTIALS_PATH] ||
        path_1.join(getHomeDir(), ".aws", "credentials") : _a, _b = init.configFilepath, configFilepath = _b === void 0 ? process.env[exports.ENV_CONFIG_PATH] ||
        path_1.join(getHomeDir(), ".aws", "config") : _b;
    return Promise.all([
        slurpFile(configFilepath)
            .then(parseIni)
            .then(normalizeConfigFile)
            .catch(swallowError),
        slurpFile(filepath)
            .then(parseIni)
            .catch(swallowError)
    ]).then(function (parsedFiles) {
        var configFile = parsedFiles[0], credentialsFile = parsedFiles[1];
        return {
            configFile: configFile,
            credentialsFile: credentialsFile
        };
    });
}
exports.loadSharedConfigFiles = loadSharedConfigFiles;
var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
function normalizeConfigFile(data) {
    var map = {};
    for (var _i = 0, _a = Object.keys(data); _i < _a.length; _i++) {
        var key = _a[_i];
        var matches = void 0;
        if (key === "default") {
            map.default = data.default;
        }
        else if ((matches = profileKeyRegex.exec(key))) {
            var _1 = matches[0], _2 = matches[1], normalizedKey = matches[2];
            if (normalizedKey) {
                map[normalizedKey] = data[key];
            }
        }
    }
    return map;
}
function parseIni(iniData) {
    var map = {};
    var currentSection;
    for (var _i = 0, _a = iniData.split(/\r?\n/); _i < _a.length; _i++) {
        var line = _a[_i];
        line = line.split(/(^|\s)[;#]/)[0]; // remove comments
        var section = line.match(/^\s*\[([^\[\]]+)]\s*$/);
        if (section) {
            currentSection = section[1];
        }
        else if (currentSection) {
            var item = line.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);
            if (item) {
                map[currentSection] = map[currentSection] || {};
                map[currentSection][item[1]] = item[2];
            }
        }
    }
    return map;
}
function slurpFile(path) {
    return new Promise(function (resolve, reject) {
        fs_1.readFile(path, "utf8", function (err, data) {
            if (err) {
                reject(err);
            }
            else {
                resolve(data);
            }
        });
    });
}
function getHomeDir() {
    var _a = process.env, HOME = _a.HOME, USERPROFILE = _a.USERPROFILE, HOMEPATH = _a.HOMEPATH, _b = _a.HOMEDRIVE, HOMEDRIVE = _b === void 0 ? "C:" + path_1.sep : _b;
    if (HOME)
        return HOME;
    if (USERPROFILE)
        return USERPROFILE;
    if (HOMEPATH)
        return "" + HOMEDRIVE + HOMEPATH;
    return os_1.homedir();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlCQUE2QjtBQUM3Qiw2QkFBaUM7QUFDakMseUJBQThCO0FBRWpCLFFBQUEsb0JBQW9CLEdBQUcsNkJBQTZCLENBQUM7QUFDckQsUUFBQSxlQUFlLEdBQUcsaUJBQWlCLENBQUM7QUErQmpELElBQU0sWUFBWSxHQUFHLGNBQU0sT0FBQSxDQUFDLEVBQUUsQ0FBQyxFQUFKLENBQUksQ0FBQztBQUVoQyxTQUFnQixxQkFBcUIsQ0FDbkMsSUFBMkI7SUFBM0IscUJBQUEsRUFBQSxTQUEyQjtJQUd6QixJQUFBLGtCQUMyQyxFQUQzQzs2REFDMkMsRUFDM0Msd0JBQ3NDLEVBRHRDO3dEQUNzQyxDQUMvQjtJQUVULE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUNqQixTQUFTLENBQUMsY0FBYyxDQUFDO2FBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDZCxJQUFJLENBQUMsbUJBQW1CLENBQUM7YUFDekIsS0FBSyxDQUFDLFlBQVksQ0FBQztRQUN0QixTQUFTLENBQUMsUUFBUSxDQUFDO2FBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDZCxLQUFLLENBQUMsWUFBWSxDQUFDO0tBQ3ZCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxXQUFpQztRQUNqQyxJQUFBLDJCQUFVLEVBQUUsZ0NBQWUsQ0FBZ0I7UUFDbEQsT0FBTztZQUNMLFVBQVUsWUFBQTtZQUNWLGVBQWUsaUJBQUE7U0FDaEIsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQXpCRCxzREF5QkM7QUFFRCxJQUFNLGVBQWUsR0FBRyw4QkFBOEIsQ0FBQztBQUN2RCxTQUFTLG1CQUFtQixDQUFDLElBQW1CO0lBQzlDLElBQU0sR0FBRyxHQUFrQixFQUFFLENBQUM7SUFDOUIsS0FBZ0IsVUFBaUIsRUFBakIsS0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFqQixjQUFpQixFQUFqQixJQUFpQixFQUFFO1FBQTlCLElBQUksR0FBRyxTQUFBO1FBQ1YsSUFBSSxPQUFPLFNBQXNCLENBQUM7UUFDbEMsSUFBSSxHQUFHLEtBQUssU0FBUyxFQUFFO1lBQ3JCLEdBQUcsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUM1QjthQUFNLElBQUksQ0FBQyxPQUFPLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ3pDLElBQUEsZUFBRSxFQUFFLGVBQUUsRUFBRSwwQkFBYSxDQUFZO1lBQ3hDLElBQUksYUFBYSxFQUFFO2dCQUNqQixHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2hDO1NBQ0Y7S0FDRjtJQUVELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFDLE9BQWU7SUFDL0IsSUFBTSxHQUFHLEdBQWtCLEVBQUUsQ0FBQztJQUM5QixJQUFJLGNBQWtDLENBQUM7SUFDdkMsS0FBaUIsVUFBc0IsRUFBdEIsS0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUF0QixjQUFzQixFQUF0QixJQUFzQixFQUFFO1FBQXBDLElBQUksSUFBSSxTQUFBO1FBQ1gsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0I7UUFDdEQsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3BELElBQUksT0FBTyxFQUFFO1lBQ1gsY0FBYyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM3QjthQUFNLElBQUksY0FBYyxFQUFFO1lBQ3pCLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztZQUNyRCxJQUFJLElBQUksRUFBRTtnQkFDUixHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDaEQsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN4QztTQUNGO0tBQ0Y7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxJQUFZO0lBQzdCLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtRQUNqQyxhQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFDLEdBQUcsRUFBRSxJQUFJO1lBQy9CLElBQUksR0FBRyxFQUFFO2dCQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNiO2lCQUFNO2dCQUNMLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNmO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxTQUFTLFVBQVU7SUFDWCxJQUFBLGdCQUFxRSxFQUFuRSxjQUFJLEVBQUUsNEJBQVcsRUFBRSxzQkFBUSxFQUFFLGlCQUFzQixFQUF0QixrREFBc0MsQ0FBQztJQUU1RSxJQUFJLElBQUk7UUFBRSxPQUFPLElBQUksQ0FBQztJQUN0QixJQUFJLFdBQVc7UUFBRSxPQUFPLFdBQVcsQ0FBQztJQUNwQyxJQUFJLFFBQVE7UUFBRSxPQUFPLEtBQUcsU0FBUyxHQUFHLFFBQVUsQ0FBQztJQUUvQyxPQUFPLFlBQU8sRUFBRSxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBob21lZGlyIH0gZnJvbSBcIm9zXCI7XG5pbXBvcnQgeyBqb2luLCBzZXAgfSBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgcmVhZEZpbGUgfSBmcm9tIFwiZnNcIjtcblxuZXhwb3J0IGNvbnN0IEVOVl9DUkVERU5USUFMU19QQVRIID0gXCJBV1NfU0hBUkVEX0NSRURFTlRJQUxTX0ZJTEVcIjtcbmV4cG9ydCBjb25zdCBFTlZfQ09ORklHX1BBVEggPSBcIkFXU19DT05GSUdfRklMRVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNoYXJlZENvbmZpZ0luaXQge1xuICAvKipcbiAgICogVGhlIHBhdGggYXQgd2hpY2ggdG8gbG9jYXRlIHRoZSBpbmkgY3JlZGVudGlhbHMgZmlsZS4gRGVmYXVsdHMgdG8gdGhlXG4gICAqIHZhbHVlIG9mIHRoZSBgQVdTX1NIQVJFRF9DUkVERU5USUFMU19GSUxFYCBlbnZpcm9ubWVudCB2YXJpYWJsZSAoaWZcbiAgICogZGVmaW5lZCkgb3IgYH4vLmF3cy9jcmVkZW50aWFsc2Agb3RoZXJ3aXNlLlxuICAgKi9cbiAgZmlsZXBhdGg/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBwYXRoIGF0IHdoaWNoIHRvIGxvY2F0ZSB0aGUgaW5pIGNvbmZpZyBmaWxlLiBEZWZhdWx0cyB0byB0aGUgdmFsdWUgb2ZcbiAgICogdGhlIGBBV1NfQ09ORklHX0ZJTEVgIGVudmlyb25tZW50IHZhcmlhYmxlIChpZiBkZWZpbmVkKSBvclxuICAgKiBgfi8uYXdzL2NvbmZpZ2Agb3RoZXJ3aXNlLlxuICAgKi9cbiAgY29uZmlnRmlsZXBhdGg/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvZmlsZSB7XG4gIFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXJzZWRJbmlEYXRhIHtcbiAgW2tleTogc3RyaW5nXTogUHJvZmlsZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaGFyZWRDb25maWdGaWxlcyB7XG4gIGNyZWRlbnRpYWxzRmlsZTogUGFyc2VkSW5pRGF0YTtcbiAgY29uZmlnRmlsZTogUGFyc2VkSW5pRGF0YTtcbn1cblxuY29uc3Qgc3dhbGxvd0Vycm9yID0gKCkgPT4gKHt9KTtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTaGFyZWRDb25maWdGaWxlcyhcbiAgaW5pdDogU2hhcmVkQ29uZmlnSW5pdCA9IHt9XG4pOiBQcm9taXNlPFNoYXJlZENvbmZpZ0ZpbGVzPiB7XG4gIGNvbnN0IHtcbiAgICBmaWxlcGF0aCA9IHByb2Nlc3MuZW52W0VOVl9DUkVERU5USUFMU19QQVRIXSB8fFxuICAgICAgam9pbihnZXRIb21lRGlyKCksIFwiLmF3c1wiLCBcImNyZWRlbnRpYWxzXCIpLFxuICAgIGNvbmZpZ0ZpbGVwYXRoID0gcHJvY2Vzcy5lbnZbRU5WX0NPTkZJR19QQVRIXSB8fFxuICAgICAgam9pbihnZXRIb21lRGlyKCksIFwiLmF3c1wiLCBcImNvbmZpZ1wiKVxuICB9ID0gaW5pdDtcblxuICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgIHNsdXJwRmlsZShjb25maWdGaWxlcGF0aClcbiAgICAgIC50aGVuKHBhcnNlSW5pKVxuICAgICAgLnRoZW4obm9ybWFsaXplQ29uZmlnRmlsZSlcbiAgICAgIC5jYXRjaChzd2FsbG93RXJyb3IpLFxuICAgIHNsdXJwRmlsZShmaWxlcGF0aClcbiAgICAgIC50aGVuKHBhcnNlSW5pKVxuICAgICAgLmNhdGNoKHN3YWxsb3dFcnJvcilcbiAgXSkudGhlbigocGFyc2VkRmlsZXM6IEFycmF5PFBhcnNlZEluaURhdGE+KSA9PiB7XG4gICAgY29uc3QgW2NvbmZpZ0ZpbGUsIGNyZWRlbnRpYWxzRmlsZV0gPSBwYXJzZWRGaWxlcztcbiAgICByZXR1cm4ge1xuICAgICAgY29uZmlnRmlsZSxcbiAgICAgIGNyZWRlbnRpYWxzRmlsZVxuICAgIH07XG4gIH0pO1xufVxuXG5jb25zdCBwcm9maWxlS2V5UmVnZXggPSAvXnByb2ZpbGVcXHMoW1wiJ10pPyhbXlxcMV0rKVxcMSQvO1xuZnVuY3Rpb24gbm9ybWFsaXplQ29uZmlnRmlsZShkYXRhOiBQYXJzZWRJbmlEYXRhKTogUGFyc2VkSW5pRGF0YSB7XG4gIGNvbnN0IG1hcDogUGFyc2VkSW5pRGF0YSA9IHt9O1xuICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXMoZGF0YSkpIHtcbiAgICBsZXQgbWF0Y2hlczogQXJyYXk8c3RyaW5nPiB8IG51bGw7XG4gICAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgIG1hcC5kZWZhdWx0ID0gZGF0YS5kZWZhdWx0O1xuICAgIH0gZWxzZSBpZiAoKG1hdGNoZXMgPSBwcm9maWxlS2V5UmVnZXguZXhlYyhrZXkpKSkge1xuICAgICAgY29uc3QgW18xLCBfMiwgbm9ybWFsaXplZEtleV0gPSBtYXRjaGVzO1xuICAgICAgaWYgKG5vcm1hbGl6ZWRLZXkpIHtcbiAgICAgICAgbWFwW25vcm1hbGl6ZWRLZXldID0gZGF0YVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXA7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSW5pKGluaURhdGE6IHN0cmluZyk6IFBhcnNlZEluaURhdGEge1xuICBjb25zdCBtYXA6IFBhcnNlZEluaURhdGEgPSB7fTtcbiAgbGV0IGN1cnJlbnRTZWN0aW9uOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGZvciAobGV0IGxpbmUgb2YgaW5pRGF0YS5zcGxpdCgvXFxyP1xcbi8pKSB7XG4gICAgbGluZSA9IGxpbmUuc3BsaXQoLyhefFxccylbOyNdLylbMF07IC8vIHJlbW92ZSBjb21tZW50c1xuICAgIGNvbnN0IHNlY3Rpb24gPSBsaW5lLm1hdGNoKC9eXFxzKlxcWyhbXlxcW1xcXV0rKV1cXHMqJC8pO1xuICAgIGlmIChzZWN0aW9uKSB7XG4gICAgICBjdXJyZW50U2VjdGlvbiA9IHNlY3Rpb25bMV07XG4gICAgfSBlbHNlIGlmIChjdXJyZW50U2VjdGlvbikge1xuICAgICAgY29uc3QgaXRlbSA9IGxpbmUubWF0Y2goL15cXHMqKC4rPylcXHMqPVxccyooLis/KVxccyokLyk7XG4gICAgICBpZiAoaXRlbSkge1xuICAgICAgICBtYXBbY3VycmVudFNlY3Rpb25dID0gbWFwW2N1cnJlbnRTZWN0aW9uXSB8fCB7fTtcbiAgICAgICAgbWFwW2N1cnJlbnRTZWN0aW9uXVtpdGVtWzFdXSA9IGl0ZW1bMl07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1hcDtcbn1cblxuZnVuY3Rpb24gc2x1cnBGaWxlKHBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcmVhZEZpbGUocGF0aCwgXCJ1dGY4XCIsIChlcnIsIGRhdGEpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0SG9tZURpcigpOiBzdHJpbmcge1xuICBjb25zdCB7IEhPTUUsIFVTRVJQUk9GSUxFLCBIT01FUEFUSCwgSE9NRURSSVZFID0gYEM6JHtzZXB9YCB9ID0gcHJvY2Vzcy5lbnY7XG5cbiAgaWYgKEhPTUUpIHJldHVybiBIT01FO1xuICBpZiAoVVNFUlBST0ZJTEUpIHJldHVybiBVU0VSUFJPRklMRTtcbiAgaWYgKEhPTUVQQVRIKSByZXR1cm4gYCR7SE9NRURSSVZFfSR7SE9NRVBBVEh9YDtcblxuICByZXR1cm4gaG9tZWRpcigpO1xufVxuIl19