import { __assign, __awaiter, __generator, __values } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { v4 as generateIdempotencyToken } from "uuid";
export function serializeAws_json1_1DeleteTerminologyCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] =
                "AWSShineFrontendService_20170701.DeleteTerminology";
            body = JSON.stringify(serializeAws_json1_1DeleteTerminologyRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DescribeTextTranslationJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] =
                "AWSShineFrontendService_20170701.DescribeTextTranslationJob";
            body = JSON.stringify(serializeAws_json1_1DescribeTextTranslationJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1GetTerminologyCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "AWSShineFrontendService_20170701.GetTerminology";
            body = JSON.stringify(serializeAws_json1_1GetTerminologyRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ImportTerminologyCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] =
                "AWSShineFrontendService_20170701.ImportTerminology";
            body = JSON.stringify(serializeAws_json1_1ImportTerminologyRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ListTerminologiesCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] =
                "AWSShineFrontendService_20170701.ListTerminologies";
            body = JSON.stringify(serializeAws_json1_1ListTerminologiesRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ListTextTranslationJobsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] =
                "AWSShineFrontendService_20170701.ListTextTranslationJobs";
            body = JSON.stringify(serializeAws_json1_1ListTextTranslationJobsRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StartTextTranslationJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] =
                "AWSShineFrontendService_20170701.StartTextTranslationJob";
            body = JSON.stringify(serializeAws_json1_1StartTextTranslationJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StopTextTranslationJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] =
                "AWSShineFrontendService_20170701.StopTextTranslationJob";
            body = JSON.stringify(serializeAws_json1_1StopTextTranslationJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1TranslateTextCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "AWSShineFrontendService_20170701.TranslateText";
            body = JSON.stringify(serializeAws_json1_1TranslateTextRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function deserializeAws_json1_1DeleteTerminologyCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DeleteTerminologyCommandError(output, context)];
                    }
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DeleteTerminologyCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.shine#InternalServerException": return [3 /*break*/, 2];
                        case "ResourceNotFoundException": return [3 /*break*/, 4];
                        case "com.amazonaws.shine#ResourceNotFoundException": return [3 /*break*/, 4];
                        case "TooManyRequestsException": return [3 /*break*/, 6];
                        case "com.amazonaws.shine#TooManyRequestsException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DescribeTextTranslationJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DescribeTextTranslationJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeTextTranslationJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DescribeTextTranslationJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DescribeTextTranslationJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.shine#InternalServerException": return [3 /*break*/, 2];
                        case "ResourceNotFoundException": return [3 /*break*/, 4];
                        case "com.amazonaws.shine#ResourceNotFoundException": return [3 /*break*/, 4];
                        case "TooManyRequestsException": return [3 /*break*/, 6];
                        case "com.amazonaws.shine#TooManyRequestsException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1GetTerminologyCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1GetTerminologyCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetTerminologyResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "GetTerminologyResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1GetTerminologyCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.shine#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidParameterValueException": return [3 /*break*/, 4];
                        case "com.amazonaws.shine#InvalidParameterValueException": return [3 /*break*/, 4];
                        case "ResourceNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.shine#ResourceNotFoundException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.shine#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ImportTerminologyCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ImportTerminologyCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ImportTerminologyResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ImportTerminologyResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ImportTerminologyCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.shine#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidParameterValueException": return [3 /*break*/, 4];
                        case "com.amazonaws.shine#InvalidParameterValueException": return [3 /*break*/, 4];
                        case "LimitExceededException": return [3 /*break*/, 6];
                        case "com.amazonaws.shine#LimitExceededException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.shine#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ListTerminologiesCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ListTerminologiesCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListTerminologiesResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ListTerminologiesResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ListTerminologiesCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.shine#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidParameterValueException": return [3 /*break*/, 4];
                        case "com.amazonaws.shine#InvalidParameterValueException": return [3 /*break*/, 4];
                        case "TooManyRequestsException": return [3 /*break*/, 6];
                        case "com.amazonaws.shine#TooManyRequestsException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidParameterValueExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ListTextTranslationJobsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ListTextTranslationJobsCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListTextTranslationJobsResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ListTextTranslationJobsResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ListTextTranslationJobsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.shine#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidFilterException": return [3 /*break*/, 4];
                        case "com.amazonaws.shine#InvalidFilterException": return [3 /*break*/, 4];
                        case "InvalidRequestException": return [3 /*break*/, 6];
                        case "com.amazonaws.shine#InvalidRequestException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.shine#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidFilterExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StartTextTranslationJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StartTextTranslationJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StartTextTranslationJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "StartTextTranslationJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StartTextTranslationJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, parsedBody, message;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _j.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.shine#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.shine#InvalidRequestException": return [3 /*break*/, 4];
                        case "ResourceNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.shine#ResourceNotFoundException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.shine#TooManyRequestsException": return [3 /*break*/, 8];
                        case "UnsupportedLanguagePairException": return [3 /*break*/, 10];
                        case "com.amazonaws.shine#UnsupportedLanguagePairException": return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 12];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1UnsupportedLanguagePairExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StopTextTranslationJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StopTextTranslationJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StopTextTranslationJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "StopTextTranslationJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StopTextTranslationJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.shine#InternalServerException": return [3 /*break*/, 2];
                        case "ResourceNotFoundException": return [3 /*break*/, 4];
                        case "com.amazonaws.shine#ResourceNotFoundException": return [3 /*break*/, 4];
                        case "TooManyRequestsException": return [3 /*break*/, 6];
                        case "com.amazonaws.shine#TooManyRequestsException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1TranslateTextCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1TranslateTextCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1TranslateTextResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "TranslateTextResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1TranslateTextCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;
        return __generator(this, function (_m) {
            switch (_m.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _m.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "DetectedLanguageLowConfidenceException": return [3 /*break*/, 2];
                        case "com.amazonaws.shine#DetectedLanguageLowConfidenceException": return [3 /*break*/, 2];
                        case "InternalServerException": return [3 /*break*/, 4];
                        case "com.amazonaws.shine#InternalServerException": return [3 /*break*/, 4];
                        case "InvalidRequestException": return [3 /*break*/, 6];
                        case "com.amazonaws.shine#InvalidRequestException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.shine#ResourceNotFoundException": return [3 /*break*/, 8];
                        case "ServiceUnavailableException": return [3 /*break*/, 10];
                        case "com.amazonaws.shine#ServiceUnavailableException": return [3 /*break*/, 10];
                        case "TextSizeLimitExceededException": return [3 /*break*/, 12];
                        case "com.amazonaws.shine#TextSizeLimitExceededException": return [3 /*break*/, 12];
                        case "TooManyRequestsException": return [3 /*break*/, 14];
                        case "com.amazonaws.shine#TooManyRequestsException": return [3 /*break*/, 14];
                        case "UnsupportedLanguagePairException": return [3 /*break*/, 16];
                        case "com.amazonaws.shine#UnsupportedLanguagePairException": return [3 /*break*/, 16];
                    }
                    return [3 /*break*/, 18];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1DetectedLanguageLowConfidenceExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 16:
                    _l = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1UnsupportedLanguagePairExceptionResponse(parsedOutput, context)];
                case 17:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 18:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _m.label = 19;
                case 19:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
var deserializeAws_json1_1DetectedLanguageLowConfidenceExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1DetectedLanguageLowConfidenceException(body, context);
        contents = __assign({ name: "DetectedLanguageLowConfidenceException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InternalServerExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InternalServerException(body, context);
        contents = __assign({ name: "InternalServerException", $fault: "server", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidFilterExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidFilterException(body, context);
        contents = __assign({ name: "InvalidFilterException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidParameterValueExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidParameterValueException(body, context);
        contents = __assign({ name: "InvalidParameterValueException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidRequestExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidRequestException(body, context);
        contents = __assign({ name: "InvalidRequestException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1LimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1LimitExceededException(body, context);
        contents = __assign({ name: "LimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ResourceNotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
        contents = __assign({ name: "ResourceNotFoundException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ServiceUnavailableExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ServiceUnavailableException(body, context);
        contents = __assign({ name: "ServiceUnavailableException", $fault: "server", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1TextSizeLimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1TextSizeLimitExceededException(body, context);
        contents = __assign({ name: "TextSizeLimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1TooManyRequestsExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1TooManyRequestsException(body, context);
        contents = __assign({ name: "TooManyRequestsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1UnsupportedLanguagePairExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1UnsupportedLanguagePairException(body, context);
        contents = __assign({ name: "UnsupportedLanguagePairException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var serializeAws_json1_1DeleteTerminologyRequest = function (input, context) {
    var bodyParams = {};
    if (input.Name !== undefined) {
        bodyParams["Name"] = input.Name;
    }
    return bodyParams;
};
var serializeAws_json1_1DescribeTextTranslationJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.JobId !== undefined) {
        bodyParams["JobId"] = input.JobId;
    }
    return bodyParams;
};
var serializeAws_json1_1EncryptionKey = function (input, context) {
    var bodyParams = {};
    if (input.Id !== undefined) {
        bodyParams["Id"] = input.Id;
    }
    if (input.Type !== undefined) {
        bodyParams["Type"] = input.Type;
    }
    return bodyParams;
};
var serializeAws_json1_1GetTerminologyRequest = function (input, context) {
    var bodyParams = {};
    if (input.Name !== undefined) {
        bodyParams["Name"] = input.Name;
    }
    if (input.TerminologyDataFormat !== undefined) {
        bodyParams["TerminologyDataFormat"] = input.TerminologyDataFormat;
    }
    return bodyParams;
};
var serializeAws_json1_1ImportTerminologyRequest = function (input, context) {
    var bodyParams = {};
    if (input.Description !== undefined) {
        bodyParams["Description"] = input.Description;
    }
    if (input.EncryptionKey !== undefined) {
        bodyParams["EncryptionKey"] = serializeAws_json1_1EncryptionKey(input.EncryptionKey, context);
    }
    if (input.MergeStrategy !== undefined) {
        bodyParams["MergeStrategy"] = input.MergeStrategy;
    }
    if (input.Name !== undefined) {
        bodyParams["Name"] = input.Name;
    }
    if (input.TerminologyData !== undefined) {
        bodyParams["TerminologyData"] = serializeAws_json1_1TerminologyData(input.TerminologyData, context);
    }
    return bodyParams;
};
var serializeAws_json1_1InputDataConfig = function (input, context) {
    var bodyParams = {};
    if (input.ContentType !== undefined) {
        bodyParams["ContentType"] = input.ContentType;
    }
    if (input.S3Uri !== undefined) {
        bodyParams["S3Uri"] = input.S3Uri;
    }
    return bodyParams;
};
var serializeAws_json1_1ListTerminologiesRequest = function (input, context) {
    var bodyParams = {};
    if (input.MaxResults !== undefined) {
        bodyParams["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined) {
        bodyParams["NextToken"] = input.NextToken;
    }
    return bodyParams;
};
var serializeAws_json1_1ListTextTranslationJobsRequest = function (input, context) {
    var bodyParams = {};
    if (input.Filter !== undefined) {
        bodyParams["Filter"] = serializeAws_json1_1TextTranslationJobFilter(input.Filter, context);
    }
    if (input.MaxResults !== undefined) {
        bodyParams["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined) {
        bodyParams["NextToken"] = input.NextToken;
    }
    return bodyParams;
};
var serializeAws_json1_1OutputDataConfig = function (input, context) {
    var bodyParams = {};
    if (input.S3Uri !== undefined) {
        bodyParams["S3Uri"] = input.S3Uri;
    }
    return bodyParams;
};
var serializeAws_json1_1ResourceNameList = function (input, context) {
    var e_1, _a;
    var contents = [];
    try {
        for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
            var entry = input_1_1.value;
            contents.push(entry);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return contents;
};
var serializeAws_json1_1StartTextTranslationJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.ClientToken === undefined) {
        input.ClientToken = generateIdempotencyToken();
    }
    if (input.ClientToken !== undefined) {
        bodyParams["ClientToken"] = input.ClientToken;
    }
    if (input.DataAccessRoleArn !== undefined) {
        bodyParams["DataAccessRoleArn"] = input.DataAccessRoleArn;
    }
    if (input.InputDataConfig !== undefined) {
        bodyParams["InputDataConfig"] = serializeAws_json1_1InputDataConfig(input.InputDataConfig, context);
    }
    if (input.JobName !== undefined) {
        bodyParams["JobName"] = input.JobName;
    }
    if (input.OutputDataConfig !== undefined) {
        bodyParams["OutputDataConfig"] = serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context);
    }
    if (input.SourceLanguageCode !== undefined) {
        bodyParams["SourceLanguageCode"] = input.SourceLanguageCode;
    }
    if (input.TargetLanguageCodes !== undefined) {
        bodyParams["TargetLanguageCodes"] = serializeAws_json1_1TargetLanguageCodeStringList(input.TargetLanguageCodes, context);
    }
    if (input.TerminologyNames !== undefined) {
        bodyParams["TerminologyNames"] = serializeAws_json1_1ResourceNameList(input.TerminologyNames, context);
    }
    return bodyParams;
};
var serializeAws_json1_1StopTextTranslationJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.JobId !== undefined) {
        bodyParams["JobId"] = input.JobId;
    }
    return bodyParams;
};
var serializeAws_json1_1TargetLanguageCodeStringList = function (input, context) {
    var e_2, _a;
    var contents = [];
    try {
        for (var input_2 = __values(input), input_2_1 = input_2.next(); !input_2_1.done; input_2_1 = input_2.next()) {
            var entry = input_2_1.value;
            contents.push(entry);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (input_2_1 && !input_2_1.done && (_a = input_2.return)) _a.call(input_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return contents;
};
var serializeAws_json1_1TerminologyData = function (input, context) {
    var bodyParams = {};
    if (input.File !== undefined) {
        bodyParams["File"] = context.base64Encoder(input.File);
    }
    if (input.Format !== undefined) {
        bodyParams["Format"] = input.Format;
    }
    return bodyParams;
};
var serializeAws_json1_1TextTranslationJobFilter = function (input, context) {
    var bodyParams = {};
    if (input.JobName !== undefined) {
        bodyParams["JobName"] = input.JobName;
    }
    if (input.JobStatus !== undefined) {
        bodyParams["JobStatus"] = input.JobStatus;
    }
    if (input.SubmittedAfterTime !== undefined) {
        bodyParams["SubmittedAfterTime"] = Math.round(input.SubmittedAfterTime.getTime() / 1000);
    }
    if (input.SubmittedBeforeTime !== undefined) {
        bodyParams["SubmittedBeforeTime"] = Math.round(input.SubmittedBeforeTime.getTime() / 1000);
    }
    return bodyParams;
};
var serializeAws_json1_1TranslateTextRequest = function (input, context) {
    var bodyParams = {};
    if (input.SourceLanguageCode !== undefined) {
        bodyParams["SourceLanguageCode"] = input.SourceLanguageCode;
    }
    if (input.TargetLanguageCode !== undefined) {
        bodyParams["TargetLanguageCode"] = input.TargetLanguageCode;
    }
    if (input.TerminologyNames !== undefined) {
        bodyParams["TerminologyNames"] = serializeAws_json1_1ResourceNameList(input.TerminologyNames, context);
    }
    if (input.Text !== undefined) {
        bodyParams["Text"] = input.Text;
    }
    return bodyParams;
};
var deserializeAws_json1_1AppliedTerminology = function (output, context) {
    var contents = {
        __type: "AppliedTerminology",
        Name: undefined,
        Terms: undefined
    };
    if (output.Name !== undefined && output.Name !== null) {
        contents.Name = output.Name;
    }
    if (output.Terms !== undefined && output.Terms !== null) {
        contents.Terms = deserializeAws_json1_1TermList(output.Terms, context);
    }
    return contents;
};
var deserializeAws_json1_1AppliedTerminologyList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1AppliedTerminology(entry, context);
    });
};
var deserializeAws_json1_1DescribeTextTranslationJobResponse = function (output, context) {
    var contents = {
        __type: "DescribeTextTranslationJobResponse",
        TextTranslationJobProperties: undefined
    };
    if (output.TextTranslationJobProperties !== undefined &&
        output.TextTranslationJobProperties !== null) {
        contents.TextTranslationJobProperties = deserializeAws_json1_1TextTranslationJobProperties(output.TextTranslationJobProperties, context);
    }
    return contents;
};
var deserializeAws_json1_1DetectedLanguageLowConfidenceException = function (output, context) {
    var contents = {
        __type: "DetectedLanguageLowConfidenceException",
        DetectedLanguageCode: undefined,
        Message: undefined
    };
    if (output.DetectedLanguageCode !== undefined &&
        output.DetectedLanguageCode !== null) {
        contents.DetectedLanguageCode = output.DetectedLanguageCode;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1EncryptionKey = function (output, context) {
    var contents = {
        __type: "EncryptionKey",
        Id: undefined,
        Type: undefined
    };
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.Type !== undefined && output.Type !== null) {
        contents.Type = output.Type;
    }
    return contents;
};
var deserializeAws_json1_1GetTerminologyResponse = function (output, context) {
    var contents = {
        __type: "GetTerminologyResponse",
        TerminologyDataLocation: undefined,
        TerminologyProperties: undefined
    };
    if (output.TerminologyDataLocation !== undefined &&
        output.TerminologyDataLocation !== null) {
        contents.TerminologyDataLocation = deserializeAws_json1_1TerminologyDataLocation(output.TerminologyDataLocation, context);
    }
    if (output.TerminologyProperties !== undefined &&
        output.TerminologyProperties !== null) {
        contents.TerminologyProperties = deserializeAws_json1_1TerminologyProperties(output.TerminologyProperties, context);
    }
    return contents;
};
var deserializeAws_json1_1ImportTerminologyResponse = function (output, context) {
    var contents = {
        __type: "ImportTerminologyResponse",
        TerminologyProperties: undefined
    };
    if (output.TerminologyProperties !== undefined &&
        output.TerminologyProperties !== null) {
        contents.TerminologyProperties = deserializeAws_json1_1TerminologyProperties(output.TerminologyProperties, context);
    }
    return contents;
};
var deserializeAws_json1_1InputDataConfig = function (output, context) {
    var contents = {
        __type: "InputDataConfig",
        ContentType: undefined,
        S3Uri: undefined
    };
    if (output.ContentType !== undefined && output.ContentType !== null) {
        contents.ContentType = output.ContentType;
    }
    if (output.S3Uri !== undefined && output.S3Uri !== null) {
        contents.S3Uri = output.S3Uri;
    }
    return contents;
};
var deserializeAws_json1_1InternalServerException = function (output, context) {
    var contents = {
        __type: "InternalServerException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1InvalidFilterException = function (output, context) {
    var contents = {
        __type: "InvalidFilterException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1InvalidParameterValueException = function (output, context) {
    var contents = {
        __type: "InvalidParameterValueException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1InvalidRequestException = function (output, context) {
    var contents = {
        __type: "InvalidRequestException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1JobDetails = function (output, context) {
    var contents = {
        __type: "JobDetails",
        DocumentsWithErrorsCount: undefined,
        InputDocumentsCount: undefined,
        TranslatedDocumentsCount: undefined
    };
    if (output.DocumentsWithErrorsCount !== undefined &&
        output.DocumentsWithErrorsCount !== null) {
        contents.DocumentsWithErrorsCount = output.DocumentsWithErrorsCount;
    }
    if (output.InputDocumentsCount !== undefined &&
        output.InputDocumentsCount !== null) {
        contents.InputDocumentsCount = output.InputDocumentsCount;
    }
    if (output.TranslatedDocumentsCount !== undefined &&
        output.TranslatedDocumentsCount !== null) {
        contents.TranslatedDocumentsCount = output.TranslatedDocumentsCount;
    }
    return contents;
};
var deserializeAws_json1_1LanguageCodeStringList = function (output, context) {
    return (output || []).map(function (entry) { return entry; });
};
var deserializeAws_json1_1LimitExceededException = function (output, context) {
    var contents = {
        __type: "LimitExceededException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1ListTerminologiesResponse = function (output, context) {
    var contents = {
        __type: "ListTerminologiesResponse",
        NextToken: undefined,
        TerminologyPropertiesList: undefined
    };
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    if (output.TerminologyPropertiesList !== undefined &&
        output.TerminologyPropertiesList !== null) {
        contents.TerminologyPropertiesList = deserializeAws_json1_1TerminologyPropertiesList(output.TerminologyPropertiesList, context);
    }
    return contents;
};
var deserializeAws_json1_1ListTextTranslationJobsResponse = function (output, context) {
    var contents = {
        __type: "ListTextTranslationJobsResponse",
        NextToken: undefined,
        TextTranslationJobPropertiesList: undefined
    };
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    if (output.TextTranslationJobPropertiesList !== undefined &&
        output.TextTranslationJobPropertiesList !== null) {
        contents.TextTranslationJobPropertiesList = deserializeAws_json1_1TextTranslationJobPropertiesList(output.TextTranslationJobPropertiesList, context);
    }
    return contents;
};
var deserializeAws_json1_1OutputDataConfig = function (output, context) {
    var contents = {
        __type: "OutputDataConfig",
        S3Uri: undefined
    };
    if (output.S3Uri !== undefined && output.S3Uri !== null) {
        contents.S3Uri = output.S3Uri;
    }
    return contents;
};
var deserializeAws_json1_1ResourceNameList = function (output, context) {
    return (output || []).map(function (entry) { return entry; });
};
var deserializeAws_json1_1ResourceNotFoundException = function (output, context) {
    var contents = {
        __type: "ResourceNotFoundException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1ServiceUnavailableException = function (output, context) {
    var contents = {
        __type: "ServiceUnavailableException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1StartTextTranslationJobResponse = function (output, context) {
    var contents = {
        __type: "StartTextTranslationJobResponse",
        JobId: undefined,
        JobStatus: undefined
    };
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    return contents;
};
var deserializeAws_json1_1StopTextTranslationJobResponse = function (output, context) {
    var contents = {
        __type: "StopTextTranslationJobResponse",
        JobId: undefined,
        JobStatus: undefined
    };
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    return contents;
};
var deserializeAws_json1_1TargetLanguageCodeStringList = function (output, context) {
    return (output || []).map(function (entry) { return entry; });
};
var deserializeAws_json1_1Term = function (output, context) {
    var contents = {
        __type: "Term",
        SourceText: undefined,
        TargetText: undefined
    };
    if (output.SourceText !== undefined && output.SourceText !== null) {
        contents.SourceText = output.SourceText;
    }
    if (output.TargetText !== undefined && output.TargetText !== null) {
        contents.TargetText = output.TargetText;
    }
    return contents;
};
var deserializeAws_json1_1TermList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1Term(entry, context);
    });
};
var deserializeAws_json1_1TerminologyDataLocation = function (output, context) {
    var contents = {
        __type: "TerminologyDataLocation",
        Location: undefined,
        RepositoryType: undefined
    };
    if (output.Location !== undefined && output.Location !== null) {
        contents.Location = output.Location;
    }
    if (output.RepositoryType !== undefined && output.RepositoryType !== null) {
        contents.RepositoryType = output.RepositoryType;
    }
    return contents;
};
var deserializeAws_json1_1TerminologyProperties = function (output, context) {
    var contents = {
        __type: "TerminologyProperties",
        Arn: undefined,
        CreatedAt: undefined,
        Description: undefined,
        EncryptionKey: undefined,
        LastUpdatedAt: undefined,
        Name: undefined,
        SizeBytes: undefined,
        SourceLanguageCode: undefined,
        TargetLanguageCodes: undefined,
        TermCount: undefined
    };
    if (output.Arn !== undefined && output.Arn !== null) {
        contents.Arn = output.Arn;
    }
    if (output.CreatedAt !== undefined && output.CreatedAt !== null) {
        contents.CreatedAt = new Date(Math.round(output.CreatedAt * 1000));
    }
    if (output.Description !== undefined && output.Description !== null) {
        contents.Description = output.Description;
    }
    if (output.EncryptionKey !== undefined && output.EncryptionKey !== null) {
        contents.EncryptionKey = deserializeAws_json1_1EncryptionKey(output.EncryptionKey, context);
    }
    if (output.LastUpdatedAt !== undefined && output.LastUpdatedAt !== null) {
        contents.LastUpdatedAt = new Date(Math.round(output.LastUpdatedAt * 1000));
    }
    if (output.Name !== undefined && output.Name !== null) {
        contents.Name = output.Name;
    }
    if (output.SizeBytes !== undefined && output.SizeBytes !== null) {
        contents.SizeBytes = output.SizeBytes;
    }
    if (output.SourceLanguageCode !== undefined &&
        output.SourceLanguageCode !== null) {
        contents.SourceLanguageCode = output.SourceLanguageCode;
    }
    if (output.TargetLanguageCodes !== undefined &&
        output.TargetLanguageCodes !== null) {
        contents.TargetLanguageCodes = deserializeAws_json1_1LanguageCodeStringList(output.TargetLanguageCodes, context);
    }
    if (output.TermCount !== undefined && output.TermCount !== null) {
        contents.TermCount = output.TermCount;
    }
    return contents;
};
var deserializeAws_json1_1TerminologyPropertiesList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1TerminologyProperties(entry, context);
    });
};
var deserializeAws_json1_1TextSizeLimitExceededException = function (output, context) {
    var contents = {
        __type: "TextSizeLimitExceededException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1TextTranslationJobProperties = function (output, context) {
    var contents = {
        __type: "TextTranslationJobProperties",
        DataAccessRoleArn: undefined,
        EndTime: undefined,
        InputDataConfig: undefined,
        JobDetails: undefined,
        JobId: undefined,
        JobName: undefined,
        JobStatus: undefined,
        Message: undefined,
        OutputDataConfig: undefined,
        SourceLanguageCode: undefined,
        SubmittedTime: undefined,
        TargetLanguageCodes: undefined,
        TerminologyNames: undefined
    };
    if (output.DataAccessRoleArn !== undefined &&
        output.DataAccessRoleArn !== null) {
        contents.DataAccessRoleArn = output.DataAccessRoleArn;
    }
    if (output.EndTime !== undefined && output.EndTime !== null) {
        contents.EndTime = new Date(Math.round(output.EndTime * 1000));
    }
    if (output.InputDataConfig !== undefined && output.InputDataConfig !== null) {
        contents.InputDataConfig = deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context);
    }
    if (output.JobDetails !== undefined && output.JobDetails !== null) {
        contents.JobDetails = deserializeAws_json1_1JobDetails(output.JobDetails, context);
    }
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobName !== undefined && output.JobName !== null) {
        contents.JobName = output.JobName;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    if (output.OutputDataConfig !== undefined &&
        output.OutputDataConfig !== null) {
        contents.OutputDataConfig = deserializeAws_json1_1OutputDataConfig(output.OutputDataConfig, context);
    }
    if (output.SourceLanguageCode !== undefined &&
        output.SourceLanguageCode !== null) {
        contents.SourceLanguageCode = output.SourceLanguageCode;
    }
    if (output.SubmittedTime !== undefined && output.SubmittedTime !== null) {
        contents.SubmittedTime = new Date(Math.round(output.SubmittedTime * 1000));
    }
    if (output.TargetLanguageCodes !== undefined &&
        output.TargetLanguageCodes !== null) {
        contents.TargetLanguageCodes = deserializeAws_json1_1TargetLanguageCodeStringList(output.TargetLanguageCodes, context);
    }
    if (output.TerminologyNames !== undefined &&
        output.TerminologyNames !== null) {
        contents.TerminologyNames = deserializeAws_json1_1ResourceNameList(output.TerminologyNames, context);
    }
    return contents;
};
var deserializeAws_json1_1TextTranslationJobPropertiesList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1TextTranslationJobProperties(entry, context);
    });
};
var deserializeAws_json1_1TooManyRequestsException = function (output, context) {
    var contents = {
        __type: "TooManyRequestsException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1TranslateTextResponse = function (output, context) {
    var contents = {
        __type: "TranslateTextResponse",
        AppliedTerminologies: undefined,
        SourceLanguageCode: undefined,
        TargetLanguageCode: undefined,
        TranslatedText: undefined
    };
    if (output.AppliedTerminologies !== undefined &&
        output.AppliedTerminologies !== null) {
        contents.AppliedTerminologies = deserializeAws_json1_1AppliedTerminologyList(output.AppliedTerminologies, context);
    }
    if (output.SourceLanguageCode !== undefined &&
        output.SourceLanguageCode !== null) {
        contents.SourceLanguageCode = output.SourceLanguageCode;
    }
    if (output.TargetLanguageCode !== undefined &&
        output.TargetLanguageCode !== null) {
        contents.TargetLanguageCode = output.TargetLanguageCode;
    }
    if (output.TranslatedText !== undefined && output.TranslatedText !== null) {
        contents.TranslatedText = output.TranslatedText;
    }
    return contents;
};
var deserializeAws_json1_1UnsupportedLanguagePairException = function (output, context) {
    var contents = {
        __type: "UnsupportedLanguagePairException",
        Message: undefined,
        SourceLanguageCode: undefined,
        TargetLanguageCode: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    if (output.SourceLanguageCode !== undefined &&
        output.SourceLanguageCode !== null) {
        contents.SourceLanguageCode = output.SourceLanguageCode;
    }
    if (output.TargetLanguageCode !== undefined &&
        output.TargetLanguageCode !== null) {
        contents.TargetLanguageCode = output.TargetLanguageCode;
    }
    return contents;
};
var deserializeMetadata = function (output) { return ({
    httpStatusCode: output.statusCode,
    httpHeaders: output.headers,
    requestId: output.headers["x-amzn-requestid"]
}); };
// Collect low-level response body stream to Uint8Array.
var collectBody = function (streamBody, context) {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return (context.streamCollector(streamBody) || Promise.resolve(new Uint8Array()));
};
// Encode Uint8Array data into string with utf-8.
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) {
        return context.utf8Encoder(body);
    });
};
var buildHttpRpcRequest = function (context, headers, path, resolvedHostname, body) {
    var contents = __assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", path: path, headers: headers });
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
};
//# sourceMappingURL=Aws_json1_1.js.map