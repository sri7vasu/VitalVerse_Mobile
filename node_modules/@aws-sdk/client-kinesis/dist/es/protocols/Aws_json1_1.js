import { __assign, __awaiter, __generator, __values } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
export function serializeAws_json1_1AddTagsToStreamCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.AddTagsToStream";
            body = JSON.stringify(serializeAws_json1_1AddTagsToStreamInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1CreateStreamCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.CreateStream";
            body = JSON.stringify(serializeAws_json1_1CreateStreamInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DecreaseStreamRetentionPeriodCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.DecreaseStreamRetentionPeriod";
            body = JSON.stringify(serializeAws_json1_1DecreaseStreamRetentionPeriodInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DeleteStreamCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.DeleteStream";
            body = JSON.stringify(serializeAws_json1_1DeleteStreamInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DeregisterStreamConsumerCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.DeregisterStreamConsumer";
            body = JSON.stringify(serializeAws_json1_1DeregisterStreamConsumerInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DescribeLimitsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.DescribeLimits";
            body = JSON.stringify(serializeAws_json1_1DescribeLimitsInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DescribeStreamCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.DescribeStream";
            body = JSON.stringify(serializeAws_json1_1DescribeStreamInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DescribeStreamConsumerCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.DescribeStreamConsumer";
            body = JSON.stringify(serializeAws_json1_1DescribeStreamConsumerInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DescribeStreamSummaryCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.DescribeStreamSummary";
            body = JSON.stringify(serializeAws_json1_1DescribeStreamSummaryInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DisableEnhancedMonitoringCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.DisableEnhancedMonitoring";
            body = JSON.stringify(serializeAws_json1_1DisableEnhancedMonitoringInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1EnableEnhancedMonitoringCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.EnableEnhancedMonitoring";
            body = JSON.stringify(serializeAws_json1_1EnableEnhancedMonitoringInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1GetRecordsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.GetRecords";
            body = JSON.stringify(serializeAws_json1_1GetRecordsInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1GetShardIteratorCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.GetShardIterator";
            body = JSON.stringify(serializeAws_json1_1GetShardIteratorInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1IncreaseStreamRetentionPeriodCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.IncreaseStreamRetentionPeriod";
            body = JSON.stringify(serializeAws_json1_1IncreaseStreamRetentionPeriodInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ListShardsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.ListShards";
            body = JSON.stringify(serializeAws_json1_1ListShardsInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ListStreamConsumersCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.ListStreamConsumers";
            body = JSON.stringify(serializeAws_json1_1ListStreamConsumersInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ListStreamsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.ListStreams";
            body = JSON.stringify(serializeAws_json1_1ListStreamsInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ListTagsForStreamCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.ListTagsForStream";
            body = JSON.stringify(serializeAws_json1_1ListTagsForStreamInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1MergeShardsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.MergeShards";
            body = JSON.stringify(serializeAws_json1_1MergeShardsInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1PutRecordCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.PutRecord";
            body = JSON.stringify(serializeAws_json1_1PutRecordInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1PutRecordsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.PutRecords";
            body = JSON.stringify(serializeAws_json1_1PutRecordsInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1RegisterStreamConsumerCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.RegisterStreamConsumer";
            body = JSON.stringify(serializeAws_json1_1RegisterStreamConsumerInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1RemoveTagsFromStreamCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.RemoveTagsFromStream";
            body = JSON.stringify(serializeAws_json1_1RemoveTagsFromStreamInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1SplitShardCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.SplitShard";
            body = JSON.stringify(serializeAws_json1_1SplitShardInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StartStreamEncryptionCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.StartStreamEncryption";
            body = JSON.stringify(serializeAws_json1_1StartStreamEncryptionInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StopStreamEncryptionCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.StopStreamEncryption";
            body = JSON.stringify(serializeAws_json1_1StopStreamEncryptionInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1SubscribeToShardCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.SubscribeToShard";
            body = JSON.stringify(serializeAws_json1_1SubscribeToShardInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1UpdateShardCountCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Kinesis_20131202.UpdateShardCount";
            body = JSON.stringify(serializeAws_json1_1UpdateShardCountInput(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function deserializeAws_json1_1AddTagsToStreamCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1AddTagsToStreamCommandError(output, context)];
                    }
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1AddTagsToStreamCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "LimitExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceInUseException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1CreateStreamCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1CreateStreamCommandError(output, context)];
                    }
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1CreateStreamCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "LimitExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceInUseException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DecreaseStreamRetentionPeriodCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DecreaseStreamRetentionPeriodCommandError(output, context)];
                    }
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DecreaseStreamRetentionPeriodCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "LimitExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceInUseException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DeleteStreamCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DeleteStreamCommandError(output, context)];
                    }
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DeleteStreamCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "LimitExceededException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 2];
                        case "ResourceInUseException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#ResourceInUseException": return [3 /*break*/, 4];
                        case "ResourceNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DeregisterStreamConsumerCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DeregisterStreamConsumerCommandError(output, context)];
                    }
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DeregisterStreamConsumerCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "LimitExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 4];
                        case "ResourceNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DescribeLimitsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DescribeLimitsCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeLimitsOutput(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DescribeLimitsOutput" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DescribeLimitsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, parsedBody, message;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _e.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "LimitExceededException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 2];
                    }
                    return [3 /*break*/, 4];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 5];
                case 4:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _e.label = 5;
                case 5:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DescribeStreamCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DescribeStreamCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeStreamOutput(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DescribeStreamOutput" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DescribeStreamCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, parsedBody, message;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "LimitExceededException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 2];
                        case "ResourceNotFoundException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 4];
                    }
                    return [3 /*break*/, 6];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 7];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 7];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DescribeStreamConsumerCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DescribeStreamConsumerCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeStreamConsumerOutput(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DescribeStreamConsumerOutput" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DescribeStreamConsumerCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "LimitExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 4];
                        case "ResourceNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DescribeStreamSummaryCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DescribeStreamSummaryCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeStreamSummaryOutput(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DescribeStreamSummaryOutput" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DescribeStreamSummaryCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, parsedBody, message;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "LimitExceededException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 2];
                        case "ResourceNotFoundException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 4];
                    }
                    return [3 /*break*/, 6];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 7];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 7];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DisableEnhancedMonitoringCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DisableEnhancedMonitoringCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1EnhancedMonitoringOutput(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "EnhancedMonitoringOutput" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DisableEnhancedMonitoringCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "LimitExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceInUseException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1EnableEnhancedMonitoringCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1EnableEnhancedMonitoringCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1EnhancedMonitoringOutput(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "EnhancedMonitoringOutput" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1EnableEnhancedMonitoringCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "LimitExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceInUseException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1GetRecordsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1GetRecordsCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetRecordsOutput(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "GetRecordsOutput" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1GetRecordsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, parsedBody, message;
        return __generator(this, function (_p) {
            switch (_p.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _p.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "ExpiredIteratorException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#ExpiredIteratorException": return [3 /*break*/, 2];
                        case "InvalidArgumentException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 4];
                        case "KMSAccessDeniedException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#KMSAccessDeniedException": return [3 /*break*/, 6];
                        case "KMSDisabledException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#KMSDisabledException": return [3 /*break*/, 8];
                        case "KMSInvalidStateException": return [3 /*break*/, 10];
                        case "com.amazonaws.kinesis.v20131202#KMSInvalidStateException": return [3 /*break*/, 10];
                        case "KMSNotFoundException": return [3 /*break*/, 12];
                        case "com.amazonaws.kinesis.v20131202#KMSNotFoundException": return [3 /*break*/, 12];
                        case "KMSOptInRequired": return [3 /*break*/, 14];
                        case "com.amazonaws.kinesis.v20131202#KMSOptInRequired": return [3 /*break*/, 14];
                        case "KMSThrottlingException": return [3 /*break*/, 16];
                        case "com.amazonaws.kinesis.v20131202#KMSThrottlingException": return [3 /*break*/, 16];
                        case "ProvisionedThroughputExceededException": return [3 /*break*/, 18];
                        case "com.amazonaws.kinesis.v20131202#ProvisionedThroughputExceededException": return [3 /*break*/, 18];
                        case "ResourceNotFoundException": return [3 /*break*/, 20];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 20];
                    }
                    return [3 /*break*/, 22];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ExpiredIteratorExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSAccessDeniedExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSDisabledExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSNotFoundExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSOptInRequiredResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 16:
                    _l = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSThrottlingExceptionResponse(parsedOutput, context)];
                case 17:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 18:
                    _m = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
                case 19:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 20:
                    _o = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 21:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 22:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _p.label = 23;
                case 23:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1GetShardIteratorCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1GetShardIteratorCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetShardIteratorOutput(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "GetShardIteratorOutput" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1GetShardIteratorCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "ProvisionedThroughputExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#ProvisionedThroughputExceededException": return [3 /*break*/, 4];
                        case "ResourceNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1IncreaseStreamRetentionPeriodCommandError(output, context)];
                    }
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1IncreaseStreamRetentionPeriodCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "LimitExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceInUseException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ListShardsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ListShardsCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListShardsOutput(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ListShardsOutput" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ListShardsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, parsedBody, message;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _j.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "ExpiredNextTokenException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#ExpiredNextTokenException": return [3 /*break*/, 2];
                        case "InvalidArgumentException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 4];
                        case "LimitExceededException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 6];
                        case "ResourceInUseException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#ResourceInUseException": return [3 /*break*/, 8];
                        case "ResourceNotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 12];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ExpiredNextTokenExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ListStreamConsumersCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ListStreamConsumersCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListStreamConsumersOutput(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ListStreamConsumersOutput" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ListStreamConsumersCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, parsedBody, message;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _j.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "ExpiredNextTokenException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#ExpiredNextTokenException": return [3 /*break*/, 2];
                        case "InvalidArgumentException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 4];
                        case "LimitExceededException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 6];
                        case "ResourceInUseException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#ResourceInUseException": return [3 /*break*/, 8];
                        case "ResourceNotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 12];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ExpiredNextTokenExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ListStreamsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ListStreamsCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListStreamsOutput(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ListStreamsOutput" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ListStreamsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, parsedBody, message;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _e.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "LimitExceededException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 2];
                    }
                    return [3 /*break*/, 4];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 5];
                case 4:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _e.label = 5;
                case 5:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ListTagsForStreamCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ListTagsForStreamCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListTagsForStreamOutput(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ListTagsForStreamOutput" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ListTagsForStreamCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "LimitExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 4];
                        case "ResourceNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1MergeShardsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1MergeShardsCommandError(output, context)];
                    }
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1MergeShardsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "LimitExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceInUseException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1PutRecordCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1PutRecordCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1PutRecordOutput(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "PutRecordOutput" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1PutRecordCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, parsedBody, message;
        return __generator(this, function (_o) {
            switch (_o.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _o.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "KMSAccessDeniedException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#KMSAccessDeniedException": return [3 /*break*/, 4];
                        case "KMSDisabledException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#KMSDisabledException": return [3 /*break*/, 6];
                        case "KMSInvalidStateException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#KMSInvalidStateException": return [3 /*break*/, 8];
                        case "KMSNotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.kinesis.v20131202#KMSNotFoundException": return [3 /*break*/, 10];
                        case "KMSOptInRequired": return [3 /*break*/, 12];
                        case "com.amazonaws.kinesis.v20131202#KMSOptInRequired": return [3 /*break*/, 12];
                        case "KMSThrottlingException": return [3 /*break*/, 14];
                        case "com.amazonaws.kinesis.v20131202#KMSThrottlingException": return [3 /*break*/, 14];
                        case "ProvisionedThroughputExceededException": return [3 /*break*/, 16];
                        case "com.amazonaws.kinesis.v20131202#ProvisionedThroughputExceededException": return [3 /*break*/, 16];
                        case "ResourceNotFoundException": return [3 /*break*/, 18];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 18];
                    }
                    return [3 /*break*/, 20];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSAccessDeniedExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSDisabledExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSNotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSOptInRequiredResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSThrottlingExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 16:
                    _l = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
                case 17:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 18:
                    _m = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 19:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 20:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _o.label = 21;
                case 21:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1PutRecordsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1PutRecordsCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1PutRecordsOutput(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "PutRecordsOutput" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1PutRecordsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, parsedBody, message;
        return __generator(this, function (_o) {
            switch (_o.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _o.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "KMSAccessDeniedException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#KMSAccessDeniedException": return [3 /*break*/, 4];
                        case "KMSDisabledException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#KMSDisabledException": return [3 /*break*/, 6];
                        case "KMSInvalidStateException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#KMSInvalidStateException": return [3 /*break*/, 8];
                        case "KMSNotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.kinesis.v20131202#KMSNotFoundException": return [3 /*break*/, 10];
                        case "KMSOptInRequired": return [3 /*break*/, 12];
                        case "com.amazonaws.kinesis.v20131202#KMSOptInRequired": return [3 /*break*/, 12];
                        case "KMSThrottlingException": return [3 /*break*/, 14];
                        case "com.amazonaws.kinesis.v20131202#KMSThrottlingException": return [3 /*break*/, 14];
                        case "ProvisionedThroughputExceededException": return [3 /*break*/, 16];
                        case "com.amazonaws.kinesis.v20131202#ProvisionedThroughputExceededException": return [3 /*break*/, 16];
                        case "ResourceNotFoundException": return [3 /*break*/, 18];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 18];
                    }
                    return [3 /*break*/, 20];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSAccessDeniedExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSDisabledExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSNotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSOptInRequiredResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSThrottlingExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 16:
                    _l = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
                case 17:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 18:
                    _m = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 19:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 20:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _o.label = 21;
                case 21:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1RegisterStreamConsumerCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1RegisterStreamConsumerCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1RegisterStreamConsumerOutput(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "RegisterStreamConsumerOutput" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1RegisterStreamConsumerCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "LimitExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceInUseException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1RemoveTagsFromStreamCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1RemoveTagsFromStreamCommandError(output, context)];
                    }
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1RemoveTagsFromStreamCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "LimitExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceInUseException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1SplitShardCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1SplitShardCommandError(output, context)];
                    }
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1SplitShardCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "LimitExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceInUseException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StartStreamEncryptionCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StartStreamEncryptionCommandError(output, context)];
                    }
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StartStreamEncryptionCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, parsedBody, message;
        return __generator(this, function (_p) {
            switch (_p.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _p.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "KMSAccessDeniedException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#KMSAccessDeniedException": return [3 /*break*/, 4];
                        case "KMSDisabledException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#KMSDisabledException": return [3 /*break*/, 6];
                        case "KMSInvalidStateException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#KMSInvalidStateException": return [3 /*break*/, 8];
                        case "KMSNotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.kinesis.v20131202#KMSNotFoundException": return [3 /*break*/, 10];
                        case "KMSOptInRequired": return [3 /*break*/, 12];
                        case "com.amazonaws.kinesis.v20131202#KMSOptInRequired": return [3 /*break*/, 12];
                        case "KMSThrottlingException": return [3 /*break*/, 14];
                        case "com.amazonaws.kinesis.v20131202#KMSThrottlingException": return [3 /*break*/, 14];
                        case "LimitExceededException": return [3 /*break*/, 16];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 16];
                        case "ResourceInUseException": return [3 /*break*/, 18];
                        case "com.amazonaws.kinesis.v20131202#ResourceInUseException": return [3 /*break*/, 18];
                        case "ResourceNotFoundException": return [3 /*break*/, 20];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 20];
                    }
                    return [3 /*break*/, 22];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSAccessDeniedExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSDisabledExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSNotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSOptInRequiredResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KMSThrottlingExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 16:
                    _l = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 17:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 18:
                    _m = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 19:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 20:
                    _o = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 21:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 22:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _p.label = 23;
                case 23:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StopStreamEncryptionCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StopStreamEncryptionCommandError(output, context)];
                    }
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StopStreamEncryptionCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "LimitExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceInUseException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1SubscribeToShardCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1SubscribeToShardCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1SubscribeToShardOutput(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "SubscribeToShardOutput" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1SubscribeToShardCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "LimitExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceInUseException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1UpdateShardCountCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1UpdateShardCountCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1UpdateShardCountOutput(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "UpdateShardCountOutput" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1UpdateShardCountCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidArgumentException": return [3 /*break*/, 2];
                        case "com.amazonaws.kinesis.v20131202#InvalidArgumentException": return [3 /*break*/, 2];
                        case "LimitExceededException": return [3 /*break*/, 4];
                        case "com.amazonaws.kinesis.v20131202#LimitExceededException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.kinesis.v20131202#ResourceInUseException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.kinesis.v20131202#ResourceNotFoundException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
var deserializeAws_json1_1ExpiredIteratorExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ExpiredIteratorException(body, context);
        contents = __assign({ name: "ExpiredIteratorException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ExpiredNextTokenExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ExpiredNextTokenException(body, context);
        contents = __assign({ name: "ExpiredNextTokenException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidArgumentExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidArgumentException(body, context);
        contents = __assign({ name: "InvalidArgumentException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1KMSAccessDeniedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1KMSAccessDeniedException(body, context);
        contents = __assign({ name: "KMSAccessDeniedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1KMSDisabledExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1KMSDisabledException(body, context);
        contents = __assign({ name: "KMSDisabledException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1KMSInvalidStateExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1KMSInvalidStateException(body, context);
        contents = __assign({ name: "KMSInvalidStateException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1KMSNotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1KMSNotFoundException(body, context);
        contents = __assign({ name: "KMSNotFoundException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1KMSOptInRequiredResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1KMSOptInRequired(body, context);
        contents = __assign({ name: "KMSOptInRequired", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1KMSThrottlingExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1KMSThrottlingException(body, context);
        contents = __assign({ name: "KMSThrottlingException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1LimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1LimitExceededException(body, context);
        contents = __assign({ name: "LimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ProvisionedThroughputExceededException(body, context);
        contents = __assign({ name: "ProvisionedThroughputExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ResourceInUseExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ResourceInUseException(body, context);
        contents = __assign({ name: "ResourceInUseException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ResourceNotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
        contents = __assign({ name: "ResourceNotFoundException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var serializeAws_json1_1AddTagsToStreamInput = function (input, context) {
    var bodyParams = {};
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    if (input.Tags !== undefined) {
        bodyParams["Tags"] = serializeAws_json1_1TagMap(input.Tags, context);
    }
    return bodyParams;
};
var serializeAws_json1_1CreateStreamInput = function (input, context) {
    var bodyParams = {};
    if (input.ShardCount !== undefined) {
        bodyParams["ShardCount"] = input.ShardCount;
    }
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    return bodyParams;
};
var serializeAws_json1_1DecreaseStreamRetentionPeriodInput = function (input, context) {
    var bodyParams = {};
    if (input.RetentionPeriodHours !== undefined) {
        bodyParams["RetentionPeriodHours"] = input.RetentionPeriodHours;
    }
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    return bodyParams;
};
var serializeAws_json1_1DeleteStreamInput = function (input, context) {
    var bodyParams = {};
    if (input.EnforceConsumerDeletion !== undefined) {
        bodyParams["EnforceConsumerDeletion"] = input.EnforceConsumerDeletion;
    }
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    return bodyParams;
};
var serializeAws_json1_1DeregisterStreamConsumerInput = function (input, context) {
    var bodyParams = {};
    if (input.ConsumerARN !== undefined) {
        bodyParams["ConsumerARN"] = input.ConsumerARN;
    }
    if (input.ConsumerName !== undefined) {
        bodyParams["ConsumerName"] = input.ConsumerName;
    }
    if (input.StreamARN !== undefined) {
        bodyParams["StreamARN"] = input.StreamARN;
    }
    return bodyParams;
};
var serializeAws_json1_1DescribeLimitsInput = function (input, context) {
    var bodyParams = {};
    return bodyParams;
};
var serializeAws_json1_1DescribeStreamConsumerInput = function (input, context) {
    var bodyParams = {};
    if (input.ConsumerARN !== undefined) {
        bodyParams["ConsumerARN"] = input.ConsumerARN;
    }
    if (input.ConsumerName !== undefined) {
        bodyParams["ConsumerName"] = input.ConsumerName;
    }
    if (input.StreamARN !== undefined) {
        bodyParams["StreamARN"] = input.StreamARN;
    }
    return bodyParams;
};
var serializeAws_json1_1DescribeStreamInput = function (input, context) {
    var bodyParams = {};
    if (input.ExclusiveStartShardId !== undefined) {
        bodyParams["ExclusiveStartShardId"] = input.ExclusiveStartShardId;
    }
    if (input.Limit !== undefined) {
        bodyParams["Limit"] = input.Limit;
    }
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    return bodyParams;
};
var serializeAws_json1_1DescribeStreamSummaryInput = function (input, context) {
    var bodyParams = {};
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    return bodyParams;
};
var serializeAws_json1_1DisableEnhancedMonitoringInput = function (input, context) {
    var bodyParams = {};
    if (input.ShardLevelMetrics !== undefined) {
        bodyParams["ShardLevelMetrics"] = serializeAws_json1_1MetricsNameList(input.ShardLevelMetrics, context);
    }
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    return bodyParams;
};
var serializeAws_json1_1EnableEnhancedMonitoringInput = function (input, context) {
    var bodyParams = {};
    if (input.ShardLevelMetrics !== undefined) {
        bodyParams["ShardLevelMetrics"] = serializeAws_json1_1MetricsNameList(input.ShardLevelMetrics, context);
    }
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    return bodyParams;
};
var serializeAws_json1_1GetRecordsInput = function (input, context) {
    var bodyParams = {};
    if (input.Limit !== undefined) {
        bodyParams["Limit"] = input.Limit;
    }
    if (input.ShardIterator !== undefined) {
        bodyParams["ShardIterator"] = input.ShardIterator;
    }
    return bodyParams;
};
var serializeAws_json1_1GetShardIteratorInput = function (input, context) {
    var bodyParams = {};
    if (input.ShardId !== undefined) {
        bodyParams["ShardId"] = input.ShardId;
    }
    if (input.ShardIteratorType !== undefined) {
        bodyParams["ShardIteratorType"] = input.ShardIteratorType;
    }
    if (input.StartingSequenceNumber !== undefined) {
        bodyParams["StartingSequenceNumber"] = input.StartingSequenceNumber;
    }
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    if (input.Timestamp !== undefined) {
        bodyParams["Timestamp"] = Math.round(input.Timestamp.getTime() / 1000);
    }
    return bodyParams;
};
var serializeAws_json1_1IncreaseStreamRetentionPeriodInput = function (input, context) {
    var bodyParams = {};
    if (input.RetentionPeriodHours !== undefined) {
        bodyParams["RetentionPeriodHours"] = input.RetentionPeriodHours;
    }
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    return bodyParams;
};
var serializeAws_json1_1ListShardsInput = function (input, context) {
    var bodyParams = {};
    if (input.ExclusiveStartShardId !== undefined) {
        bodyParams["ExclusiveStartShardId"] = input.ExclusiveStartShardId;
    }
    if (input.MaxResults !== undefined) {
        bodyParams["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined) {
        bodyParams["NextToken"] = input.NextToken;
    }
    if (input.StreamCreationTimestamp !== undefined) {
        bodyParams["StreamCreationTimestamp"] = Math.round(input.StreamCreationTimestamp.getTime() / 1000);
    }
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    return bodyParams;
};
var serializeAws_json1_1ListStreamConsumersInput = function (input, context) {
    var bodyParams = {};
    if (input.MaxResults !== undefined) {
        bodyParams["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined) {
        bodyParams["NextToken"] = input.NextToken;
    }
    if (input.StreamARN !== undefined) {
        bodyParams["StreamARN"] = input.StreamARN;
    }
    if (input.StreamCreationTimestamp !== undefined) {
        bodyParams["StreamCreationTimestamp"] = Math.round(input.StreamCreationTimestamp.getTime() / 1000);
    }
    return bodyParams;
};
var serializeAws_json1_1ListStreamsInput = function (input, context) {
    var bodyParams = {};
    if (input.ExclusiveStartStreamName !== undefined) {
        bodyParams["ExclusiveStartStreamName"] = input.ExclusiveStartStreamName;
    }
    if (input.Limit !== undefined) {
        bodyParams["Limit"] = input.Limit;
    }
    return bodyParams;
};
var serializeAws_json1_1ListTagsForStreamInput = function (input, context) {
    var bodyParams = {};
    if (input.ExclusiveStartTagKey !== undefined) {
        bodyParams["ExclusiveStartTagKey"] = input.ExclusiveStartTagKey;
    }
    if (input.Limit !== undefined) {
        bodyParams["Limit"] = input.Limit;
    }
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    return bodyParams;
};
var serializeAws_json1_1MergeShardsInput = function (input, context) {
    var bodyParams = {};
    if (input.AdjacentShardToMerge !== undefined) {
        bodyParams["AdjacentShardToMerge"] = input.AdjacentShardToMerge;
    }
    if (input.ShardToMerge !== undefined) {
        bodyParams["ShardToMerge"] = input.ShardToMerge;
    }
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    return bodyParams;
};
var serializeAws_json1_1MetricsNameList = function (input, context) {
    var e_1, _a;
    var contents = [];
    try {
        for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
            var entry = input_1_1.value;
            contents.push(entry);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return contents;
};
var serializeAws_json1_1PutRecordInput = function (input, context) {
    var bodyParams = {};
    if (input.Data !== undefined) {
        bodyParams["Data"] = context.base64Encoder(input.Data);
    }
    if (input.ExplicitHashKey !== undefined) {
        bodyParams["ExplicitHashKey"] = input.ExplicitHashKey;
    }
    if (input.PartitionKey !== undefined) {
        bodyParams["PartitionKey"] = input.PartitionKey;
    }
    if (input.SequenceNumberForOrdering !== undefined) {
        bodyParams["SequenceNumberForOrdering"] = input.SequenceNumberForOrdering;
    }
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    return bodyParams;
};
var serializeAws_json1_1PutRecordsInput = function (input, context) {
    var bodyParams = {};
    if (input.Records !== undefined) {
        bodyParams["Records"] = serializeAws_json1_1PutRecordsRequestEntryList(input.Records, context);
    }
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    return bodyParams;
};
var serializeAws_json1_1PutRecordsRequestEntry = function (input, context) {
    var bodyParams = {};
    if (input.Data !== undefined) {
        bodyParams["Data"] = context.base64Encoder(input.Data);
    }
    if (input.ExplicitHashKey !== undefined) {
        bodyParams["ExplicitHashKey"] = input.ExplicitHashKey;
    }
    if (input.PartitionKey !== undefined) {
        bodyParams["PartitionKey"] = input.PartitionKey;
    }
    return bodyParams;
};
var serializeAws_json1_1PutRecordsRequestEntryList = function (input, context) {
    var e_2, _a;
    var contents = [];
    try {
        for (var input_2 = __values(input), input_2_1 = input_2.next(); !input_2_1.done; input_2_1 = input_2.next()) {
            var entry = input_2_1.value;
            contents.push(serializeAws_json1_1PutRecordsRequestEntry(entry, context));
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (input_2_1 && !input_2_1.done && (_a = input_2.return)) _a.call(input_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return contents;
};
var serializeAws_json1_1RegisterStreamConsumerInput = function (input, context) {
    var bodyParams = {};
    if (input.ConsumerName !== undefined) {
        bodyParams["ConsumerName"] = input.ConsumerName;
    }
    if (input.StreamARN !== undefined) {
        bodyParams["StreamARN"] = input.StreamARN;
    }
    return bodyParams;
};
var serializeAws_json1_1RemoveTagsFromStreamInput = function (input, context) {
    var bodyParams = {};
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    if (input.TagKeys !== undefined) {
        bodyParams["TagKeys"] = serializeAws_json1_1TagKeyList(input.TagKeys, context);
    }
    return bodyParams;
};
var serializeAws_json1_1SplitShardInput = function (input, context) {
    var bodyParams = {};
    if (input.NewStartingHashKey !== undefined) {
        bodyParams["NewStartingHashKey"] = input.NewStartingHashKey;
    }
    if (input.ShardToSplit !== undefined) {
        bodyParams["ShardToSplit"] = input.ShardToSplit;
    }
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    return bodyParams;
};
var serializeAws_json1_1StartStreamEncryptionInput = function (input, context) {
    var bodyParams = {};
    if (input.EncryptionType !== undefined) {
        bodyParams["EncryptionType"] = input.EncryptionType;
    }
    if (input.KeyId !== undefined) {
        bodyParams["KeyId"] = input.KeyId;
    }
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    return bodyParams;
};
var serializeAws_json1_1StartingPosition = function (input, context) {
    var bodyParams = {};
    if (input.SequenceNumber !== undefined) {
        bodyParams["SequenceNumber"] = input.SequenceNumber;
    }
    if (input.Timestamp !== undefined) {
        bodyParams["Timestamp"] = Math.round(input.Timestamp.getTime() / 1000);
    }
    if (input.Type !== undefined) {
        bodyParams["Type"] = input.Type;
    }
    return bodyParams;
};
var serializeAws_json1_1StopStreamEncryptionInput = function (input, context) {
    var bodyParams = {};
    if (input.EncryptionType !== undefined) {
        bodyParams["EncryptionType"] = input.EncryptionType;
    }
    if (input.KeyId !== undefined) {
        bodyParams["KeyId"] = input.KeyId;
    }
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    return bodyParams;
};
var serializeAws_json1_1SubscribeToShardInput = function (input, context) {
    var bodyParams = {};
    if (input.ConsumerARN !== undefined) {
        bodyParams["ConsumerARN"] = input.ConsumerARN;
    }
    if (input.ShardId !== undefined) {
        bodyParams["ShardId"] = input.ShardId;
    }
    if (input.StartingPosition !== undefined) {
        bodyParams["StartingPosition"] = serializeAws_json1_1StartingPosition(input.StartingPosition, context);
    }
    return bodyParams;
};
var serializeAws_json1_1TagKeyList = function (input, context) {
    var e_3, _a;
    var contents = [];
    try {
        for (var input_3 = __values(input), input_3_1 = input_3.next(); !input_3_1.done; input_3_1 = input_3.next()) {
            var entry = input_3_1.value;
            contents.push(entry);
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (input_3_1 && !input_3_1.done && (_a = input_3.return)) _a.call(input_3);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return contents;
};
var serializeAws_json1_1TagMap = function (input, context) {
    var mapParams = {};
    Object.keys(input).forEach(function (key) {
        mapParams[key] = input[key];
    });
    return mapParams;
};
var serializeAws_json1_1UpdateShardCountInput = function (input, context) {
    var bodyParams = {};
    if (input.ScalingType !== undefined) {
        bodyParams["ScalingType"] = input.ScalingType;
    }
    if (input.StreamName !== undefined) {
        bodyParams["StreamName"] = input.StreamName;
    }
    if (input.TargetShardCount !== undefined) {
        bodyParams["TargetShardCount"] = input.TargetShardCount;
    }
    return bodyParams;
};
var deserializeAws_json1_1Consumer = function (output, context) {
    var contents = {
        __type: "Consumer",
        ConsumerARN: undefined,
        ConsumerCreationTimestamp: undefined,
        ConsumerName: undefined,
        ConsumerStatus: undefined
    };
    if (output.ConsumerARN !== undefined && output.ConsumerARN !== null) {
        contents.ConsumerARN = output.ConsumerARN;
    }
    if (output.ConsumerCreationTimestamp !== undefined &&
        output.ConsumerCreationTimestamp !== null) {
        contents.ConsumerCreationTimestamp = new Date(Math.round(output.ConsumerCreationTimestamp * 1000));
    }
    if (output.ConsumerName !== undefined && output.ConsumerName !== null) {
        contents.ConsumerName = output.ConsumerName;
    }
    if (output.ConsumerStatus !== undefined && output.ConsumerStatus !== null) {
        contents.ConsumerStatus = output.ConsumerStatus;
    }
    return contents;
};
var deserializeAws_json1_1ConsumerDescription = function (output, context) {
    var contents = {
        __type: "ConsumerDescription",
        ConsumerARN: undefined,
        ConsumerCreationTimestamp: undefined,
        ConsumerName: undefined,
        ConsumerStatus: undefined,
        StreamARN: undefined
    };
    if (output.ConsumerARN !== undefined && output.ConsumerARN !== null) {
        contents.ConsumerARN = output.ConsumerARN;
    }
    if (output.ConsumerCreationTimestamp !== undefined &&
        output.ConsumerCreationTimestamp !== null) {
        contents.ConsumerCreationTimestamp = new Date(Math.round(output.ConsumerCreationTimestamp * 1000));
    }
    if (output.ConsumerName !== undefined && output.ConsumerName !== null) {
        contents.ConsumerName = output.ConsumerName;
    }
    if (output.ConsumerStatus !== undefined && output.ConsumerStatus !== null) {
        contents.ConsumerStatus = output.ConsumerStatus;
    }
    if (output.StreamARN !== undefined && output.StreamARN !== null) {
        contents.StreamARN = output.StreamARN;
    }
    return contents;
};
var deserializeAws_json1_1ConsumerList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1Consumer(entry, context);
    });
};
var deserializeAws_json1_1DescribeLimitsOutput = function (output, context) {
    var contents = {
        __type: "DescribeLimitsOutput",
        OpenShardCount: undefined,
        ShardLimit: undefined
    };
    if (output.OpenShardCount !== undefined && output.OpenShardCount !== null) {
        contents.OpenShardCount = output.OpenShardCount;
    }
    if (output.ShardLimit !== undefined && output.ShardLimit !== null) {
        contents.ShardLimit = output.ShardLimit;
    }
    return contents;
};
var deserializeAws_json1_1DescribeStreamConsumerOutput = function (output, context) {
    var contents = {
        __type: "DescribeStreamConsumerOutput",
        ConsumerDescription: undefined
    };
    if (output.ConsumerDescription !== undefined &&
        output.ConsumerDescription !== null) {
        contents.ConsumerDescription = deserializeAws_json1_1ConsumerDescription(output.ConsumerDescription, context);
    }
    return contents;
};
var deserializeAws_json1_1DescribeStreamOutput = function (output, context) {
    var contents = {
        __type: "DescribeStreamOutput",
        StreamDescription: undefined
    };
    if (output.StreamDescription !== undefined &&
        output.StreamDescription !== null) {
        contents.StreamDescription = deserializeAws_json1_1StreamDescription(output.StreamDescription, context);
    }
    return contents;
};
var deserializeAws_json1_1DescribeStreamSummaryOutput = function (output, context) {
    var contents = {
        __type: "DescribeStreamSummaryOutput",
        StreamDescriptionSummary: undefined
    };
    if (output.StreamDescriptionSummary !== undefined &&
        output.StreamDescriptionSummary !== null) {
        contents.StreamDescriptionSummary = deserializeAws_json1_1StreamDescriptionSummary(output.StreamDescriptionSummary, context);
    }
    return contents;
};
var deserializeAws_json1_1EnhancedMetrics = function (output, context) {
    var contents = {
        __type: "EnhancedMetrics",
        ShardLevelMetrics: undefined
    };
    if (output.ShardLevelMetrics !== undefined &&
        output.ShardLevelMetrics !== null) {
        contents.ShardLevelMetrics = deserializeAws_json1_1MetricsNameList(output.ShardLevelMetrics, context);
    }
    return contents;
};
var deserializeAws_json1_1EnhancedMonitoringList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1EnhancedMetrics(entry, context);
    });
};
var deserializeAws_json1_1EnhancedMonitoringOutput = function (output, context) {
    var contents = {
        __type: "EnhancedMonitoringOutput",
        CurrentShardLevelMetrics: undefined,
        DesiredShardLevelMetrics: undefined,
        StreamName: undefined
    };
    if (output.CurrentShardLevelMetrics !== undefined &&
        output.CurrentShardLevelMetrics !== null) {
        contents.CurrentShardLevelMetrics = deserializeAws_json1_1MetricsNameList(output.CurrentShardLevelMetrics, context);
    }
    if (output.DesiredShardLevelMetrics !== undefined &&
        output.DesiredShardLevelMetrics !== null) {
        contents.DesiredShardLevelMetrics = deserializeAws_json1_1MetricsNameList(output.DesiredShardLevelMetrics, context);
    }
    if (output.StreamName !== undefined && output.StreamName !== null) {
        contents.StreamName = output.StreamName;
    }
    return contents;
};
var deserializeAws_json1_1ExpiredIteratorException = function (output, context) {
    var contents = {
        __type: "ExpiredIteratorException",
        message: undefined
    };
    if (output.message !== undefined && output.message !== null) {
        contents.message = output.message;
    }
    return contents;
};
var deserializeAws_json1_1ExpiredNextTokenException = function (output, context) {
    var contents = {
        __type: "ExpiredNextTokenException",
        message: undefined
    };
    if (output.message !== undefined && output.message !== null) {
        contents.message = output.message;
    }
    return contents;
};
var deserializeAws_json1_1GetRecordsOutput = function (output, context) {
    var contents = {
        __type: "GetRecordsOutput",
        MillisBehindLatest: undefined,
        NextShardIterator: undefined,
        Records: undefined
    };
    if (output.MillisBehindLatest !== undefined &&
        output.MillisBehindLatest !== null) {
        contents.MillisBehindLatest = output.MillisBehindLatest;
    }
    if (output.NextShardIterator !== undefined &&
        output.NextShardIterator !== null) {
        contents.NextShardIterator = output.NextShardIterator;
    }
    if (output.Records !== undefined && output.Records !== null) {
        contents.Records = deserializeAws_json1_1RecordList(output.Records, context);
    }
    return contents;
};
var deserializeAws_json1_1GetShardIteratorOutput = function (output, context) {
    var contents = {
        __type: "GetShardIteratorOutput",
        ShardIterator: undefined
    };
    if (output.ShardIterator !== undefined && output.ShardIterator !== null) {
        contents.ShardIterator = output.ShardIterator;
    }
    return contents;
};
var deserializeAws_json1_1HashKeyRange = function (output, context) {
    var contents = {
        __type: "HashKeyRange",
        EndingHashKey: undefined,
        StartingHashKey: undefined
    };
    if (output.EndingHashKey !== undefined && output.EndingHashKey !== null) {
        contents.EndingHashKey = output.EndingHashKey;
    }
    if (output.StartingHashKey !== undefined && output.StartingHashKey !== null) {
        contents.StartingHashKey = output.StartingHashKey;
    }
    return contents;
};
var deserializeAws_json1_1InternalFailureException = function (output, context) {
    var contents = {
        __type: "InternalFailureException",
        message: undefined
    };
    if (output.message !== undefined && output.message !== null) {
        contents.message = output.message;
    }
    return contents;
};
var deserializeAws_json1_1InvalidArgumentException = function (output, context) {
    var contents = {
        __type: "InvalidArgumentException",
        message: undefined
    };
    if (output.message !== undefined && output.message !== null) {
        contents.message = output.message;
    }
    return contents;
};
var deserializeAws_json1_1KMSAccessDeniedException = function (output, context) {
    var contents = {
        __type: "KMSAccessDeniedException",
        message: undefined
    };
    if (output.message !== undefined && output.message !== null) {
        contents.message = output.message;
    }
    return contents;
};
var deserializeAws_json1_1KMSDisabledException = function (output, context) {
    var contents = {
        __type: "KMSDisabledException",
        message: undefined
    };
    if (output.message !== undefined && output.message !== null) {
        contents.message = output.message;
    }
    return contents;
};
var deserializeAws_json1_1KMSInvalidStateException = function (output, context) {
    var contents = {
        __type: "KMSInvalidStateException",
        message: undefined
    };
    if (output.message !== undefined && output.message !== null) {
        contents.message = output.message;
    }
    return contents;
};
var deserializeAws_json1_1KMSNotFoundException = function (output, context) {
    var contents = {
        __type: "KMSNotFoundException",
        message: undefined
    };
    if (output.message !== undefined && output.message !== null) {
        contents.message = output.message;
    }
    return contents;
};
var deserializeAws_json1_1KMSOptInRequired = function (output, context) {
    var contents = {
        __type: "KMSOptInRequired",
        message: undefined
    };
    if (output.message !== undefined && output.message !== null) {
        contents.message = output.message;
    }
    return contents;
};
var deserializeAws_json1_1KMSThrottlingException = function (output, context) {
    var contents = {
        __type: "KMSThrottlingException",
        message: undefined
    };
    if (output.message !== undefined && output.message !== null) {
        contents.message = output.message;
    }
    return contents;
};
var deserializeAws_json1_1LimitExceededException = function (output, context) {
    var contents = {
        __type: "LimitExceededException",
        message: undefined
    };
    if (output.message !== undefined && output.message !== null) {
        contents.message = output.message;
    }
    return contents;
};
var deserializeAws_json1_1ListShardsOutput = function (output, context) {
    var contents = {
        __type: "ListShardsOutput",
        NextToken: undefined,
        Shards: undefined
    };
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    if (output.Shards !== undefined && output.Shards !== null) {
        contents.Shards = deserializeAws_json1_1ShardList(output.Shards, context);
    }
    return contents;
};
var deserializeAws_json1_1ListStreamConsumersOutput = function (output, context) {
    var contents = {
        __type: "ListStreamConsumersOutput",
        Consumers: undefined,
        NextToken: undefined
    };
    if (output.Consumers !== undefined && output.Consumers !== null) {
        contents.Consumers = deserializeAws_json1_1ConsumerList(output.Consumers, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    return contents;
};
var deserializeAws_json1_1ListStreamsOutput = function (output, context) {
    var contents = {
        __type: "ListStreamsOutput",
        HasMoreStreams: undefined,
        StreamNames: undefined
    };
    if (output.HasMoreStreams !== undefined && output.HasMoreStreams !== null) {
        contents.HasMoreStreams = output.HasMoreStreams;
    }
    if (output.StreamNames !== undefined && output.StreamNames !== null) {
        contents.StreamNames = deserializeAws_json1_1StreamNameList(output.StreamNames, context);
    }
    return contents;
};
var deserializeAws_json1_1ListTagsForStreamOutput = function (output, context) {
    var contents = {
        __type: "ListTagsForStreamOutput",
        HasMoreTags: undefined,
        Tags: undefined
    };
    if (output.HasMoreTags !== undefined && output.HasMoreTags !== null) {
        contents.HasMoreTags = output.HasMoreTags;
    }
    if (output.Tags !== undefined && output.Tags !== null) {
        contents.Tags = deserializeAws_json1_1TagList(output.Tags, context);
    }
    return contents;
};
var deserializeAws_json1_1MetricsNameList = function (output, context) {
    return (output || []).map(function (entry) { return entry; });
};
var deserializeAws_json1_1ProvisionedThroughputExceededException = function (output, context) {
    var contents = {
        __type: "ProvisionedThroughputExceededException",
        message: undefined
    };
    if (output.message !== undefined && output.message !== null) {
        contents.message = output.message;
    }
    return contents;
};
var deserializeAws_json1_1PutRecordOutput = function (output, context) {
    var contents = {
        __type: "PutRecordOutput",
        EncryptionType: undefined,
        SequenceNumber: undefined,
        ShardId: undefined
    };
    if (output.EncryptionType !== undefined && output.EncryptionType !== null) {
        contents.EncryptionType = output.EncryptionType;
    }
    if (output.SequenceNumber !== undefined && output.SequenceNumber !== null) {
        contents.SequenceNumber = output.SequenceNumber;
    }
    if (output.ShardId !== undefined && output.ShardId !== null) {
        contents.ShardId = output.ShardId;
    }
    return contents;
};
var deserializeAws_json1_1PutRecordsOutput = function (output, context) {
    var contents = {
        __type: "PutRecordsOutput",
        EncryptionType: undefined,
        FailedRecordCount: undefined,
        Records: undefined
    };
    if (output.EncryptionType !== undefined && output.EncryptionType !== null) {
        contents.EncryptionType = output.EncryptionType;
    }
    if (output.FailedRecordCount !== undefined &&
        output.FailedRecordCount !== null) {
        contents.FailedRecordCount = output.FailedRecordCount;
    }
    if (output.Records !== undefined && output.Records !== null) {
        contents.Records = deserializeAws_json1_1PutRecordsResultEntryList(output.Records, context);
    }
    return contents;
};
var deserializeAws_json1_1PutRecordsResultEntry = function (output, context) {
    var contents = {
        __type: "PutRecordsResultEntry",
        ErrorCode: undefined,
        ErrorMessage: undefined,
        SequenceNumber: undefined,
        ShardId: undefined
    };
    if (output.ErrorCode !== undefined && output.ErrorCode !== null) {
        contents.ErrorCode = output.ErrorCode;
    }
    if (output.ErrorMessage !== undefined && output.ErrorMessage !== null) {
        contents.ErrorMessage = output.ErrorMessage;
    }
    if (output.SequenceNumber !== undefined && output.SequenceNumber !== null) {
        contents.SequenceNumber = output.SequenceNumber;
    }
    if (output.ShardId !== undefined && output.ShardId !== null) {
        contents.ShardId = output.ShardId;
    }
    return contents;
};
var deserializeAws_json1_1PutRecordsResultEntryList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1PutRecordsResultEntry(entry, context);
    });
};
var deserializeAws_json1_1_Record = function (output, context) {
    var contents = {
        __type: "Record",
        ApproximateArrivalTimestamp: undefined,
        Data: undefined,
        EncryptionType: undefined,
        PartitionKey: undefined,
        SequenceNumber: undefined
    };
    if (output.ApproximateArrivalTimestamp !== undefined &&
        output.ApproximateArrivalTimestamp !== null) {
        contents.ApproximateArrivalTimestamp = new Date(Math.round(output.ApproximateArrivalTimestamp * 1000));
    }
    if (output.Data !== undefined && output.Data !== null) {
        contents.Data = context.base64Decoder(output.Data);
    }
    if (output.EncryptionType !== undefined && output.EncryptionType !== null) {
        contents.EncryptionType = output.EncryptionType;
    }
    if (output.PartitionKey !== undefined && output.PartitionKey !== null) {
        contents.PartitionKey = output.PartitionKey;
    }
    if (output.SequenceNumber !== undefined && output.SequenceNumber !== null) {
        contents.SequenceNumber = output.SequenceNumber;
    }
    return contents;
};
var deserializeAws_json1_1RecordList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1_Record(entry, context);
    });
};
var deserializeAws_json1_1RegisterStreamConsumerOutput = function (output, context) {
    var contents = {
        __type: "RegisterStreamConsumerOutput",
        Consumer: undefined
    };
    if (output.Consumer !== undefined && output.Consumer !== null) {
        contents.Consumer = deserializeAws_json1_1Consumer(output.Consumer, context);
    }
    return contents;
};
var deserializeAws_json1_1ResourceInUseException = function (output, context) {
    var contents = {
        __type: "ResourceInUseException",
        message: undefined
    };
    if (output.message !== undefined && output.message !== null) {
        contents.message = output.message;
    }
    return contents;
};
var deserializeAws_json1_1ResourceNotFoundException = function (output, context) {
    var contents = {
        __type: "ResourceNotFoundException",
        message: undefined
    };
    if (output.message !== undefined && output.message !== null) {
        contents.message = output.message;
    }
    return contents;
};
var deserializeAws_json1_1SequenceNumberRange = function (output, context) {
    var contents = {
        __type: "SequenceNumberRange",
        EndingSequenceNumber: undefined,
        StartingSequenceNumber: undefined
    };
    if (output.EndingSequenceNumber !== undefined &&
        output.EndingSequenceNumber !== null) {
        contents.EndingSequenceNumber = output.EndingSequenceNumber;
    }
    if (output.StartingSequenceNumber !== undefined &&
        output.StartingSequenceNumber !== null) {
        contents.StartingSequenceNumber = output.StartingSequenceNumber;
    }
    return contents;
};
var deserializeAws_json1_1Shard = function (output, context) {
    var contents = {
        __type: "Shard",
        AdjacentParentShardId: undefined,
        HashKeyRange: undefined,
        ParentShardId: undefined,
        SequenceNumberRange: undefined,
        ShardId: undefined
    };
    if (output.AdjacentParentShardId !== undefined &&
        output.AdjacentParentShardId !== null) {
        contents.AdjacentParentShardId = output.AdjacentParentShardId;
    }
    if (output.HashKeyRange !== undefined && output.HashKeyRange !== null) {
        contents.HashKeyRange = deserializeAws_json1_1HashKeyRange(output.HashKeyRange, context);
    }
    if (output.ParentShardId !== undefined && output.ParentShardId !== null) {
        contents.ParentShardId = output.ParentShardId;
    }
    if (output.SequenceNumberRange !== undefined &&
        output.SequenceNumberRange !== null) {
        contents.SequenceNumberRange = deserializeAws_json1_1SequenceNumberRange(output.SequenceNumberRange, context);
    }
    if (output.ShardId !== undefined && output.ShardId !== null) {
        contents.ShardId = output.ShardId;
    }
    return contents;
};
var deserializeAws_json1_1ShardList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1Shard(entry, context);
    });
};
var deserializeAws_json1_1StreamDescription = function (output, context) {
    var contents = {
        __type: "StreamDescription",
        EncryptionType: undefined,
        EnhancedMonitoring: undefined,
        HasMoreShards: undefined,
        KeyId: undefined,
        RetentionPeriodHours: undefined,
        Shards: undefined,
        StreamARN: undefined,
        StreamCreationTimestamp: undefined,
        StreamName: undefined,
        StreamStatus: undefined
    };
    if (output.EncryptionType !== undefined && output.EncryptionType !== null) {
        contents.EncryptionType = output.EncryptionType;
    }
    if (output.EnhancedMonitoring !== undefined &&
        output.EnhancedMonitoring !== null) {
        contents.EnhancedMonitoring = deserializeAws_json1_1EnhancedMonitoringList(output.EnhancedMonitoring, context);
    }
    if (output.HasMoreShards !== undefined && output.HasMoreShards !== null) {
        contents.HasMoreShards = output.HasMoreShards;
    }
    if (output.KeyId !== undefined && output.KeyId !== null) {
        contents.KeyId = output.KeyId;
    }
    if (output.RetentionPeriodHours !== undefined &&
        output.RetentionPeriodHours !== null) {
        contents.RetentionPeriodHours = output.RetentionPeriodHours;
    }
    if (output.Shards !== undefined && output.Shards !== null) {
        contents.Shards = deserializeAws_json1_1ShardList(output.Shards, context);
    }
    if (output.StreamARN !== undefined && output.StreamARN !== null) {
        contents.StreamARN = output.StreamARN;
    }
    if (output.StreamCreationTimestamp !== undefined &&
        output.StreamCreationTimestamp !== null) {
        contents.StreamCreationTimestamp = new Date(Math.round(output.StreamCreationTimestamp * 1000));
    }
    if (output.StreamName !== undefined && output.StreamName !== null) {
        contents.StreamName = output.StreamName;
    }
    if (output.StreamStatus !== undefined && output.StreamStatus !== null) {
        contents.StreamStatus = output.StreamStatus;
    }
    return contents;
};
var deserializeAws_json1_1StreamDescriptionSummary = function (output, context) {
    var contents = {
        __type: "StreamDescriptionSummary",
        ConsumerCount: undefined,
        EncryptionType: undefined,
        EnhancedMonitoring: undefined,
        KeyId: undefined,
        OpenShardCount: undefined,
        RetentionPeriodHours: undefined,
        StreamARN: undefined,
        StreamCreationTimestamp: undefined,
        StreamName: undefined,
        StreamStatus: undefined
    };
    if (output.ConsumerCount !== undefined && output.ConsumerCount !== null) {
        contents.ConsumerCount = output.ConsumerCount;
    }
    if (output.EncryptionType !== undefined && output.EncryptionType !== null) {
        contents.EncryptionType = output.EncryptionType;
    }
    if (output.EnhancedMonitoring !== undefined &&
        output.EnhancedMonitoring !== null) {
        contents.EnhancedMonitoring = deserializeAws_json1_1EnhancedMonitoringList(output.EnhancedMonitoring, context);
    }
    if (output.KeyId !== undefined && output.KeyId !== null) {
        contents.KeyId = output.KeyId;
    }
    if (output.OpenShardCount !== undefined && output.OpenShardCount !== null) {
        contents.OpenShardCount = output.OpenShardCount;
    }
    if (output.RetentionPeriodHours !== undefined &&
        output.RetentionPeriodHours !== null) {
        contents.RetentionPeriodHours = output.RetentionPeriodHours;
    }
    if (output.StreamARN !== undefined && output.StreamARN !== null) {
        contents.StreamARN = output.StreamARN;
    }
    if (output.StreamCreationTimestamp !== undefined &&
        output.StreamCreationTimestamp !== null) {
        contents.StreamCreationTimestamp = new Date(Math.round(output.StreamCreationTimestamp * 1000));
    }
    if (output.StreamName !== undefined && output.StreamName !== null) {
        contents.StreamName = output.StreamName;
    }
    if (output.StreamStatus !== undefined && output.StreamStatus !== null) {
        contents.StreamStatus = output.StreamStatus;
    }
    return contents;
};
var deserializeAws_json1_1StreamNameList = function (output, context) {
    return (output || []).map(function (entry) { return entry; });
};
var deserializeAws_json1_1SubscribeToShardEvent = function (output, context) {
    var contents = {
        __type: "SubscribeToShardEvent",
        ContinuationSequenceNumber: undefined,
        MillisBehindLatest: undefined,
        Records: undefined
    };
    if (output.ContinuationSequenceNumber !== undefined &&
        output.ContinuationSequenceNumber !== null) {
        contents.ContinuationSequenceNumber = output.ContinuationSequenceNumber;
    }
    if (output.MillisBehindLatest !== undefined &&
        output.MillisBehindLatest !== null) {
        contents.MillisBehindLatest = output.MillisBehindLatest;
    }
    if (output.Records !== undefined && output.Records !== null) {
        contents.Records = deserializeAws_json1_1RecordList(output.Records, context);
    }
    return contents;
};
var deserializeAws_json1_1SubscribeToShardEventStream = function (output, context) {
    if (output.InternalFailureException !== undefined &&
        output.InternalFailureException !== null) {
        return {
            InternalFailureException: deserializeAws_json1_1InternalFailureException(output.InternalFailureException, context)
        };
    }
    if (output.KMSAccessDeniedException !== undefined &&
        output.KMSAccessDeniedException !== null) {
        return {
            KMSAccessDeniedException: deserializeAws_json1_1KMSAccessDeniedException(output.KMSAccessDeniedException, context)
        };
    }
    if (output.KMSDisabledException !== undefined &&
        output.KMSDisabledException !== null) {
        return {
            KMSDisabledException: deserializeAws_json1_1KMSDisabledException(output.KMSDisabledException, context)
        };
    }
    if (output.KMSInvalidStateException !== undefined &&
        output.KMSInvalidStateException !== null) {
        return {
            KMSInvalidStateException: deserializeAws_json1_1KMSInvalidStateException(output.KMSInvalidStateException, context)
        };
    }
    if (output.KMSNotFoundException !== undefined &&
        output.KMSNotFoundException !== null) {
        return {
            KMSNotFoundException: deserializeAws_json1_1KMSNotFoundException(output.KMSNotFoundException, context)
        };
    }
    if (output.KMSOptInRequired !== undefined &&
        output.KMSOptInRequired !== null) {
        return {
            KMSOptInRequired: deserializeAws_json1_1KMSOptInRequired(output.KMSOptInRequired, context)
        };
    }
    if (output.KMSThrottlingException !== undefined &&
        output.KMSThrottlingException !== null) {
        return {
            KMSThrottlingException: deserializeAws_json1_1KMSThrottlingException(output.KMSThrottlingException, context)
        };
    }
    if (output.ResourceInUseException !== undefined &&
        output.ResourceInUseException !== null) {
        return {
            ResourceInUseException: deserializeAws_json1_1ResourceInUseException(output.ResourceInUseException, context)
        };
    }
    if (output.ResourceNotFoundException !== undefined &&
        output.ResourceNotFoundException !== null) {
        return {
            ResourceNotFoundException: deserializeAws_json1_1ResourceNotFoundException(output.ResourceNotFoundException, context)
        };
    }
    if (output.SubscribeToShardEvent !== undefined &&
        output.SubscribeToShardEvent !== null) {
        return {
            SubscribeToShardEvent: deserializeAws_json1_1SubscribeToShardEvent(output.SubscribeToShardEvent, context)
        };
    }
    var key = Object.keys(output)[0];
    return { $unknown: [key, output[key]] };
};
var deserializeAws_json1_1SubscribeToShardOutput = function (output, context) {
    var contents = {
        __type: "SubscribeToShardOutput",
        EventStream: undefined
    };
    if (output.EventStream !== undefined && output.EventStream !== null) {
        contents.EventStream = deserializeAws_json1_1SubscribeToShardEventStream(output.EventStream, context);
    }
    return contents;
};
var deserializeAws_json1_1Tag = function (output, context) {
    var contents = {
        __type: "Tag",
        Key: undefined,
        Value: undefined
    };
    if (output.Key !== undefined && output.Key !== null) {
        contents.Key = output.Key;
    }
    if (output.Value !== undefined && output.Value !== null) {
        contents.Value = output.Value;
    }
    return contents;
};
var deserializeAws_json1_1TagList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1Tag(entry, context);
    });
};
var deserializeAws_json1_1UpdateShardCountOutput = function (output, context) {
    var contents = {
        __type: "UpdateShardCountOutput",
        CurrentShardCount: undefined,
        StreamName: undefined,
        TargetShardCount: undefined
    };
    if (output.CurrentShardCount !== undefined &&
        output.CurrentShardCount !== null) {
        contents.CurrentShardCount = output.CurrentShardCount;
    }
    if (output.StreamName !== undefined && output.StreamName !== null) {
        contents.StreamName = output.StreamName;
    }
    if (output.TargetShardCount !== undefined &&
        output.TargetShardCount !== null) {
        contents.TargetShardCount = output.TargetShardCount;
    }
    return contents;
};
var deserializeMetadata = function (output) { return ({
    httpStatusCode: output.statusCode,
    httpHeaders: output.headers,
    requestId: output.headers["x-amzn-requestid"]
}); };
// Collect low-level response body stream to Uint8Array.
var collectBody = function (streamBody, context) {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return (context.streamCollector(streamBody) || Promise.resolve(new Uint8Array()));
};
// Encode Uint8Array data into string with utf-8.
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) {
        return context.utf8Encoder(body);
    });
};
var buildHttpRpcRequest = function (context, headers, path, resolvedHostname, body) {
    var contents = __assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", path: path, headers: headers });
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
};
//# sourceMappingURL=Aws_json1_1.js.map