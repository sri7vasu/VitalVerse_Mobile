import { __assign, __awaiter, __generator, __values } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { extendedEncodeURIComponent as __extendedEncodeURIComponent } from "@aws-sdk/smithy-client";
export function serializeAws_restJson1_1CreateAppCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps";
            if (input.CreateApplicationRequest !== undefined) {
                body = serializeAws_restJson1_1CreateApplicationRequest(input.CreateApplicationRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1CreateCampaignCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/campaigns";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.WriteCampaignRequest !== undefined) {
                body = serializeAws_restJson1_1WriteCampaignRequest(input.WriteCampaignRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1CreateEmailTemplateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/templates/{TemplateName}/email";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            if (input.EmailTemplateRequest !== undefined) {
                body = serializeAws_restJson1_1EmailTemplateRequest(input.EmailTemplateRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1CreateExportJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/jobs/export";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.ExportJobRequest !== undefined) {
                body = serializeAws_restJson1_1ExportJobRequest(input.ExportJobRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1CreateImportJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/jobs/import";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.ImportJobRequest !== undefined) {
                body = serializeAws_restJson1_1ImportJobRequest(input.ImportJobRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1CreateJourneyCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/journeys";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.WriteJourneyRequest !== undefined) {
                body = serializeAws_restJson1_1WriteJourneyRequest(input.WriteJourneyRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1CreatePushTemplateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/templates/{TemplateName}/push";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            if (input.PushNotificationTemplateRequest !== undefined) {
                body = serializeAws_restJson1_1PushNotificationTemplateRequest(input.PushNotificationTemplateRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1CreateSegmentCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/segments";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.WriteSegmentRequest !== undefined) {
                body = serializeAws_restJson1_1WriteSegmentRequest(input.WriteSegmentRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1CreateSmsTemplateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/templates/{TemplateName}/sms";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            if (input.SMSTemplateRequest !== undefined) {
                body = serializeAws_restJson1_1SMSTemplateRequest(input.SMSTemplateRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1CreateVoiceTemplateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/templates/{TemplateName}/voice";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            if (input.VoiceTemplateRequest !== undefined) {
                body = serializeAws_restJson1_1VoiceTemplateRequest(input.VoiceTemplateRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteAdmChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/adm";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteApnsChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/apns";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteApnsSandboxChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/apns_sandbox";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteApnsVoipChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/apns_voip";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteApnsVoipSandboxChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/apns_voip_sandbox";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteAppCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteBaiduChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/baidu";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteCampaignCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/campaigns/{CampaignId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.CampaignId !== undefined) {
                labelValue = input.CampaignId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: CampaignId.");
                }
                resolvedPath = resolvedPath.replace("{CampaignId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: CampaignId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteEmailChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/email";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteEmailTemplateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/templates/{TemplateName}/email";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            query = {};
            if (input.Version !== undefined) {
                query["version"] = input.Version;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteEndpointCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/endpoints/{EndpointId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.EndpointId !== undefined) {
                labelValue = input.EndpointId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: EndpointId.");
                }
                resolvedPath = resolvedPath.replace("{EndpointId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: EndpointId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteEventStreamCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/eventstream";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteGcmChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/gcm";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteJourneyCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/journeys/{JourneyId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.JourneyId !== undefined) {
                labelValue = input.JourneyId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: JourneyId.");
                }
                resolvedPath = resolvedPath.replace("{JourneyId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: JourneyId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeletePushTemplateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/templates/{TemplateName}/push";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            query = {};
            if (input.Version !== undefined) {
                query["version"] = input.Version;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteSegmentCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/segments/{SegmentId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.SegmentId !== undefined) {
                labelValue = input.SegmentId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: SegmentId.");
                }
                resolvedPath = resolvedPath.replace("{SegmentId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: SegmentId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteSmsChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/sms";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteSmsTemplateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/templates/{TemplateName}/sms";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            query = {};
            if (input.Version !== undefined) {
                query["version"] = input.Version;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteUserEndpointsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/users/{UserId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.UserId !== undefined) {
                labelValue = input.UserId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: UserId.");
                }
                resolvedPath = resolvedPath.replace("{UserId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: UserId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteVoiceChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/voice";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1DeleteVoiceTemplateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/templates/{TemplateName}/voice";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            query = {};
            if (input.Version !== undefined) {
                query["version"] = input.Version;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetAdmChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/adm";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetApnsChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/apns";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetApnsSandboxChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/apns_sandbox";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetApnsVoipChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/apns_voip";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetApnsVoipSandboxChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/apns_voip_sandbox";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetAppCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetApplicationDateRangeKpiCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/kpis/daterange/{KpiName}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.KpiName !== undefined) {
                labelValue = input.KpiName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: KpiName.");
                }
                resolvedPath = resolvedPath.replace("{KpiName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: KpiName.");
            }
            query = {};
            if (input.EndTime !== undefined) {
                query["end-time"] = (input.EndTime.toISOString().split(".")[0] + "Z").toString();
            }
            if (input.NextToken !== undefined) {
                query["next-token"] = input.NextToken;
            }
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            if (input.StartTime !== undefined) {
                query["start-time"] = (input.StartTime.toISOString().split(".")[0] + "Z").toString();
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetApplicationSettingsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/settings";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetAppsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps";
            query = {};
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            if (input.Token !== undefined) {
                query["token"] = input.Token;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetBaiduChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/baidu";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetCampaignCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/campaigns/{CampaignId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.CampaignId !== undefined) {
                labelValue = input.CampaignId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: CampaignId.");
                }
                resolvedPath = resolvedPath.replace("{CampaignId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: CampaignId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetCampaignActivitiesCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/campaigns/{CampaignId}/activities";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.CampaignId !== undefined) {
                labelValue = input.CampaignId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: CampaignId.");
                }
                resolvedPath = resolvedPath.replace("{CampaignId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: CampaignId.");
            }
            query = {};
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            if (input.Token !== undefined) {
                query["token"] = input.Token;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetCampaignDateRangeKpiCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/campaigns/{CampaignId}/kpis/daterange/{KpiName}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.CampaignId !== undefined) {
                labelValue = input.CampaignId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: CampaignId.");
                }
                resolvedPath = resolvedPath.replace("{CampaignId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: CampaignId.");
            }
            if (input.KpiName !== undefined) {
                labelValue = input.KpiName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: KpiName.");
                }
                resolvedPath = resolvedPath.replace("{KpiName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: KpiName.");
            }
            query = {};
            if (input.EndTime !== undefined) {
                query["end-time"] = (input.EndTime.toISOString().split(".")[0] + "Z").toString();
            }
            if (input.NextToken !== undefined) {
                query["next-token"] = input.NextToken;
            }
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            if (input.StartTime !== undefined) {
                query["start-time"] = (input.StartTime.toISOString().split(".")[0] + "Z").toString();
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetCampaignVersionCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/campaigns/{CampaignId}/versions/{Version}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.CampaignId !== undefined) {
                labelValue = input.CampaignId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: CampaignId.");
                }
                resolvedPath = resolvedPath.replace("{CampaignId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: CampaignId.");
            }
            if (input.Version !== undefined) {
                labelValue = input.Version;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: Version.");
                }
                resolvedPath = resolvedPath.replace("{Version}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: Version.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetCampaignVersionsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/campaigns/{CampaignId}/versions";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.CampaignId !== undefined) {
                labelValue = input.CampaignId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: CampaignId.");
                }
                resolvedPath = resolvedPath.replace("{CampaignId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: CampaignId.");
            }
            query = {};
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            if (input.Token !== undefined) {
                query["token"] = input.Token;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetCampaignsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/campaigns";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            query = {};
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            if (input.Token !== undefined) {
                query["token"] = input.Token;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetChannelsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetEmailChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/email";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetEmailTemplateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/templates/{TemplateName}/email";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            query = {};
            if (input.Version !== undefined) {
                query["version"] = input.Version;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetEndpointCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/endpoints/{EndpointId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.EndpointId !== undefined) {
                labelValue = input.EndpointId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: EndpointId.");
                }
                resolvedPath = resolvedPath.replace("{EndpointId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: EndpointId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetEventStreamCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/eventstream";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetExportJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/jobs/export/{JobId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.JobId !== undefined) {
                labelValue = input.JobId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: JobId.");
                }
                resolvedPath = resolvedPath.replace("{JobId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: JobId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetExportJobsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/jobs/export";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            query = {};
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            if (input.Token !== undefined) {
                query["token"] = input.Token;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetGcmChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/gcm";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetImportJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/jobs/import/{JobId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.JobId !== undefined) {
                labelValue = input.JobId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: JobId.");
                }
                resolvedPath = resolvedPath.replace("{JobId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: JobId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetImportJobsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/jobs/import";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            query = {};
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            if (input.Token !== undefined) {
                query["token"] = input.Token;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetJourneyCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/journeys/{JourneyId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.JourneyId !== undefined) {
                labelValue = input.JourneyId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: JourneyId.");
                }
                resolvedPath = resolvedPath.replace("{JourneyId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: JourneyId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetJourneyDateRangeKpiCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/journeys/{JourneyId}/kpis/daterange/{KpiName}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.JourneyId !== undefined) {
                labelValue = input.JourneyId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: JourneyId.");
                }
                resolvedPath = resolvedPath.replace("{JourneyId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: JourneyId.");
            }
            if (input.KpiName !== undefined) {
                labelValue = input.KpiName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: KpiName.");
                }
                resolvedPath = resolvedPath.replace("{KpiName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: KpiName.");
            }
            query = {};
            if (input.EndTime !== undefined) {
                query["end-time"] = (input.EndTime.toISOString().split(".")[0] + "Z").toString();
            }
            if (input.NextToken !== undefined) {
                query["next-token"] = input.NextToken;
            }
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            if (input.StartTime !== undefined) {
                query["start-time"] = (input.StartTime.toISOString().split(".")[0] + "Z").toString();
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetJourneyExecutionActivityMetricsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/journeys/{JourneyId}/activities/{JourneyActivityId}/execution-metrics";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.JourneyActivityId !== undefined) {
                labelValue = input.JourneyActivityId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: JourneyActivityId.");
                }
                resolvedPath = resolvedPath.replace("{JourneyActivityId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: JourneyActivityId.");
            }
            if (input.JourneyId !== undefined) {
                labelValue = input.JourneyId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: JourneyId.");
                }
                resolvedPath = resolvedPath.replace("{JourneyId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: JourneyId.");
            }
            query = {};
            if (input.NextToken !== undefined) {
                query["next-token"] = input.NextToken;
            }
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetJourneyExecutionMetricsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/journeys/{JourneyId}/execution-metrics";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.JourneyId !== undefined) {
                labelValue = input.JourneyId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: JourneyId.");
                }
                resolvedPath = resolvedPath.replace("{JourneyId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: JourneyId.");
            }
            query = {};
            if (input.NextToken !== undefined) {
                query["next-token"] = input.NextToken;
            }
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetPushTemplateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/templates/{TemplateName}/push";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            query = {};
            if (input.Version !== undefined) {
                query["version"] = input.Version;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetSegmentCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/segments/{SegmentId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.SegmentId !== undefined) {
                labelValue = input.SegmentId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: SegmentId.");
                }
                resolvedPath = resolvedPath.replace("{SegmentId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: SegmentId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetSegmentExportJobsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/segments/{SegmentId}/jobs/export";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.SegmentId !== undefined) {
                labelValue = input.SegmentId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: SegmentId.");
                }
                resolvedPath = resolvedPath.replace("{SegmentId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: SegmentId.");
            }
            query = {};
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            if (input.Token !== undefined) {
                query["token"] = input.Token;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetSegmentImportJobsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/segments/{SegmentId}/jobs/import";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.SegmentId !== undefined) {
                labelValue = input.SegmentId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: SegmentId.");
                }
                resolvedPath = resolvedPath.replace("{SegmentId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: SegmentId.");
            }
            query = {};
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            if (input.Token !== undefined) {
                query["token"] = input.Token;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetSegmentVersionCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/segments/{SegmentId}/versions/{Version}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.SegmentId !== undefined) {
                labelValue = input.SegmentId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: SegmentId.");
                }
                resolvedPath = resolvedPath.replace("{SegmentId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: SegmentId.");
            }
            if (input.Version !== undefined) {
                labelValue = input.Version;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: Version.");
                }
                resolvedPath = resolvedPath.replace("{Version}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: Version.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetSegmentVersionsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/segments/{SegmentId}/versions";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.SegmentId !== undefined) {
                labelValue = input.SegmentId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: SegmentId.");
                }
                resolvedPath = resolvedPath.replace("{SegmentId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: SegmentId.");
            }
            query = {};
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            if (input.Token !== undefined) {
                query["token"] = input.Token;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetSegmentsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/segments";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            query = {};
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            if (input.Token !== undefined) {
                query["token"] = input.Token;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetSmsChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/sms";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetSmsTemplateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/templates/{TemplateName}/sms";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            query = {};
            if (input.Version !== undefined) {
                query["version"] = input.Version;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetUserEndpointsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/users/{UserId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.UserId !== undefined) {
                labelValue = input.UserId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: UserId.");
                }
                resolvedPath = resolvedPath.replace("{UserId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: UserId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetVoiceChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/voice";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetVoiceTemplateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/templates/{TemplateName}/voice";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            query = {};
            if (input.Version !== undefined) {
                query["version"] = input.Version;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1ListJourneysCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/apps/{ApplicationId}/journeys";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            query = {};
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            if (input.Token !== undefined) {
                query["token"] = input.Token;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1ListTagsForResourceCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/tags/{ResourceArn}";
            if (input.ResourceArn !== undefined) {
                labelValue = input.ResourceArn;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ResourceArn.");
                }
                resolvedPath = resolvedPath.replace("{ResourceArn}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ResourceArn.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1ListTemplateVersionsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/templates/{TemplateName}/{TemplateType}/versions";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            if (input.TemplateType !== undefined) {
                labelValue = input.TemplateType;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateType.");
                }
                resolvedPath = resolvedPath.replace("{TemplateType}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateType.");
            }
            query = {};
            if (input.NextToken !== undefined) {
                query["next-token"] = input.NextToken;
            }
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1ListTemplatesCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/templates";
            query = {};
            if (input.NextToken !== undefined) {
                query["next-token"] = input.NextToken;
            }
            if (input.PageSize !== undefined) {
                query["page-size"] = input.PageSize;
            }
            if (input.Prefix !== undefined) {
                query["prefix"] = input.Prefix;
            }
            if (input.TemplateType !== undefined) {
                query["template-type"] = input.TemplateType;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1PhoneNumberValidateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/phone/number/validate";
            if (input.NumberValidateRequest !== undefined) {
                body = serializeAws_restJson1_1NumberValidateRequest(input.NumberValidateRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1PutEventStreamCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/eventstream";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.WriteEventStream !== undefined) {
                body = serializeAws_restJson1_1WriteEventStream(input.WriteEventStream, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1PutEventsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/events";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.EventsRequest !== undefined) {
                body = serializeAws_restJson1_1EventsRequest(input.EventsRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1RemoveAttributesCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/attributes/{AttributeType}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.AttributeType !== undefined) {
                labelValue = input.AttributeType;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: AttributeType.");
                }
                resolvedPath = resolvedPath.replace("{AttributeType}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: AttributeType.");
            }
            if (input.UpdateAttributesRequest !== undefined) {
                body = serializeAws_restJson1_1UpdateAttributesRequest(input.UpdateAttributesRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1SendMessagesCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/messages";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.MessageRequest !== undefined) {
                body = serializeAws_restJson1_1MessageRequest(input.MessageRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1SendUsersMessagesCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/users-messages";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.SendUsersMessageRequest !== undefined) {
                body = serializeAws_restJson1_1SendUsersMessageRequest(input.SendUsersMessageRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1TagResourceCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/tags/{ResourceArn}";
            if (input.ResourceArn !== undefined) {
                labelValue = input.ResourceArn;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ResourceArn.");
                }
                resolvedPath = resolvedPath.replace("{ResourceArn}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ResourceArn.");
            }
            if (input.TagsModel !== undefined) {
                body = serializeAws_restJson1_1TagsModel(input.TagsModel, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UntagResourceCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/v1/tags/{ResourceArn}";
            if (input.ResourceArn !== undefined) {
                labelValue = input.ResourceArn;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ResourceArn.");
                }
                resolvedPath = resolvedPath.replace("{ResourceArn}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ResourceArn.");
            }
            query = {};
            if (input.TagKeys !== undefined) {
                query["tagKeys"] = (input.TagKeys || []).map(function (_entry) { return _entry; });
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateAdmChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/adm";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.ADMChannelRequest !== undefined) {
                body = serializeAws_restJson1_1ADMChannelRequest(input.ADMChannelRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateApnsChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/apns";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.APNSChannelRequest !== undefined) {
                body = serializeAws_restJson1_1APNSChannelRequest(input.APNSChannelRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateApnsSandboxChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/apns_sandbox";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.APNSSandboxChannelRequest !== undefined) {
                body = serializeAws_restJson1_1APNSSandboxChannelRequest(input.APNSSandboxChannelRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateApnsVoipChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/apns_voip";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.APNSVoipChannelRequest !== undefined) {
                body = serializeAws_restJson1_1APNSVoipChannelRequest(input.APNSVoipChannelRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateApnsVoipSandboxChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/apns_voip_sandbox";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.APNSVoipSandboxChannelRequest !== undefined) {
                body = serializeAws_restJson1_1APNSVoipSandboxChannelRequest(input.APNSVoipSandboxChannelRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateApplicationSettingsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/settings";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.WriteApplicationSettingsRequest !== undefined) {
                body = serializeAws_restJson1_1WriteApplicationSettingsRequest(input.WriteApplicationSettingsRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateBaiduChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/baidu";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.BaiduChannelRequest !== undefined) {
                body = serializeAws_restJson1_1BaiduChannelRequest(input.BaiduChannelRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateCampaignCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/campaigns/{CampaignId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.CampaignId !== undefined) {
                labelValue = input.CampaignId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: CampaignId.");
                }
                resolvedPath = resolvedPath.replace("{CampaignId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: CampaignId.");
            }
            if (input.WriteCampaignRequest !== undefined) {
                body = serializeAws_restJson1_1WriteCampaignRequest(input.WriteCampaignRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateEmailChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/email";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.EmailChannelRequest !== undefined) {
                body = serializeAws_restJson1_1EmailChannelRequest(input.EmailChannelRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateEmailTemplateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/templates/{TemplateName}/email";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            query = {};
            if (input.CreateNewVersion !== undefined) {
                query["create-new-version"] = input.CreateNewVersion.toString();
            }
            if (input.Version !== undefined) {
                query["version"] = input.Version;
            }
            if (input.EmailTemplateRequest !== undefined) {
                body = serializeAws_restJson1_1EmailTemplateRequest(input.EmailTemplateRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateEndpointCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/endpoints/{EndpointId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.EndpointId !== undefined) {
                labelValue = input.EndpointId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: EndpointId.");
                }
                resolvedPath = resolvedPath.replace("{EndpointId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: EndpointId.");
            }
            if (input.EndpointRequest !== undefined) {
                body = serializeAws_restJson1_1EndpointRequest(input.EndpointRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateEndpointsBatchCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/endpoints";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.EndpointBatchRequest !== undefined) {
                body = serializeAws_restJson1_1EndpointBatchRequest(input.EndpointBatchRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateGcmChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/gcm";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.GCMChannelRequest !== undefined) {
                body = serializeAws_restJson1_1GCMChannelRequest(input.GCMChannelRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateJourneyCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/journeys/{JourneyId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.JourneyId !== undefined) {
                labelValue = input.JourneyId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: JourneyId.");
                }
                resolvedPath = resolvedPath.replace("{JourneyId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: JourneyId.");
            }
            if (input.WriteJourneyRequest !== undefined) {
                body = serializeAws_restJson1_1WriteJourneyRequest(input.WriteJourneyRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateJourneyStateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/journeys/{JourneyId}/state";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.JourneyId !== undefined) {
                labelValue = input.JourneyId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: JourneyId.");
                }
                resolvedPath = resolvedPath.replace("{JourneyId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: JourneyId.");
            }
            if (input.JourneyStateRequest !== undefined) {
                body = serializeAws_restJson1_1JourneyStateRequest(input.JourneyStateRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdatePushTemplateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/templates/{TemplateName}/push";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            query = {};
            if (input.CreateNewVersion !== undefined) {
                query["create-new-version"] = input.CreateNewVersion.toString();
            }
            if (input.Version !== undefined) {
                query["version"] = input.Version;
            }
            if (input.PushNotificationTemplateRequest !== undefined) {
                body = serializeAws_restJson1_1PushNotificationTemplateRequest(input.PushNotificationTemplateRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateSegmentCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/segments/{SegmentId}";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.SegmentId !== undefined) {
                labelValue = input.SegmentId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: SegmentId.");
                }
                resolvedPath = resolvedPath.replace("{SegmentId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: SegmentId.");
            }
            if (input.WriteSegmentRequest !== undefined) {
                body = serializeAws_restJson1_1WriteSegmentRequest(input.WriteSegmentRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateSmsChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/sms";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.SMSChannelRequest !== undefined) {
                body = serializeAws_restJson1_1SMSChannelRequest(input.SMSChannelRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateSmsTemplateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/templates/{TemplateName}/sms";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            query = {};
            if (input.CreateNewVersion !== undefined) {
                query["create-new-version"] = input.CreateNewVersion.toString();
            }
            if (input.Version !== undefined) {
                query["version"] = input.Version;
            }
            if (input.SMSTemplateRequest !== undefined) {
                body = serializeAws_restJson1_1SMSTemplateRequest(input.SMSTemplateRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateTemplateActiveVersionCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/templates/{TemplateName}/{TemplateType}/active-version";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            if (input.TemplateType !== undefined) {
                labelValue = input.TemplateType;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateType.");
                }
                resolvedPath = resolvedPath.replace("{TemplateType}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateType.");
            }
            if (input.TemplateActiveVersionRequest !== undefined) {
                body = serializeAws_restJson1_1TemplateActiveVersionRequest(input.TemplateActiveVersionRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateVoiceChannelCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/apps/{ApplicationId}/channels/voice";
            if (input.ApplicationId !== undefined) {
                labelValue = input.ApplicationId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: ApplicationId.");
                }
                resolvedPath = resolvedPath.replace("{ApplicationId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: ApplicationId.");
            }
            if (input.VoiceChannelRequest !== undefined) {
                body = serializeAws_restJson1_1VoiceChannelRequest(input.VoiceChannelRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1UpdateVoiceTemplateCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/v1/templates/{TemplateName}/voice";
            if (input.TemplateName !== undefined) {
                labelValue = input.TemplateName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: TemplateName.");
                }
                resolvedPath = resolvedPath.replace("{TemplateName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: TemplateName.");
            }
            query = {};
            if (input.CreateNewVersion !== undefined) {
                query["create-new-version"] = input.CreateNewVersion.toString();
            }
            if (input.Version !== undefined) {
                query["version"] = input.Version;
            }
            if (input.VoiceTemplateRequest !== undefined) {
                body = serializeAws_restJson1_1VoiceTemplateRequest(input.VoiceTemplateRequest, context);
            }
            if (body === undefined) {
                body = {};
            }
            body = JSON.stringify(body);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "PUT", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function deserializeAws_restJson1_1CreateAppCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 201 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1CreateAppCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "CreateAppResponse",
                        ApplicationResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ApplicationResponse = deserializeAws_restJson1_1ApplicationResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1CreateAppCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1CreateCampaignCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 201 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1CreateCampaignCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "CreateCampaignResponse",
                        CampaignResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.CampaignResponse = deserializeAws_restJson1_1CampaignResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1CreateCampaignCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1CreateEmailTemplateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 201 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1CreateEmailTemplateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "CreateEmailTemplateResponse",
                        CreateTemplateMessageBody: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.CreateTemplateMessageBody = deserializeAws_restJson1_1CreateTemplateMessageBody(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1CreateEmailTemplateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, parsedBody, message;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _j.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "TooManyRequestsException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 12];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1CreateExportJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 202 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1CreateExportJobCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "CreateExportJobResponse",
                        ExportJobResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ExportJobResponse = deserializeAws_restJson1_1ExportJobResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1CreateExportJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1CreateImportJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 201 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1CreateImportJobCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "CreateImportJobResponse",
                        ImportJobResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ImportJobResponse = deserializeAws_restJson1_1ImportJobResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1CreateImportJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1CreateJourneyCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 201 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1CreateJourneyCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "CreateJourneyResponse",
                        JourneyResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.JourneyResponse = deserializeAws_restJson1_1JourneyResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1CreateJourneyCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1CreatePushTemplateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 201 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1CreatePushTemplateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "CreatePushTemplateResponse",
                        CreateTemplateMessageBody: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.CreateTemplateMessageBody = deserializeAws_restJson1_1CreateTemplateMessageBody(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1CreatePushTemplateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, parsedBody, message;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _j.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "TooManyRequestsException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 12];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1CreateSegmentCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 201 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1CreateSegmentCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "CreateSegmentResponse",
                        SegmentResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.SegmentResponse = deserializeAws_restJson1_1SegmentResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1CreateSegmentCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1CreateSmsTemplateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 201 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1CreateSmsTemplateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "CreateSmsTemplateResponse",
                        CreateTemplateMessageBody: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.CreateTemplateMessageBody = deserializeAws_restJson1_1CreateTemplateMessageBody(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1CreateSmsTemplateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, parsedBody, message;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _j.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "TooManyRequestsException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 12];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1CreateVoiceTemplateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 201 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1CreateVoiceTemplateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "CreateVoiceTemplateResponse",
                        CreateTemplateMessageBody: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.CreateTemplateMessageBody = deserializeAws_restJson1_1CreateTemplateMessageBody(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1CreateVoiceTemplateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, parsedBody, message;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _j.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "TooManyRequestsException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 12];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteAdmChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteAdmChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteAdmChannelResponse",
                        ADMChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ADMChannelResponse = deserializeAws_restJson1_1ADMChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteAdmChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteApnsChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteApnsChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteApnsChannelResponse",
                        APNSChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.APNSChannelResponse = deserializeAws_restJson1_1APNSChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteApnsChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteApnsSandboxChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteApnsSandboxChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteApnsSandboxChannelResponse",
                        APNSSandboxChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.APNSSandboxChannelResponse = deserializeAws_restJson1_1APNSSandboxChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteApnsSandboxChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteApnsVoipChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteApnsVoipChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteApnsVoipChannelResponse",
                        APNSVoipChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.APNSVoipChannelResponse = deserializeAws_restJson1_1APNSVoipChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteApnsVoipChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteApnsVoipSandboxChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteApnsVoipSandboxChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteApnsVoipSandboxChannelResponse",
                        APNSVoipSandboxChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.APNSVoipSandboxChannelResponse = deserializeAws_restJson1_1APNSVoipSandboxChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteApnsVoipSandboxChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteAppCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteAppCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteAppResponse",
                        ApplicationResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ApplicationResponse = deserializeAws_restJson1_1ApplicationResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteAppCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteBaiduChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteBaiduChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteBaiduChannelResponse",
                        BaiduChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.BaiduChannelResponse = deserializeAws_restJson1_1BaiduChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteBaiduChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteCampaignCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteCampaignCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteCampaignResponse",
                        CampaignResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.CampaignResponse = deserializeAws_restJson1_1CampaignResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteCampaignCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteEmailChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteEmailChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteEmailChannelResponse",
                        EmailChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.EmailChannelResponse = deserializeAws_restJson1_1EmailChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteEmailChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteEmailTemplateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 202 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteEmailTemplateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteEmailTemplateResponse",
                        MessageBody: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.MessageBody = deserializeAws_restJson1_1MessageBody(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteEmailTemplateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteEndpointCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 202 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteEndpointCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteEndpointResponse",
                        EndpointResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.EndpointResponse = deserializeAws_restJson1_1EndpointResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteEndpointCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteEventStreamCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteEventStreamCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteEventStreamResponse",
                        EventStream: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.EventStream = deserializeAws_restJson1_1EventStream(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteEventStreamCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteGcmChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteGcmChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteGcmChannelResponse",
                        GCMChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.GCMChannelResponse = deserializeAws_restJson1_1GCMChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteGcmChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteJourneyCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteJourneyCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteJourneyResponse",
                        JourneyResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.JourneyResponse = deserializeAws_restJson1_1JourneyResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteJourneyCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeletePushTemplateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 202 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeletePushTemplateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeletePushTemplateResponse",
                        MessageBody: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.MessageBody = deserializeAws_restJson1_1MessageBody(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeletePushTemplateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteSegmentCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteSegmentCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteSegmentResponse",
                        SegmentResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.SegmentResponse = deserializeAws_restJson1_1SegmentResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteSegmentCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteSmsChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteSmsChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteSmsChannelResponse",
                        SMSChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.SMSChannelResponse = deserializeAws_restJson1_1SMSChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteSmsChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteSmsTemplateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 202 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteSmsTemplateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteSmsTemplateResponse",
                        MessageBody: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.MessageBody = deserializeAws_restJson1_1MessageBody(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteSmsTemplateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteUserEndpointsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 202 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteUserEndpointsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteUserEndpointsResponse",
                        EndpointsResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.EndpointsResponse = deserializeAws_restJson1_1EndpointsResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteUserEndpointsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteVoiceChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteVoiceChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteVoiceChannelResponse",
                        VoiceChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.VoiceChannelResponse = deserializeAws_restJson1_1VoiceChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteVoiceChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1DeleteVoiceTemplateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 202 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteVoiceTemplateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteVoiceTemplateResponse",
                        MessageBody: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.MessageBody = deserializeAws_restJson1_1MessageBody(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteVoiceTemplateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetAdmChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetAdmChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetAdmChannelResponse",
                        ADMChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ADMChannelResponse = deserializeAws_restJson1_1ADMChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetAdmChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetApnsChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetApnsChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetApnsChannelResponse",
                        APNSChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.APNSChannelResponse = deserializeAws_restJson1_1APNSChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetApnsChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetApnsSandboxChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetApnsSandboxChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetApnsSandboxChannelResponse",
                        APNSSandboxChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.APNSSandboxChannelResponse = deserializeAws_restJson1_1APNSSandboxChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetApnsSandboxChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetApnsVoipChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetApnsVoipChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetApnsVoipChannelResponse",
                        APNSVoipChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.APNSVoipChannelResponse = deserializeAws_restJson1_1APNSVoipChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetApnsVoipChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetApnsVoipSandboxChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetApnsVoipSandboxChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetApnsVoipSandboxChannelResponse",
                        APNSVoipSandboxChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.APNSVoipSandboxChannelResponse = deserializeAws_restJson1_1APNSVoipSandboxChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetApnsVoipSandboxChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetAppCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetAppCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetAppResponse",
                        ApplicationResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ApplicationResponse = deserializeAws_restJson1_1ApplicationResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetAppCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetApplicationDateRangeKpiCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetApplicationDateRangeKpiCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetApplicationDateRangeKpiResponse",
                        ApplicationDateRangeKpiResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ApplicationDateRangeKpiResponse = deserializeAws_restJson1_1ApplicationDateRangeKpiResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetApplicationDateRangeKpiCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetApplicationSettingsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetApplicationSettingsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetApplicationSettingsResponse",
                        ApplicationSettingsResource: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ApplicationSettingsResource = deserializeAws_restJson1_1ApplicationSettingsResource(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetApplicationSettingsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetAppsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetAppsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetAppsResponse",
                        ApplicationsResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ApplicationsResponse = deserializeAws_restJson1_1ApplicationsResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetAppsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetBaiduChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetBaiduChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetBaiduChannelResponse",
                        BaiduChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.BaiduChannelResponse = deserializeAws_restJson1_1BaiduChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetBaiduChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetCampaignCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetCampaignCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetCampaignResponse",
                        CampaignResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.CampaignResponse = deserializeAws_restJson1_1CampaignResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetCampaignCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetCampaignActivitiesCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetCampaignActivitiesCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetCampaignActivitiesResponse",
                        ActivitiesResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ActivitiesResponse = deserializeAws_restJson1_1ActivitiesResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetCampaignActivitiesCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetCampaignDateRangeKpiCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetCampaignDateRangeKpiCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetCampaignDateRangeKpiResponse",
                        CampaignDateRangeKpiResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.CampaignDateRangeKpiResponse = deserializeAws_restJson1_1CampaignDateRangeKpiResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetCampaignDateRangeKpiCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetCampaignVersionCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetCampaignVersionCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetCampaignVersionResponse",
                        CampaignResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.CampaignResponse = deserializeAws_restJson1_1CampaignResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetCampaignVersionCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetCampaignVersionsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetCampaignVersionsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetCampaignVersionsResponse",
                        CampaignsResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.CampaignsResponse = deserializeAws_restJson1_1CampaignsResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetCampaignVersionsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetCampaignsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetCampaignsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetCampaignsResponse",
                        CampaignsResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.CampaignsResponse = deserializeAws_restJson1_1CampaignsResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetCampaignsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetChannelsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetChannelsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetChannelsResponse",
                        ChannelsResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ChannelsResponse = deserializeAws_restJson1_1ChannelsResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetChannelsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetEmailChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetEmailChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetEmailChannelResponse",
                        EmailChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.EmailChannelResponse = deserializeAws_restJson1_1EmailChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetEmailChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetEmailTemplateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetEmailTemplateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetEmailTemplateResponse",
                        EmailTemplateResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.EmailTemplateResponse = deserializeAws_restJson1_1EmailTemplateResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetEmailTemplateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetEndpointCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetEndpointCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetEndpointResponse",
                        EndpointResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.EndpointResponse = deserializeAws_restJson1_1EndpointResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetEndpointCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetEventStreamCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetEventStreamCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetEventStreamResponse",
                        EventStream: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.EventStream = deserializeAws_restJson1_1EventStream(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetEventStreamCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetExportJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetExportJobCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetExportJobResponse",
                        ExportJobResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ExportJobResponse = deserializeAws_restJson1_1ExportJobResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetExportJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetExportJobsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetExportJobsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetExportJobsResponse",
                        ExportJobsResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ExportJobsResponse = deserializeAws_restJson1_1ExportJobsResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetExportJobsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetGcmChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetGcmChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetGcmChannelResponse",
                        GCMChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.GCMChannelResponse = deserializeAws_restJson1_1GCMChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetGcmChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetImportJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetImportJobCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetImportJobResponse",
                        ImportJobResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ImportJobResponse = deserializeAws_restJson1_1ImportJobResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetImportJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetImportJobsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetImportJobsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetImportJobsResponse",
                        ImportJobsResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ImportJobsResponse = deserializeAws_restJson1_1ImportJobsResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetImportJobsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetJourneyCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetJourneyCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetJourneyResponse",
                        JourneyResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.JourneyResponse = deserializeAws_restJson1_1JourneyResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetJourneyCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetJourneyDateRangeKpiCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetJourneyDateRangeKpiCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetJourneyDateRangeKpiResponse",
                        JourneyDateRangeKpiResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.JourneyDateRangeKpiResponse = deserializeAws_restJson1_1JourneyDateRangeKpiResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetJourneyDateRangeKpiCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetJourneyExecutionActivityMetricsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetJourneyExecutionActivityMetricsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetJourneyExecutionActivityMetricsResponse",
                        JourneyExecutionActivityMetricsResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.JourneyExecutionActivityMetricsResponse = deserializeAws_restJson1_1JourneyExecutionActivityMetricsResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetJourneyExecutionActivityMetricsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetJourneyExecutionMetricsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetJourneyExecutionMetricsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetJourneyExecutionMetricsResponse",
                        JourneyExecutionMetricsResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.JourneyExecutionMetricsResponse = deserializeAws_restJson1_1JourneyExecutionMetricsResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetJourneyExecutionMetricsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetPushTemplateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetPushTemplateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetPushTemplateResponse",
                        PushNotificationTemplateResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.PushNotificationTemplateResponse = deserializeAws_restJson1_1PushNotificationTemplateResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetPushTemplateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetSegmentCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetSegmentCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetSegmentResponse",
                        SegmentResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.SegmentResponse = deserializeAws_restJson1_1SegmentResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetSegmentCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetSegmentExportJobsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetSegmentExportJobsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetSegmentExportJobsResponse",
                        ExportJobsResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ExportJobsResponse = deserializeAws_restJson1_1ExportJobsResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetSegmentExportJobsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetSegmentImportJobsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetSegmentImportJobsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetSegmentImportJobsResponse",
                        ImportJobsResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ImportJobsResponse = deserializeAws_restJson1_1ImportJobsResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetSegmentImportJobsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetSegmentVersionCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetSegmentVersionCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetSegmentVersionResponse",
                        SegmentResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.SegmentResponse = deserializeAws_restJson1_1SegmentResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetSegmentVersionCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetSegmentVersionsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetSegmentVersionsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetSegmentVersionsResponse",
                        SegmentsResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.SegmentsResponse = deserializeAws_restJson1_1SegmentsResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetSegmentVersionsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetSegmentsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetSegmentsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetSegmentsResponse",
                        SegmentsResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.SegmentsResponse = deserializeAws_restJson1_1SegmentsResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetSegmentsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetSmsChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetSmsChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetSmsChannelResponse",
                        SMSChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.SMSChannelResponse = deserializeAws_restJson1_1SMSChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetSmsChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetSmsTemplateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetSmsTemplateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetSmsTemplateResponse",
                        SMSTemplateResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.SMSTemplateResponse = deserializeAws_restJson1_1SMSTemplateResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetSmsTemplateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetUserEndpointsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetUserEndpointsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetUserEndpointsResponse",
                        EndpointsResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.EndpointsResponse = deserializeAws_restJson1_1EndpointsResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetUserEndpointsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetVoiceChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetVoiceChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetVoiceChannelResponse",
                        VoiceChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.VoiceChannelResponse = deserializeAws_restJson1_1VoiceChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetVoiceChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetVoiceTemplateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetVoiceTemplateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetVoiceTemplateResponse",
                        VoiceTemplateResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.VoiceTemplateResponse = deserializeAws_restJson1_1VoiceTemplateResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetVoiceTemplateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1ListJourneysCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1ListJourneysCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "ListJourneysResponse",
                        JourneysResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.JourneysResponse = deserializeAws_restJson1_1JourneysResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1ListJourneysCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1ListTagsForResourceCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1ListTagsForResourceCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "ListTagsForResourceResponse",
                        TagsModel: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.TagsModel = deserializeAws_restJson1_1TagsModel(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1ListTagsForResourceCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, parsedBody, message;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    switch (errorCode) {
                        default:
                            parsedBody = parsedOutput.body;
                            errorCode = parsedBody.code || parsedBody.Code || errorCode;
                            response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    }
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1ListTemplateVersionsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1ListTemplateVersionsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "ListTemplateVersionsResponse",
                        TemplateVersionsResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.TemplateVersionsResponse = deserializeAws_restJson1_1TemplateVersionsResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1ListTemplateVersionsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1ListTemplatesCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1ListTemplatesCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "ListTemplatesResponse",
                        TemplatesResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.TemplatesResponse = deserializeAws_restJson1_1TemplatesResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1ListTemplatesCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, parsedBody, message;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _j.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "TooManyRequestsException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 12];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1PhoneNumberValidateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1PhoneNumberValidateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "PhoneNumberValidateResponse",
                        NumberValidateResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.NumberValidateResponse = deserializeAws_restJson1_1NumberValidateResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1PhoneNumberValidateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1PutEventStreamCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1PutEventStreamCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "PutEventStreamResponse",
                        EventStream: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.EventStream = deserializeAws_restJson1_1EventStream(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1PutEventStreamCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1PutEventsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 202 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1PutEventsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "PutEventsResponse",
                        EventsResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.EventsResponse = deserializeAws_restJson1_1EventsResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1PutEventsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1RemoveAttributesCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1RemoveAttributesCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "RemoveAttributesResponse",
                        AttributesResource: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.AttributesResource = deserializeAws_restJson1_1AttributesResource(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1RemoveAttributesCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1SendMessagesCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1SendMessagesCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "SendMessagesResponse",
                        MessageResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.MessageResponse = deserializeAws_restJson1_1MessageResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1SendMessagesCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1SendUsersMessagesCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1SendUsersMessagesCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "SendUsersMessagesResponse",
                        SendUsersMessageResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.SendUsersMessageResponse = deserializeAws_restJson1_1SendUsersMessageResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1SendUsersMessagesCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1TagResourceCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1TagResourceCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1TagResourceCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, parsedBody, message;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    switch (errorCode) {
                        default:
                            parsedBody = parsedOutput.body;
                            errorCode = parsedBody.code || parsedBody.Code || errorCode;
                            response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    }
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UntagResourceCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UntagResourceCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UntagResourceCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, parsedBody, message;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    switch (errorCode) {
                        default:
                            parsedBody = parsedOutput.body;
                            errorCode = parsedBody.code || parsedBody.Code || errorCode;
                            response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    }
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateAdmChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateAdmChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateAdmChannelResponse",
                        ADMChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ADMChannelResponse = deserializeAws_restJson1_1ADMChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateAdmChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateApnsChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateApnsChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateApnsChannelResponse",
                        APNSChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.APNSChannelResponse = deserializeAws_restJson1_1APNSChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateApnsChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateApnsSandboxChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateApnsSandboxChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateApnsSandboxChannelResponse",
                        APNSSandboxChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.APNSSandboxChannelResponse = deserializeAws_restJson1_1APNSSandboxChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateApnsSandboxChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateApnsVoipChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateApnsVoipChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateApnsVoipChannelResponse",
                        APNSVoipChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.APNSVoipChannelResponse = deserializeAws_restJson1_1APNSVoipChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateApnsVoipChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateApnsVoipSandboxChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateApnsVoipSandboxChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateApnsVoipSandboxChannelResponse",
                        APNSVoipSandboxChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.APNSVoipSandboxChannelResponse = deserializeAws_restJson1_1APNSVoipSandboxChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateApnsVoipSandboxChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateApplicationSettingsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateApplicationSettingsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateApplicationSettingsResponse",
                        ApplicationSettingsResource: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.ApplicationSettingsResource = deserializeAws_restJson1_1ApplicationSettingsResource(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateApplicationSettingsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateBaiduChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateBaiduChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateBaiduChannelResponse",
                        BaiduChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.BaiduChannelResponse = deserializeAws_restJson1_1BaiduChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateBaiduChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateCampaignCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateCampaignCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateCampaignResponse",
                        CampaignResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.CampaignResponse = deserializeAws_restJson1_1CampaignResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateCampaignCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateEmailChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateEmailChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateEmailChannelResponse",
                        EmailChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.EmailChannelResponse = deserializeAws_restJson1_1EmailChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateEmailChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateEmailTemplateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 202 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateEmailTemplateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateEmailTemplateResponse",
                        MessageBody: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.MessageBody = deserializeAws_restJson1_1MessageBody(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateEmailTemplateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateEndpointCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 202 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateEndpointCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateEndpointResponse",
                        MessageBody: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.MessageBody = deserializeAws_restJson1_1MessageBody(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateEndpointCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateEndpointsBatchCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 202 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateEndpointsBatchCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateEndpointsBatchResponse",
                        MessageBody: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.MessageBody = deserializeAws_restJson1_1MessageBody(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateEndpointsBatchCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateGcmChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateGcmChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateGcmChannelResponse",
                        GCMChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.GCMChannelResponse = deserializeAws_restJson1_1GCMChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateGcmChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateJourneyCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateJourneyCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateJourneyResponse",
                        JourneyResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.JourneyResponse = deserializeAws_restJson1_1JourneyResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateJourneyCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateJourneyStateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateJourneyStateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateJourneyStateResponse",
                        JourneyResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.JourneyResponse = deserializeAws_restJson1_1JourneyResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateJourneyStateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdatePushTemplateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 202 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdatePushTemplateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdatePushTemplateResponse",
                        MessageBody: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.MessageBody = deserializeAws_restJson1_1MessageBody(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdatePushTemplateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateSegmentCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateSegmentCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateSegmentResponse",
                        SegmentResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.SegmentResponse = deserializeAws_restJson1_1SegmentResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateSegmentCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateSmsChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateSmsChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateSmsChannelResponse",
                        SMSChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.SMSChannelResponse = deserializeAws_restJson1_1SMSChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateSmsChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateSmsTemplateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 202 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateSmsTemplateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateSmsTemplateResponse",
                        MessageBody: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.MessageBody = deserializeAws_restJson1_1MessageBody(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateSmsTemplateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateTemplateActiveVersionCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateTemplateActiveVersionCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateTemplateActiveVersionResponse",
                        MessageBody: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.MessageBody = deserializeAws_restJson1_1MessageBody(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateTemplateActiveVersionCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateVoiceChannelCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateVoiceChannelCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateVoiceChannelResponse",
                        VoiceChannelResponse: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.VoiceChannelResponse = deserializeAws_restJson1_1VoiceChannelResponse(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateVoiceChannelCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1UpdateVoiceTemplateCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 202 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1UpdateVoiceTemplateCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "UpdateVoiceTemplateResponse",
                        MessageBody: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents.MessageBody = deserializeAws_restJson1_1MessageBody(data, context);
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1UpdateVoiceTemplateCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.pinpoint#BadRequestException": return [3 /*break*/, 2];
                        case "ForbiddenException": return [3 /*break*/, 4];
                        case "com.amazonaws.pinpoint#ForbiddenException": return [3 /*break*/, 4];
                        case "InternalServerErrorException": return [3 /*break*/, 6];
                        case "com.amazonaws.pinpoint#InternalServerErrorException": return [3 /*break*/, 6];
                        case "MethodNotAllowedException": return [3 /*break*/, 8];
                        case "com.amazonaws.pinpoint#MethodNotAllowedException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.pinpoint#NotFoundException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.pinpoint#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ForbiddenExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalServerErrorExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1MethodNotAllowedExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
var deserializeAws_restJson1_1BadRequestExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "BadRequestException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            Message: undefined,
            RequestID: undefined
        };
        data = parsedOutput.body;
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = data.Message;
        }
        if (data.RequestID !== undefined && data.RequestID !== null) {
            contents.RequestID = data.RequestID;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1ForbiddenExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "ForbiddenException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            Message: undefined,
            RequestID: undefined
        };
        data = parsedOutput.body;
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = data.Message;
        }
        if (data.RequestID !== undefined && data.RequestID !== null) {
            contents.RequestID = data.RequestID;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1InternalServerErrorExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "InternalServerErrorException",
            $fault: "server",
            $metadata: deserializeMetadata(parsedOutput),
            Message: undefined,
            RequestID: undefined
        };
        data = parsedOutput.body;
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = data.Message;
        }
        if (data.RequestID !== undefined && data.RequestID !== null) {
            contents.RequestID = data.RequestID;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1MethodNotAllowedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "MethodNotAllowedException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            Message: undefined,
            RequestID: undefined
        };
        data = parsedOutput.body;
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = data.Message;
        }
        if (data.RequestID !== undefined && data.RequestID !== null) {
            contents.RequestID = data.RequestID;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1NotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "NotFoundException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            Message: undefined,
            RequestID: undefined
        };
        data = parsedOutput.body;
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = data.Message;
        }
        if (data.RequestID !== undefined && data.RequestID !== null) {
            contents.RequestID = data.RequestID;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1TooManyRequestsExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "TooManyRequestsException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            Message: undefined,
            RequestID: undefined
        };
        data = parsedOutput.body;
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = data.Message;
        }
        if (data.RequestID !== undefined && data.RequestID !== null) {
            contents.RequestID = data.RequestID;
        }
        return [2 /*return*/, contents];
    });
}); };
var serializeAws_restJson1_1ADMChannelRequest = function (input, context) {
    var bodyParams = {};
    if (input.ClientId !== undefined) {
        bodyParams["ClientId"] = input.ClientId;
    }
    if (input.ClientSecret !== undefined) {
        bodyParams["ClientSecret"] = input.ClientSecret;
    }
    if (input.Enabled !== undefined) {
        bodyParams["Enabled"] = input.Enabled;
    }
    return bodyParams;
};
var serializeAws_restJson1_1ADMMessage = function (input, context) {
    var bodyParams = {};
    if (input.Action !== undefined) {
        bodyParams["Action"] = input.Action;
    }
    if (input.Body !== undefined) {
        bodyParams["Body"] = input.Body;
    }
    if (input.ConsolidationKey !== undefined) {
        bodyParams["ConsolidationKey"] = input.ConsolidationKey;
    }
    if (input.Data !== undefined) {
        bodyParams["Data"] = serializeAws_restJson1_1MapOf__string(input.Data, context);
    }
    if (input.ExpiresAfter !== undefined) {
        bodyParams["ExpiresAfter"] = input.ExpiresAfter;
    }
    if (input.IconReference !== undefined) {
        bodyParams["IconReference"] = input.IconReference;
    }
    if (input.ImageIconUrl !== undefined) {
        bodyParams["ImageIconUrl"] = input.ImageIconUrl;
    }
    if (input.ImageUrl !== undefined) {
        bodyParams["ImageUrl"] = input.ImageUrl;
    }
    if (input.MD5 !== undefined) {
        bodyParams["MD5"] = input.MD5;
    }
    if (input.RawContent !== undefined) {
        bodyParams["RawContent"] = input.RawContent;
    }
    if (input.SilentPush !== undefined) {
        bodyParams["SilentPush"] = input.SilentPush;
    }
    if (input.SmallImageIconUrl !== undefined) {
        bodyParams["SmallImageIconUrl"] = input.SmallImageIconUrl;
    }
    if (input.Sound !== undefined) {
        bodyParams["Sound"] = input.Sound;
    }
    if (input.Substitutions !== undefined) {
        bodyParams["Substitutions"] = serializeAws_restJson1_1MapOfListOf__string(input.Substitutions, context);
    }
    if (input.Title !== undefined) {
        bodyParams["Title"] = input.Title;
    }
    if (input.Url !== undefined) {
        bodyParams["Url"] = input.Url;
    }
    return bodyParams;
};
var serializeAws_restJson1_1APNSChannelRequest = function (input, context) {
    var bodyParams = {};
    if (input.BundleId !== undefined) {
        bodyParams["BundleId"] = input.BundleId;
    }
    if (input.Certificate !== undefined) {
        bodyParams["Certificate"] = input.Certificate;
    }
    if (input.DefaultAuthenticationMethod !== undefined) {
        bodyParams["DefaultAuthenticationMethod"] =
            input.DefaultAuthenticationMethod;
    }
    if (input.Enabled !== undefined) {
        bodyParams["Enabled"] = input.Enabled;
    }
    if (input.PrivateKey !== undefined) {
        bodyParams["PrivateKey"] = input.PrivateKey;
    }
    if (input.TeamId !== undefined) {
        bodyParams["TeamId"] = input.TeamId;
    }
    if (input.TokenKey !== undefined) {
        bodyParams["TokenKey"] = input.TokenKey;
    }
    if (input.TokenKeyId !== undefined) {
        bodyParams["TokenKeyId"] = input.TokenKeyId;
    }
    return bodyParams;
};
var serializeAws_restJson1_1APNSMessage = function (input, context) {
    var bodyParams = {};
    if (input.APNSPushType !== undefined) {
        bodyParams["APNSPushType"] = input.APNSPushType;
    }
    if (input.Action !== undefined) {
        bodyParams["Action"] = input.Action;
    }
    if (input.Badge !== undefined) {
        bodyParams["Badge"] = input.Badge;
    }
    if (input.Body !== undefined) {
        bodyParams["Body"] = input.Body;
    }
    if (input.Category !== undefined) {
        bodyParams["Category"] = input.Category;
    }
    if (input.CollapseId !== undefined) {
        bodyParams["CollapseId"] = input.CollapseId;
    }
    if (input.Data !== undefined) {
        bodyParams["Data"] = serializeAws_restJson1_1MapOf__string(input.Data, context);
    }
    if (input.MediaUrl !== undefined) {
        bodyParams["MediaUrl"] = input.MediaUrl;
    }
    if (input.PreferredAuthenticationMethod !== undefined) {
        bodyParams["PreferredAuthenticationMethod"] =
            input.PreferredAuthenticationMethod;
    }
    if (input.Priority !== undefined) {
        bodyParams["Priority"] = input.Priority;
    }
    if (input.RawContent !== undefined) {
        bodyParams["RawContent"] = input.RawContent;
    }
    if (input.SilentPush !== undefined) {
        bodyParams["SilentPush"] = input.SilentPush;
    }
    if (input.Sound !== undefined) {
        bodyParams["Sound"] = input.Sound;
    }
    if (input.Substitutions !== undefined) {
        bodyParams["Substitutions"] = serializeAws_restJson1_1MapOfListOf__string(input.Substitutions, context);
    }
    if (input.ThreadId !== undefined) {
        bodyParams["ThreadId"] = input.ThreadId;
    }
    if (input.TimeToLive !== undefined) {
        bodyParams["TimeToLive"] = input.TimeToLive;
    }
    if (input.Title !== undefined) {
        bodyParams["Title"] = input.Title;
    }
    if (input.Url !== undefined) {
        bodyParams["Url"] = input.Url;
    }
    return bodyParams;
};
var serializeAws_restJson1_1APNSPushNotificationTemplate = function (input, context) {
    var bodyParams = {};
    if (input.Action !== undefined) {
        bodyParams["Action"] = input.Action;
    }
    if (input.Body !== undefined) {
        bodyParams["Body"] = input.Body;
    }
    if (input.MediaUrl !== undefined) {
        bodyParams["MediaUrl"] = input.MediaUrl;
    }
    if (input.RawContent !== undefined) {
        bodyParams["RawContent"] = input.RawContent;
    }
    if (input.Sound !== undefined) {
        bodyParams["Sound"] = input.Sound;
    }
    if (input.Title !== undefined) {
        bodyParams["Title"] = input.Title;
    }
    if (input.Url !== undefined) {
        bodyParams["Url"] = input.Url;
    }
    return bodyParams;
};
var serializeAws_restJson1_1APNSSandboxChannelRequest = function (input, context) {
    var bodyParams = {};
    if (input.BundleId !== undefined) {
        bodyParams["BundleId"] = input.BundleId;
    }
    if (input.Certificate !== undefined) {
        bodyParams["Certificate"] = input.Certificate;
    }
    if (input.DefaultAuthenticationMethod !== undefined) {
        bodyParams["DefaultAuthenticationMethod"] =
            input.DefaultAuthenticationMethod;
    }
    if (input.Enabled !== undefined) {
        bodyParams["Enabled"] = input.Enabled;
    }
    if (input.PrivateKey !== undefined) {
        bodyParams["PrivateKey"] = input.PrivateKey;
    }
    if (input.TeamId !== undefined) {
        bodyParams["TeamId"] = input.TeamId;
    }
    if (input.TokenKey !== undefined) {
        bodyParams["TokenKey"] = input.TokenKey;
    }
    if (input.TokenKeyId !== undefined) {
        bodyParams["TokenKeyId"] = input.TokenKeyId;
    }
    return bodyParams;
};
var serializeAws_restJson1_1APNSVoipChannelRequest = function (input, context) {
    var bodyParams = {};
    if (input.BundleId !== undefined) {
        bodyParams["BundleId"] = input.BundleId;
    }
    if (input.Certificate !== undefined) {
        bodyParams["Certificate"] = input.Certificate;
    }
    if (input.DefaultAuthenticationMethod !== undefined) {
        bodyParams["DefaultAuthenticationMethod"] =
            input.DefaultAuthenticationMethod;
    }
    if (input.Enabled !== undefined) {
        bodyParams["Enabled"] = input.Enabled;
    }
    if (input.PrivateKey !== undefined) {
        bodyParams["PrivateKey"] = input.PrivateKey;
    }
    if (input.TeamId !== undefined) {
        bodyParams["TeamId"] = input.TeamId;
    }
    if (input.TokenKey !== undefined) {
        bodyParams["TokenKey"] = input.TokenKey;
    }
    if (input.TokenKeyId !== undefined) {
        bodyParams["TokenKeyId"] = input.TokenKeyId;
    }
    return bodyParams;
};
var serializeAws_restJson1_1APNSVoipSandboxChannelRequest = function (input, context) {
    var bodyParams = {};
    if (input.BundleId !== undefined) {
        bodyParams["BundleId"] = input.BundleId;
    }
    if (input.Certificate !== undefined) {
        bodyParams["Certificate"] = input.Certificate;
    }
    if (input.DefaultAuthenticationMethod !== undefined) {
        bodyParams["DefaultAuthenticationMethod"] =
            input.DefaultAuthenticationMethod;
    }
    if (input.Enabled !== undefined) {
        bodyParams["Enabled"] = input.Enabled;
    }
    if (input.PrivateKey !== undefined) {
        bodyParams["PrivateKey"] = input.PrivateKey;
    }
    if (input.TeamId !== undefined) {
        bodyParams["TeamId"] = input.TeamId;
    }
    if (input.TokenKey !== undefined) {
        bodyParams["TokenKey"] = input.TokenKey;
    }
    if (input.TokenKeyId !== undefined) {
        bodyParams["TokenKeyId"] = input.TokenKeyId;
    }
    return bodyParams;
};
var serializeAws_restJson1_1Activity = function (input, context) {
    var bodyParams = {};
    if (input.ConditionalSplit !== undefined) {
        bodyParams["ConditionalSplit"] = serializeAws_restJson1_1ConditionalSplitActivity(input.ConditionalSplit, context);
    }
    if (input.Description !== undefined) {
        bodyParams["Description"] = input.Description;
    }
    if (input.EMAIL !== undefined) {
        bodyParams["EMAIL"] = serializeAws_restJson1_1EmailMessageActivity(input.EMAIL, context);
    }
    if (input.Holdout !== undefined) {
        bodyParams["Holdout"] = serializeAws_restJson1_1HoldoutActivity(input.Holdout, context);
    }
    if (input.MultiCondition !== undefined) {
        bodyParams["MultiCondition"] = serializeAws_restJson1_1MultiConditionalSplitActivity(input.MultiCondition, context);
    }
    if (input.RandomSplit !== undefined) {
        bodyParams["RandomSplit"] = serializeAws_restJson1_1RandomSplitActivity(input.RandomSplit, context);
    }
    if (input.Wait !== undefined) {
        bodyParams["Wait"] = serializeAws_restJson1_1WaitActivity(input.Wait, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1AddressConfiguration = function (input, context) {
    var bodyParams = {};
    if (input.BodyOverride !== undefined) {
        bodyParams["BodyOverride"] = input.BodyOverride;
    }
    if (input.ChannelType !== undefined) {
        bodyParams["ChannelType"] = input.ChannelType;
    }
    if (input.Context !== undefined) {
        bodyParams["Context"] = serializeAws_restJson1_1MapOf__string(input.Context, context);
    }
    if (input.RawContent !== undefined) {
        bodyParams["RawContent"] = input.RawContent;
    }
    if (input.Substitutions !== undefined) {
        bodyParams["Substitutions"] = serializeAws_restJson1_1MapOfListOf__string(input.Substitutions, context);
    }
    if (input.TitleOverride !== undefined) {
        bodyParams["TitleOverride"] = input.TitleOverride;
    }
    return bodyParams;
};
var serializeAws_restJson1_1AndroidPushNotificationTemplate = function (input, context) {
    var bodyParams = {};
    if (input.Action !== undefined) {
        bodyParams["Action"] = input.Action;
    }
    if (input.Body !== undefined) {
        bodyParams["Body"] = input.Body;
    }
    if (input.ImageIconUrl !== undefined) {
        bodyParams["ImageIconUrl"] = input.ImageIconUrl;
    }
    if (input.ImageUrl !== undefined) {
        bodyParams["ImageUrl"] = input.ImageUrl;
    }
    if (input.RawContent !== undefined) {
        bodyParams["RawContent"] = input.RawContent;
    }
    if (input.SmallImageIconUrl !== undefined) {
        bodyParams["SmallImageIconUrl"] = input.SmallImageIconUrl;
    }
    if (input.Sound !== undefined) {
        bodyParams["Sound"] = input.Sound;
    }
    if (input.Title !== undefined) {
        bodyParams["Title"] = input.Title;
    }
    if (input.Url !== undefined) {
        bodyParams["Url"] = input.Url;
    }
    return bodyParams;
};
var serializeAws_restJson1_1AttributeDimension = function (input, context) {
    var bodyParams = {};
    if (input.AttributeType !== undefined) {
        bodyParams["AttributeType"] = input.AttributeType;
    }
    if (input.Values !== undefined) {
        bodyParams["Values"] = serializeAws_restJson1_1ListOf__string(input.Values, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1BaiduChannelRequest = function (input, context) {
    var bodyParams = {};
    if (input.ApiKey !== undefined) {
        bodyParams["ApiKey"] = input.ApiKey;
    }
    if (input.Enabled !== undefined) {
        bodyParams["Enabled"] = input.Enabled;
    }
    if (input.SecretKey !== undefined) {
        bodyParams["SecretKey"] = input.SecretKey;
    }
    return bodyParams;
};
var serializeAws_restJson1_1BaiduMessage = function (input, context) {
    var bodyParams = {};
    if (input.Action !== undefined) {
        bodyParams["Action"] = input.Action;
    }
    if (input.Body !== undefined) {
        bodyParams["Body"] = input.Body;
    }
    if (input.Data !== undefined) {
        bodyParams["Data"] = serializeAws_restJson1_1MapOf__string(input.Data, context);
    }
    if (input.IconReference !== undefined) {
        bodyParams["IconReference"] = input.IconReference;
    }
    if (input.ImageIconUrl !== undefined) {
        bodyParams["ImageIconUrl"] = input.ImageIconUrl;
    }
    if (input.ImageUrl !== undefined) {
        bodyParams["ImageUrl"] = input.ImageUrl;
    }
    if (input.RawContent !== undefined) {
        bodyParams["RawContent"] = input.RawContent;
    }
    if (input.SilentPush !== undefined) {
        bodyParams["SilentPush"] = input.SilentPush;
    }
    if (input.SmallImageIconUrl !== undefined) {
        bodyParams["SmallImageIconUrl"] = input.SmallImageIconUrl;
    }
    if (input.Sound !== undefined) {
        bodyParams["Sound"] = input.Sound;
    }
    if (input.Substitutions !== undefined) {
        bodyParams["Substitutions"] = serializeAws_restJson1_1MapOfListOf__string(input.Substitutions, context);
    }
    if (input.TimeToLive !== undefined) {
        bodyParams["TimeToLive"] = input.TimeToLive;
    }
    if (input.Title !== undefined) {
        bodyParams["Title"] = input.Title;
    }
    if (input.Url !== undefined) {
        bodyParams["Url"] = input.Url;
    }
    return bodyParams;
};
var serializeAws_restJson1_1CampaignEmailMessage = function (input, context) {
    var bodyParams = {};
    if (input.Body !== undefined) {
        bodyParams["Body"] = input.Body;
    }
    if (input.FromAddress !== undefined) {
        bodyParams["FromAddress"] = input.FromAddress;
    }
    if (input.HtmlBody !== undefined) {
        bodyParams["HtmlBody"] = input.HtmlBody;
    }
    if (input.Title !== undefined) {
        bodyParams["Title"] = input.Title;
    }
    return bodyParams;
};
var serializeAws_restJson1_1CampaignEventFilter = function (input, context) {
    var bodyParams = {};
    if (input.Dimensions !== undefined) {
        bodyParams["Dimensions"] = serializeAws_restJson1_1EventDimensions(input.Dimensions, context);
    }
    if (input.FilterType !== undefined) {
        bodyParams["FilterType"] = input.FilterType;
    }
    return bodyParams;
};
var serializeAws_restJson1_1CampaignHook = function (input, context) {
    var bodyParams = {};
    if (input.LambdaFunctionName !== undefined) {
        bodyParams["LambdaFunctionName"] = input.LambdaFunctionName;
    }
    if (input.Mode !== undefined) {
        bodyParams["Mode"] = input.Mode;
    }
    if (input.WebUrl !== undefined) {
        bodyParams["WebUrl"] = input.WebUrl;
    }
    return bodyParams;
};
var serializeAws_restJson1_1CampaignLimits = function (input, context) {
    var bodyParams = {};
    if (input.Daily !== undefined) {
        bodyParams["Daily"] = input.Daily;
    }
    if (input.MaximumDuration !== undefined) {
        bodyParams["MaximumDuration"] = input.MaximumDuration;
    }
    if (input.MessagesPerSecond !== undefined) {
        bodyParams["MessagesPerSecond"] = input.MessagesPerSecond;
    }
    if (input.Total !== undefined) {
        bodyParams["Total"] = input.Total;
    }
    return bodyParams;
};
var serializeAws_restJson1_1CampaignSmsMessage = function (input, context) {
    var bodyParams = {};
    if (input.Body !== undefined) {
        bodyParams["Body"] = input.Body;
    }
    if (input.MessageType !== undefined) {
        bodyParams["MessageType"] = input.MessageType;
    }
    if (input.SenderId !== undefined) {
        bodyParams["SenderId"] = input.SenderId;
    }
    return bodyParams;
};
var serializeAws_restJson1_1Condition = function (input, context) {
    var bodyParams = {};
    if (input.Conditions !== undefined) {
        bodyParams["Conditions"] = serializeAws_restJson1_1ListOfSimpleCondition(input.Conditions, context);
    }
    if (input.Operator !== undefined) {
        bodyParams["Operator"] = input.Operator;
    }
    return bodyParams;
};
var serializeAws_restJson1_1ConditionalSplitActivity = function (input, context) {
    var bodyParams = {};
    if (input.Condition !== undefined) {
        bodyParams["Condition"] = serializeAws_restJson1_1Condition(input.Condition, context);
    }
    if (input.EvaluationWaitTime !== undefined) {
        bodyParams["EvaluationWaitTime"] = serializeAws_restJson1_1WaitTime(input.EvaluationWaitTime, context);
    }
    if (input.FalseActivity !== undefined) {
        bodyParams["FalseActivity"] = input.FalseActivity;
    }
    if (input.TrueActivity !== undefined) {
        bodyParams["TrueActivity"] = input.TrueActivity;
    }
    return bodyParams;
};
var serializeAws_restJson1_1CreateApplicationRequest = function (input, context) {
    var bodyParams = {};
    if (input.Name !== undefined) {
        bodyParams["Name"] = input.Name;
    }
    if (input.tags !== undefined) {
        bodyParams["tags"] = serializeAws_restJson1_1MapOf__string(input.tags, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1DefaultMessage = function (input, context) {
    var bodyParams = {};
    if (input.Body !== undefined) {
        bodyParams["Body"] = input.Body;
    }
    if (input.Substitutions !== undefined) {
        bodyParams["Substitutions"] = serializeAws_restJson1_1MapOfListOf__string(input.Substitutions, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1DefaultPushNotificationMessage = function (input, context) {
    var bodyParams = {};
    if (input.Action !== undefined) {
        bodyParams["Action"] = input.Action;
    }
    if (input.Body !== undefined) {
        bodyParams["Body"] = input.Body;
    }
    if (input.Data !== undefined) {
        bodyParams["Data"] = serializeAws_restJson1_1MapOf__string(input.Data, context);
    }
    if (input.SilentPush !== undefined) {
        bodyParams["SilentPush"] = input.SilentPush;
    }
    if (input.Substitutions !== undefined) {
        bodyParams["Substitutions"] = serializeAws_restJson1_1MapOfListOf__string(input.Substitutions, context);
    }
    if (input.Title !== undefined) {
        bodyParams["Title"] = input.Title;
    }
    if (input.Url !== undefined) {
        bodyParams["Url"] = input.Url;
    }
    return bodyParams;
};
var serializeAws_restJson1_1DefaultPushNotificationTemplate = function (input, context) {
    var bodyParams = {};
    if (input.Action !== undefined) {
        bodyParams["Action"] = input.Action;
    }
    if (input.Body !== undefined) {
        bodyParams["Body"] = input.Body;
    }
    if (input.Sound !== undefined) {
        bodyParams["Sound"] = input.Sound;
    }
    if (input.Title !== undefined) {
        bodyParams["Title"] = input.Title;
    }
    if (input.Url !== undefined) {
        bodyParams["Url"] = input.Url;
    }
    return bodyParams;
};
var serializeAws_restJson1_1DirectMessageConfiguration = function (input, context) {
    var bodyParams = {};
    if (input.ADMMessage !== undefined) {
        bodyParams["ADMMessage"] = serializeAws_restJson1_1ADMMessage(input.ADMMessage, context);
    }
    if (input.APNSMessage !== undefined) {
        bodyParams["APNSMessage"] = serializeAws_restJson1_1APNSMessage(input.APNSMessage, context);
    }
    if (input.BaiduMessage !== undefined) {
        bodyParams["BaiduMessage"] = serializeAws_restJson1_1BaiduMessage(input.BaiduMessage, context);
    }
    if (input.DefaultMessage !== undefined) {
        bodyParams["DefaultMessage"] = serializeAws_restJson1_1DefaultMessage(input.DefaultMessage, context);
    }
    if (input.DefaultPushNotificationMessage !== undefined) {
        bodyParams["DefaultPushNotificationMessage"] = serializeAws_restJson1_1DefaultPushNotificationMessage(input.DefaultPushNotificationMessage, context);
    }
    if (input.EmailMessage !== undefined) {
        bodyParams["EmailMessage"] = serializeAws_restJson1_1EmailMessage(input.EmailMessage, context);
    }
    if (input.GCMMessage !== undefined) {
        bodyParams["GCMMessage"] = serializeAws_restJson1_1GCMMessage(input.GCMMessage, context);
    }
    if (input.SMSMessage !== undefined) {
        bodyParams["SMSMessage"] = serializeAws_restJson1_1SMSMessage(input.SMSMessage, context);
    }
    if (input.VoiceMessage !== undefined) {
        bodyParams["VoiceMessage"] = serializeAws_restJson1_1VoiceMessage(input.VoiceMessage, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1EmailChannelRequest = function (input, context) {
    var bodyParams = {};
    if (input.ConfigurationSet !== undefined) {
        bodyParams["ConfigurationSet"] = input.ConfigurationSet;
    }
    if (input.Enabled !== undefined) {
        bodyParams["Enabled"] = input.Enabled;
    }
    if (input.FromAddress !== undefined) {
        bodyParams["FromAddress"] = input.FromAddress;
    }
    if (input.Identity !== undefined) {
        bodyParams["Identity"] = input.Identity;
    }
    if (input.RoleArn !== undefined) {
        bodyParams["RoleArn"] = input.RoleArn;
    }
    return bodyParams;
};
var serializeAws_restJson1_1EmailMessage = function (input, context) {
    var bodyParams = {};
    if (input.Body !== undefined) {
        bodyParams["Body"] = input.Body;
    }
    if (input.FeedbackForwardingAddress !== undefined) {
        bodyParams["FeedbackForwardingAddress"] = input.FeedbackForwardingAddress;
    }
    if (input.FromAddress !== undefined) {
        bodyParams["FromAddress"] = input.FromAddress;
    }
    if (input.RawEmail !== undefined) {
        bodyParams["RawEmail"] = serializeAws_restJson1_1RawEmail(input.RawEmail, context);
    }
    if (input.ReplyToAddresses !== undefined) {
        bodyParams["ReplyToAddresses"] = serializeAws_restJson1_1ListOf__string(input.ReplyToAddresses, context);
    }
    if (input.SimpleEmail !== undefined) {
        bodyParams["SimpleEmail"] = serializeAws_restJson1_1SimpleEmail(input.SimpleEmail, context);
    }
    if (input.Substitutions !== undefined) {
        bodyParams["Substitutions"] = serializeAws_restJson1_1MapOfListOf__string(input.Substitutions, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1EmailMessageActivity = function (input, context) {
    var bodyParams = {};
    if (input.MessageConfig !== undefined) {
        bodyParams["MessageConfig"] = serializeAws_restJson1_1JourneyEmailMessage(input.MessageConfig, context);
    }
    if (input.NextActivity !== undefined) {
        bodyParams["NextActivity"] = input.NextActivity;
    }
    if (input.TemplateName !== undefined) {
        bodyParams["TemplateName"] = input.TemplateName;
    }
    if (input.TemplateVersion !== undefined) {
        bodyParams["TemplateVersion"] = input.TemplateVersion;
    }
    return bodyParams;
};
var serializeAws_restJson1_1EmailTemplateRequest = function (input, context) {
    var bodyParams = {};
    if (input.DefaultSubstitutions !== undefined) {
        bodyParams["DefaultSubstitutions"] = input.DefaultSubstitutions;
    }
    if (input.HtmlPart !== undefined) {
        bodyParams["HtmlPart"] = input.HtmlPart;
    }
    if (input.Subject !== undefined) {
        bodyParams["Subject"] = input.Subject;
    }
    if (input.TemplateDescription !== undefined) {
        bodyParams["TemplateDescription"] = input.TemplateDescription;
    }
    if (input.TextPart !== undefined) {
        bodyParams["TextPart"] = input.TextPart;
    }
    if (input.tags !== undefined) {
        bodyParams["tags"] = serializeAws_restJson1_1MapOf__string(input.tags, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1EndpointBatchItem = function (input, context) {
    var bodyParams = {};
    if (input.Address !== undefined) {
        bodyParams["Address"] = input.Address;
    }
    if (input.Attributes !== undefined) {
        bodyParams["Attributes"] = serializeAws_restJson1_1MapOfListOf__string(input.Attributes, context);
    }
    if (input.ChannelType !== undefined) {
        bodyParams["ChannelType"] = input.ChannelType;
    }
    if (input.Demographic !== undefined) {
        bodyParams["Demographic"] = serializeAws_restJson1_1EndpointDemographic(input.Demographic, context);
    }
    if (input.EffectiveDate !== undefined) {
        bodyParams["EffectiveDate"] = input.EffectiveDate;
    }
    if (input.EndpointStatus !== undefined) {
        bodyParams["EndpointStatus"] = input.EndpointStatus;
    }
    if (input.Id !== undefined) {
        bodyParams["Id"] = input.Id;
    }
    if (input.Location !== undefined) {
        bodyParams["Location"] = serializeAws_restJson1_1EndpointLocation(input.Location, context);
    }
    if (input.Metrics !== undefined) {
        bodyParams["Metrics"] = serializeAws_restJson1_1MapOf__double(input.Metrics, context);
    }
    if (input.OptOut !== undefined) {
        bodyParams["OptOut"] = input.OptOut;
    }
    if (input.RequestId !== undefined) {
        bodyParams["RequestId"] = input.RequestId;
    }
    if (input.User !== undefined) {
        bodyParams["User"] = serializeAws_restJson1_1EndpointUser(input.User, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1EndpointBatchRequest = function (input, context) {
    var bodyParams = {};
    if (input.Item !== undefined) {
        bodyParams["Item"] = serializeAws_restJson1_1ListOfEndpointBatchItem(input.Item, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1EndpointDemographic = function (input, context) {
    var bodyParams = {};
    if (input.AppVersion !== undefined) {
        bodyParams["AppVersion"] = input.AppVersion;
    }
    if (input.Locale !== undefined) {
        bodyParams["Locale"] = input.Locale;
    }
    if (input.Make !== undefined) {
        bodyParams["Make"] = input.Make;
    }
    if (input.Model !== undefined) {
        bodyParams["Model"] = input.Model;
    }
    if (input.ModelVersion !== undefined) {
        bodyParams["ModelVersion"] = input.ModelVersion;
    }
    if (input.Platform !== undefined) {
        bodyParams["Platform"] = input.Platform;
    }
    if (input.PlatformVersion !== undefined) {
        bodyParams["PlatformVersion"] = input.PlatformVersion;
    }
    if (input.Timezone !== undefined) {
        bodyParams["Timezone"] = input.Timezone;
    }
    return bodyParams;
};
var serializeAws_restJson1_1EndpointLocation = function (input, context) {
    var bodyParams = {};
    if (input.City !== undefined) {
        bodyParams["City"] = input.City;
    }
    if (input.Country !== undefined) {
        bodyParams["Country"] = input.Country;
    }
    if (input.Latitude !== undefined) {
        bodyParams["Latitude"] = input.Latitude;
    }
    if (input.Longitude !== undefined) {
        bodyParams["Longitude"] = input.Longitude;
    }
    if (input.PostalCode !== undefined) {
        bodyParams["PostalCode"] = input.PostalCode;
    }
    if (input.Region !== undefined) {
        bodyParams["Region"] = input.Region;
    }
    return bodyParams;
};
var serializeAws_restJson1_1EndpointRequest = function (input, context) {
    var bodyParams = {};
    if (input.Address !== undefined) {
        bodyParams["Address"] = input.Address;
    }
    if (input.Attributes !== undefined) {
        bodyParams["Attributes"] = serializeAws_restJson1_1MapOfListOf__string(input.Attributes, context);
    }
    if (input.ChannelType !== undefined) {
        bodyParams["ChannelType"] = input.ChannelType;
    }
    if (input.Demographic !== undefined) {
        bodyParams["Demographic"] = serializeAws_restJson1_1EndpointDemographic(input.Demographic, context);
    }
    if (input.EffectiveDate !== undefined) {
        bodyParams["EffectiveDate"] = input.EffectiveDate;
    }
    if (input.EndpointStatus !== undefined) {
        bodyParams["EndpointStatus"] = input.EndpointStatus;
    }
    if (input.Location !== undefined) {
        bodyParams["Location"] = serializeAws_restJson1_1EndpointLocation(input.Location, context);
    }
    if (input.Metrics !== undefined) {
        bodyParams["Metrics"] = serializeAws_restJson1_1MapOf__double(input.Metrics, context);
    }
    if (input.OptOut !== undefined) {
        bodyParams["OptOut"] = input.OptOut;
    }
    if (input.RequestId !== undefined) {
        bodyParams["RequestId"] = input.RequestId;
    }
    if (input.User !== undefined) {
        bodyParams["User"] = serializeAws_restJson1_1EndpointUser(input.User, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1EndpointSendConfiguration = function (input, context) {
    var bodyParams = {};
    if (input.BodyOverride !== undefined) {
        bodyParams["BodyOverride"] = input.BodyOverride;
    }
    if (input.Context !== undefined) {
        bodyParams["Context"] = serializeAws_restJson1_1MapOf__string(input.Context, context);
    }
    if (input.RawContent !== undefined) {
        bodyParams["RawContent"] = input.RawContent;
    }
    if (input.Substitutions !== undefined) {
        bodyParams["Substitutions"] = serializeAws_restJson1_1MapOfListOf__string(input.Substitutions, context);
    }
    if (input.TitleOverride !== undefined) {
        bodyParams["TitleOverride"] = input.TitleOverride;
    }
    return bodyParams;
};
var serializeAws_restJson1_1EndpointUser = function (input, context) {
    var bodyParams = {};
    if (input.UserAttributes !== undefined) {
        bodyParams["UserAttributes"] = serializeAws_restJson1_1MapOfListOf__string(input.UserAttributes, context);
    }
    if (input.UserId !== undefined) {
        bodyParams["UserId"] = input.UserId;
    }
    return bodyParams;
};
var serializeAws_restJson1_1Event = function (input, context) {
    var bodyParams = {};
    if (input.AppPackageName !== undefined) {
        bodyParams["AppPackageName"] = input.AppPackageName;
    }
    if (input.AppTitle !== undefined) {
        bodyParams["AppTitle"] = input.AppTitle;
    }
    if (input.AppVersionCode !== undefined) {
        bodyParams["AppVersionCode"] = input.AppVersionCode;
    }
    if (input.Attributes !== undefined) {
        bodyParams["Attributes"] = serializeAws_restJson1_1MapOf__string(input.Attributes, context);
    }
    if (input.ClientSdkVersion !== undefined) {
        bodyParams["ClientSdkVersion"] = input.ClientSdkVersion;
    }
    if (input.EventType !== undefined) {
        bodyParams["EventType"] = input.EventType;
    }
    if (input.Metrics !== undefined) {
        bodyParams["Metrics"] = serializeAws_restJson1_1MapOf__double(input.Metrics, context);
    }
    if (input.SdkName !== undefined) {
        bodyParams["SdkName"] = input.SdkName;
    }
    if (input.Session !== undefined) {
        bodyParams["Session"] = serializeAws_restJson1_1Session(input.Session, context);
    }
    if (input.Timestamp !== undefined) {
        bodyParams["Timestamp"] = input.Timestamp;
    }
    return bodyParams;
};
var serializeAws_restJson1_1EventCondition = function (input, context) {
    var bodyParams = {};
    if (input.Dimensions !== undefined) {
        bodyParams["Dimensions"] = serializeAws_restJson1_1EventDimensions(input.Dimensions, context);
    }
    if (input.MessageActivity !== undefined) {
        bodyParams["MessageActivity"] = input.MessageActivity;
    }
    return bodyParams;
};
var serializeAws_restJson1_1EventDimensions = function (input, context) {
    var bodyParams = {};
    if (input.Attributes !== undefined) {
        bodyParams["Attributes"] = serializeAws_restJson1_1MapOfAttributeDimension(input.Attributes, context);
    }
    if (input.EventType !== undefined) {
        bodyParams["EventType"] = serializeAws_restJson1_1SetDimension(input.EventType, context);
    }
    if (input.Metrics !== undefined) {
        bodyParams["Metrics"] = serializeAws_restJson1_1MapOfMetricDimension(input.Metrics, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1EventsBatch = function (input, context) {
    var bodyParams = {};
    if (input.Endpoint !== undefined) {
        bodyParams["Endpoint"] = serializeAws_restJson1_1PublicEndpoint(input.Endpoint, context);
    }
    if (input.Events !== undefined) {
        bodyParams["Events"] = serializeAws_restJson1_1MapOfEvent(input.Events, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1EventsRequest = function (input, context) {
    var bodyParams = {};
    if (input.BatchItem !== undefined) {
        bodyParams["BatchItem"] = serializeAws_restJson1_1MapOfEventsBatch(input.BatchItem, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1ExportJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.RoleArn !== undefined) {
        bodyParams["RoleArn"] = input.RoleArn;
    }
    if (input.S3UrlPrefix !== undefined) {
        bodyParams["S3UrlPrefix"] = input.S3UrlPrefix;
    }
    if (input.SegmentId !== undefined) {
        bodyParams["SegmentId"] = input.SegmentId;
    }
    if (input.SegmentVersion !== undefined) {
        bodyParams["SegmentVersion"] = input.SegmentVersion;
    }
    return bodyParams;
};
var serializeAws_restJson1_1GCMChannelRequest = function (input, context) {
    var bodyParams = {};
    if (input.ApiKey !== undefined) {
        bodyParams["ApiKey"] = input.ApiKey;
    }
    if (input.Enabled !== undefined) {
        bodyParams["Enabled"] = input.Enabled;
    }
    return bodyParams;
};
var serializeAws_restJson1_1GCMMessage = function (input, context) {
    var bodyParams = {};
    if (input.Action !== undefined) {
        bodyParams["Action"] = input.Action;
    }
    if (input.Body !== undefined) {
        bodyParams["Body"] = input.Body;
    }
    if (input.CollapseKey !== undefined) {
        bodyParams["CollapseKey"] = input.CollapseKey;
    }
    if (input.Data !== undefined) {
        bodyParams["Data"] = serializeAws_restJson1_1MapOf__string(input.Data, context);
    }
    if (input.IconReference !== undefined) {
        bodyParams["IconReference"] = input.IconReference;
    }
    if (input.ImageIconUrl !== undefined) {
        bodyParams["ImageIconUrl"] = input.ImageIconUrl;
    }
    if (input.ImageUrl !== undefined) {
        bodyParams["ImageUrl"] = input.ImageUrl;
    }
    if (input.Priority !== undefined) {
        bodyParams["Priority"] = input.Priority;
    }
    if (input.RawContent !== undefined) {
        bodyParams["RawContent"] = input.RawContent;
    }
    if (input.RestrictedPackageName !== undefined) {
        bodyParams["RestrictedPackageName"] = input.RestrictedPackageName;
    }
    if (input.SilentPush !== undefined) {
        bodyParams["SilentPush"] = input.SilentPush;
    }
    if (input.SmallImageIconUrl !== undefined) {
        bodyParams["SmallImageIconUrl"] = input.SmallImageIconUrl;
    }
    if (input.Sound !== undefined) {
        bodyParams["Sound"] = input.Sound;
    }
    if (input.Substitutions !== undefined) {
        bodyParams["Substitutions"] = serializeAws_restJson1_1MapOfListOf__string(input.Substitutions, context);
    }
    if (input.TimeToLive !== undefined) {
        bodyParams["TimeToLive"] = input.TimeToLive;
    }
    if (input.Title !== undefined) {
        bodyParams["Title"] = input.Title;
    }
    if (input.Url !== undefined) {
        bodyParams["Url"] = input.Url;
    }
    return bodyParams;
};
var serializeAws_restJson1_1GPSCoordinates = function (input, context) {
    var bodyParams = {};
    if (input.Latitude !== undefined) {
        bodyParams["Latitude"] = input.Latitude;
    }
    if (input.Longitude !== undefined) {
        bodyParams["Longitude"] = input.Longitude;
    }
    return bodyParams;
};
var serializeAws_restJson1_1GPSPointDimension = function (input, context) {
    var bodyParams = {};
    if (input.Coordinates !== undefined) {
        bodyParams["Coordinates"] = serializeAws_restJson1_1GPSCoordinates(input.Coordinates, context);
    }
    if (input.RangeInKilometers !== undefined) {
        bodyParams["RangeInKilometers"] = input.RangeInKilometers;
    }
    return bodyParams;
};
var serializeAws_restJson1_1HoldoutActivity = function (input, context) {
    var bodyParams = {};
    if (input.NextActivity !== undefined) {
        bodyParams["NextActivity"] = input.NextActivity;
    }
    if (input.Percentage !== undefined) {
        bodyParams["Percentage"] = input.Percentage;
    }
    return bodyParams;
};
var serializeAws_restJson1_1ImportJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.DefineSegment !== undefined) {
        bodyParams["DefineSegment"] = input.DefineSegment;
    }
    if (input.ExternalId !== undefined) {
        bodyParams["ExternalId"] = input.ExternalId;
    }
    if (input.Format !== undefined) {
        bodyParams["Format"] = input.Format;
    }
    if (input.RegisterEndpoints !== undefined) {
        bodyParams["RegisterEndpoints"] = input.RegisterEndpoints;
    }
    if (input.RoleArn !== undefined) {
        bodyParams["RoleArn"] = input.RoleArn;
    }
    if (input.S3Url !== undefined) {
        bodyParams["S3Url"] = input.S3Url;
    }
    if (input.SegmentId !== undefined) {
        bodyParams["SegmentId"] = input.SegmentId;
    }
    if (input.SegmentName !== undefined) {
        bodyParams["SegmentName"] = input.SegmentName;
    }
    return bodyParams;
};
var serializeAws_restJson1_1JourneyEmailMessage = function (input, context) {
    var bodyParams = {};
    if (input.FromAddress !== undefined) {
        bodyParams["FromAddress"] = input.FromAddress;
    }
    return bodyParams;
};
var serializeAws_restJson1_1JourneyLimits = function (input, context) {
    var bodyParams = {};
    if (input.DailyCap !== undefined) {
        bodyParams["DailyCap"] = input.DailyCap;
    }
    if (input.EndpointReentryCap !== undefined) {
        bodyParams["EndpointReentryCap"] = input.EndpointReentryCap;
    }
    if (input.MessagesPerSecond !== undefined) {
        bodyParams["MessagesPerSecond"] = input.MessagesPerSecond;
    }
    return bodyParams;
};
var serializeAws_restJson1_1JourneySchedule = function (input, context) {
    var bodyParams = {};
    if (input.EndTime !== undefined) {
        bodyParams["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.StartTime !== undefined) {
        bodyParams["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Timezone !== undefined) {
        bodyParams["Timezone"] = input.Timezone;
    }
    return bodyParams;
};
var serializeAws_restJson1_1JourneyStateRequest = function (input, context) {
    var bodyParams = {};
    if (input.State !== undefined) {
        bodyParams["State"] = input.State;
    }
    return bodyParams;
};
var serializeAws_restJson1_1ListOfEndpointBatchItem = function (input, context) {
    var e_1, _a;
    var contents = [];
    try {
        for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
            var entry = input_1_1.value;
            contents.push(serializeAws_restJson1_1EndpointBatchItem(entry, context));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return contents;
};
var serializeAws_restJson1_1ListOfMultiConditionalBranch = function (input, context) {
    var e_2, _a;
    var contents = [];
    try {
        for (var input_2 = __values(input), input_2_1 = input_2.next(); !input_2_1.done; input_2_1 = input_2.next()) {
            var entry = input_2_1.value;
            contents.push(serializeAws_restJson1_1MultiConditionalBranch(entry, context));
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (input_2_1 && !input_2_1.done && (_a = input_2.return)) _a.call(input_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return contents;
};
var serializeAws_restJson1_1ListOfRandomSplitEntry = function (input, context) {
    var e_3, _a;
    var contents = [];
    try {
        for (var input_3 = __values(input), input_3_1 = input_3.next(); !input_3_1.done; input_3_1 = input_3.next()) {
            var entry = input_3_1.value;
            contents.push(serializeAws_restJson1_1RandomSplitEntry(entry, context));
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (input_3_1 && !input_3_1.done && (_a = input_3.return)) _a.call(input_3);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return contents;
};
var serializeAws_restJson1_1ListOfSegmentDimensions = function (input, context) {
    var e_4, _a;
    var contents = [];
    try {
        for (var input_4 = __values(input), input_4_1 = input_4.next(); !input_4_1.done; input_4_1 = input_4.next()) {
            var entry = input_4_1.value;
            contents.push(serializeAws_restJson1_1SegmentDimensions(entry, context));
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (input_4_1 && !input_4_1.done && (_a = input_4.return)) _a.call(input_4);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return contents;
};
var serializeAws_restJson1_1ListOfSegmentGroup = function (input, context) {
    var e_5, _a;
    var contents = [];
    try {
        for (var input_5 = __values(input), input_5_1 = input_5.next(); !input_5_1.done; input_5_1 = input_5.next()) {
            var entry = input_5_1.value;
            contents.push(serializeAws_restJson1_1SegmentGroup(entry, context));
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (input_5_1 && !input_5_1.done && (_a = input_5.return)) _a.call(input_5);
        }
        finally { if (e_5) throw e_5.error; }
    }
    return contents;
};
var serializeAws_restJson1_1ListOfSegmentReference = function (input, context) {
    var e_6, _a;
    var contents = [];
    try {
        for (var input_6 = __values(input), input_6_1 = input_6.next(); !input_6_1.done; input_6_1 = input_6.next()) {
            var entry = input_6_1.value;
            contents.push(serializeAws_restJson1_1SegmentReference(entry, context));
        }
    }
    catch (e_6_1) { e_6 = { error: e_6_1 }; }
    finally {
        try {
            if (input_6_1 && !input_6_1.done && (_a = input_6.return)) _a.call(input_6);
        }
        finally { if (e_6) throw e_6.error; }
    }
    return contents;
};
var serializeAws_restJson1_1ListOfSimpleCondition = function (input, context) {
    var e_7, _a;
    var contents = [];
    try {
        for (var input_7 = __values(input), input_7_1 = input_7.next(); !input_7_1.done; input_7_1 = input_7.next()) {
            var entry = input_7_1.value;
            contents.push(serializeAws_restJson1_1SimpleCondition(entry, context));
        }
    }
    catch (e_7_1) { e_7 = { error: e_7_1 }; }
    finally {
        try {
            if (input_7_1 && !input_7_1.done && (_a = input_7.return)) _a.call(input_7);
        }
        finally { if (e_7) throw e_7.error; }
    }
    return contents;
};
var serializeAws_restJson1_1ListOfWriteTreatmentResource = function (input, context) {
    var e_8, _a;
    var contents = [];
    try {
        for (var input_8 = __values(input), input_8_1 = input_8.next(); !input_8_1.done; input_8_1 = input_8.next()) {
            var entry = input_8_1.value;
            contents.push(serializeAws_restJson1_1WriteTreatmentResource(entry, context));
        }
    }
    catch (e_8_1) { e_8 = { error: e_8_1 }; }
    finally {
        try {
            if (input_8_1 && !input_8_1.done && (_a = input_8.return)) _a.call(input_8);
        }
        finally { if (e_8) throw e_8.error; }
    }
    return contents;
};
var serializeAws_restJson1_1ListOf__string = function (input, context) {
    var e_9, _a;
    var contents = [];
    try {
        for (var input_9 = __values(input), input_9_1 = input_9.next(); !input_9_1.done; input_9_1 = input_9.next()) {
            var entry = input_9_1.value;
            contents.push(entry);
        }
    }
    catch (e_9_1) { e_9 = { error: e_9_1 }; }
    finally {
        try {
            if (input_9_1 && !input_9_1.done && (_a = input_9.return)) _a.call(input_9);
        }
        finally { if (e_9) throw e_9.error; }
    }
    return contents;
};
var serializeAws_restJson1_1MapOfActivity = function (input, context) {
    var mapParams = {};
    Object.keys(input).forEach(function (key) {
        mapParams[key] = serializeAws_restJson1_1Activity(input[key], context);
    });
    return mapParams;
};
var serializeAws_restJson1_1MapOfAddressConfiguration = function (input, context) {
    var mapParams = {};
    Object.keys(input).forEach(function (key) {
        mapParams[key] = serializeAws_restJson1_1AddressConfiguration(input[key], context);
    });
    return mapParams;
};
var serializeAws_restJson1_1MapOfAttributeDimension = function (input, context) {
    var mapParams = {};
    Object.keys(input).forEach(function (key) {
        mapParams[key] = serializeAws_restJson1_1AttributeDimension(input[key], context);
    });
    return mapParams;
};
var serializeAws_restJson1_1MapOfEndpointSendConfiguration = function (input, context) {
    var mapParams = {};
    Object.keys(input).forEach(function (key) {
        mapParams[key] = serializeAws_restJson1_1EndpointSendConfiguration(input[key], context);
    });
    return mapParams;
};
var serializeAws_restJson1_1MapOfEvent = function (input, context) {
    var mapParams = {};
    Object.keys(input).forEach(function (key) {
        mapParams[key] = serializeAws_restJson1_1Event(input[key], context);
    });
    return mapParams;
};
var serializeAws_restJson1_1MapOfEventsBatch = function (input, context) {
    var mapParams = {};
    Object.keys(input).forEach(function (key) {
        mapParams[key] = serializeAws_restJson1_1EventsBatch(input[key], context);
    });
    return mapParams;
};
var serializeAws_restJson1_1MapOfListOf__string = function (input, context) {
    var mapParams = {};
    Object.keys(input).forEach(function (key) {
        mapParams[key] = serializeAws_restJson1_1ListOf__string(input[key], context);
    });
    return mapParams;
};
var serializeAws_restJson1_1MapOfMetricDimension = function (input, context) {
    var mapParams = {};
    Object.keys(input).forEach(function (key) {
        mapParams[key] = serializeAws_restJson1_1MetricDimension(input[key], context);
    });
    return mapParams;
};
var serializeAws_restJson1_1MapOf__double = function (input, context) {
    var mapParams = {};
    Object.keys(input).forEach(function (key) {
        mapParams[key] = input[key];
    });
    return mapParams;
};
var serializeAws_restJson1_1MapOf__string = function (input, context) {
    var mapParams = {};
    Object.keys(input).forEach(function (key) {
        mapParams[key] = input[key];
    });
    return mapParams;
};
var serializeAws_restJson1_1Message = function (input, context) {
    var bodyParams = {};
    if (input.Action !== undefined) {
        bodyParams["Action"] = input.Action;
    }
    if (input.Body !== undefined) {
        bodyParams["Body"] = input.Body;
    }
    if (input.ImageIconUrl !== undefined) {
        bodyParams["ImageIconUrl"] = input.ImageIconUrl;
    }
    if (input.ImageSmallIconUrl !== undefined) {
        bodyParams["ImageSmallIconUrl"] = input.ImageSmallIconUrl;
    }
    if (input.ImageUrl !== undefined) {
        bodyParams["ImageUrl"] = input.ImageUrl;
    }
    if (input.JsonBody !== undefined) {
        bodyParams["JsonBody"] = input.JsonBody;
    }
    if (input.MediaUrl !== undefined) {
        bodyParams["MediaUrl"] = input.MediaUrl;
    }
    if (input.RawContent !== undefined) {
        bodyParams["RawContent"] = input.RawContent;
    }
    if (input.SilentPush !== undefined) {
        bodyParams["SilentPush"] = input.SilentPush;
    }
    if (input.TimeToLive !== undefined) {
        bodyParams["TimeToLive"] = input.TimeToLive;
    }
    if (input.Title !== undefined) {
        bodyParams["Title"] = input.Title;
    }
    if (input.Url !== undefined) {
        bodyParams["Url"] = input.Url;
    }
    return bodyParams;
};
var serializeAws_restJson1_1MessageConfiguration = function (input, context) {
    var bodyParams = {};
    if (input.ADMMessage !== undefined) {
        bodyParams["ADMMessage"] = serializeAws_restJson1_1Message(input.ADMMessage, context);
    }
    if (input.APNSMessage !== undefined) {
        bodyParams["APNSMessage"] = serializeAws_restJson1_1Message(input.APNSMessage, context);
    }
    if (input.BaiduMessage !== undefined) {
        bodyParams["BaiduMessage"] = serializeAws_restJson1_1Message(input.BaiduMessage, context);
    }
    if (input.DefaultMessage !== undefined) {
        bodyParams["DefaultMessage"] = serializeAws_restJson1_1Message(input.DefaultMessage, context);
    }
    if (input.EmailMessage !== undefined) {
        bodyParams["EmailMessage"] = serializeAws_restJson1_1CampaignEmailMessage(input.EmailMessage, context);
    }
    if (input.GCMMessage !== undefined) {
        bodyParams["GCMMessage"] = serializeAws_restJson1_1Message(input.GCMMessage, context);
    }
    if (input.SMSMessage !== undefined) {
        bodyParams["SMSMessage"] = serializeAws_restJson1_1CampaignSmsMessage(input.SMSMessage, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1MessageRequest = function (input, context) {
    var bodyParams = {};
    if (input.Addresses !== undefined) {
        bodyParams["Addresses"] = serializeAws_restJson1_1MapOfAddressConfiguration(input.Addresses, context);
    }
    if (input.Context !== undefined) {
        bodyParams["Context"] = serializeAws_restJson1_1MapOf__string(input.Context, context);
    }
    if (input.Endpoints !== undefined) {
        bodyParams["Endpoints"] = serializeAws_restJson1_1MapOfEndpointSendConfiguration(input.Endpoints, context);
    }
    if (input.MessageConfiguration !== undefined) {
        bodyParams["MessageConfiguration"] = serializeAws_restJson1_1DirectMessageConfiguration(input.MessageConfiguration, context);
    }
    if (input.TemplateConfiguration !== undefined) {
        bodyParams["TemplateConfiguration"] = serializeAws_restJson1_1TemplateConfiguration(input.TemplateConfiguration, context);
    }
    if (input.TraceId !== undefined) {
        bodyParams["TraceId"] = input.TraceId;
    }
    return bodyParams;
};
var serializeAws_restJson1_1MetricDimension = function (input, context) {
    var bodyParams = {};
    if (input.ComparisonOperator !== undefined) {
        bodyParams["ComparisonOperator"] = input.ComparisonOperator;
    }
    if (input.Value !== undefined) {
        bodyParams["Value"] = input.Value;
    }
    return bodyParams;
};
var serializeAws_restJson1_1MultiConditionalBranch = function (input, context) {
    var bodyParams = {};
    if (input.Condition !== undefined) {
        bodyParams["Condition"] = serializeAws_restJson1_1SimpleCondition(input.Condition, context);
    }
    if (input.NextActivity !== undefined) {
        bodyParams["NextActivity"] = input.NextActivity;
    }
    return bodyParams;
};
var serializeAws_restJson1_1MultiConditionalSplitActivity = function (input, context) {
    var bodyParams = {};
    if (input.Branches !== undefined) {
        bodyParams["Branches"] = serializeAws_restJson1_1ListOfMultiConditionalBranch(input.Branches, context);
    }
    if (input.DefaultActivity !== undefined) {
        bodyParams["DefaultActivity"] = input.DefaultActivity;
    }
    if (input.EvaluationWaitTime !== undefined) {
        bodyParams["EvaluationWaitTime"] = serializeAws_restJson1_1WaitTime(input.EvaluationWaitTime, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1NumberValidateRequest = function (input, context) {
    var bodyParams = {};
    if (input.IsoCountryCode !== undefined) {
        bodyParams["IsoCountryCode"] = input.IsoCountryCode;
    }
    if (input.PhoneNumber !== undefined) {
        bodyParams["PhoneNumber"] = input.PhoneNumber;
    }
    return bodyParams;
};
var serializeAws_restJson1_1PublicEndpoint = function (input, context) {
    var bodyParams = {};
    if (input.Address !== undefined) {
        bodyParams["Address"] = input.Address;
    }
    if (input.Attributes !== undefined) {
        bodyParams["Attributes"] = serializeAws_restJson1_1MapOfListOf__string(input.Attributes, context);
    }
    if (input.ChannelType !== undefined) {
        bodyParams["ChannelType"] = input.ChannelType;
    }
    if (input.Demographic !== undefined) {
        bodyParams["Demographic"] = serializeAws_restJson1_1EndpointDemographic(input.Demographic, context);
    }
    if (input.EffectiveDate !== undefined) {
        bodyParams["EffectiveDate"] = input.EffectiveDate;
    }
    if (input.EndpointStatus !== undefined) {
        bodyParams["EndpointStatus"] = input.EndpointStatus;
    }
    if (input.Location !== undefined) {
        bodyParams["Location"] = serializeAws_restJson1_1EndpointLocation(input.Location, context);
    }
    if (input.Metrics !== undefined) {
        bodyParams["Metrics"] = serializeAws_restJson1_1MapOf__double(input.Metrics, context);
    }
    if (input.OptOut !== undefined) {
        bodyParams["OptOut"] = input.OptOut;
    }
    if (input.RequestId !== undefined) {
        bodyParams["RequestId"] = input.RequestId;
    }
    if (input.User !== undefined) {
        bodyParams["User"] = serializeAws_restJson1_1EndpointUser(input.User, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1PushNotificationTemplateRequest = function (input, context) {
    var bodyParams = {};
    if (input.ADM !== undefined) {
        bodyParams["ADM"] = serializeAws_restJson1_1AndroidPushNotificationTemplate(input.ADM, context);
    }
    if (input.APNS !== undefined) {
        bodyParams["APNS"] = serializeAws_restJson1_1APNSPushNotificationTemplate(input.APNS, context);
    }
    if (input.Baidu !== undefined) {
        bodyParams["Baidu"] = serializeAws_restJson1_1AndroidPushNotificationTemplate(input.Baidu, context);
    }
    if (input.Default !== undefined) {
        bodyParams["Default"] = serializeAws_restJson1_1DefaultPushNotificationTemplate(input.Default, context);
    }
    if (input.DefaultSubstitutions !== undefined) {
        bodyParams["DefaultSubstitutions"] = input.DefaultSubstitutions;
    }
    if (input.GCM !== undefined) {
        bodyParams["GCM"] = serializeAws_restJson1_1AndroidPushNotificationTemplate(input.GCM, context);
    }
    if (input.TemplateDescription !== undefined) {
        bodyParams["TemplateDescription"] = input.TemplateDescription;
    }
    if (input.tags !== undefined) {
        bodyParams["tags"] = serializeAws_restJson1_1MapOf__string(input.tags, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1QuietTime = function (input, context) {
    var bodyParams = {};
    if (input.End !== undefined) {
        bodyParams["End"] = input.End;
    }
    if (input.Start !== undefined) {
        bodyParams["Start"] = input.Start;
    }
    return bodyParams;
};
var serializeAws_restJson1_1RandomSplitActivity = function (input, context) {
    var bodyParams = {};
    if (input.Branches !== undefined) {
        bodyParams["Branches"] = serializeAws_restJson1_1ListOfRandomSplitEntry(input.Branches, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1RandomSplitEntry = function (input, context) {
    var bodyParams = {};
    if (input.NextActivity !== undefined) {
        bodyParams["NextActivity"] = input.NextActivity;
    }
    if (input.Percentage !== undefined) {
        bodyParams["Percentage"] = input.Percentage;
    }
    return bodyParams;
};
var serializeAws_restJson1_1RawEmail = function (input, context) {
    var bodyParams = {};
    if (input.Data !== undefined) {
        bodyParams["Data"] = context.base64Encoder(input.Data);
    }
    return bodyParams;
};
var serializeAws_restJson1_1RecencyDimension = function (input, context) {
    var bodyParams = {};
    if (input.Duration !== undefined) {
        bodyParams["Duration"] = input.Duration;
    }
    if (input.RecencyType !== undefined) {
        bodyParams["RecencyType"] = input.RecencyType;
    }
    return bodyParams;
};
var serializeAws_restJson1_1SMSChannelRequest = function (input, context) {
    var bodyParams = {};
    if (input.Enabled !== undefined) {
        bodyParams["Enabled"] = input.Enabled;
    }
    if (input.SenderId !== undefined) {
        bodyParams["SenderId"] = input.SenderId;
    }
    if (input.ShortCode !== undefined) {
        bodyParams["ShortCode"] = input.ShortCode;
    }
    return bodyParams;
};
var serializeAws_restJson1_1SMSMessage = function (input, context) {
    var bodyParams = {};
    if (input.Body !== undefined) {
        bodyParams["Body"] = input.Body;
    }
    if (input.Keyword !== undefined) {
        bodyParams["Keyword"] = input.Keyword;
    }
    if (input.MessageType !== undefined) {
        bodyParams["MessageType"] = input.MessageType;
    }
    if (input.OriginationNumber !== undefined) {
        bodyParams["OriginationNumber"] = input.OriginationNumber;
    }
    if (input.SenderId !== undefined) {
        bodyParams["SenderId"] = input.SenderId;
    }
    if (input.Substitutions !== undefined) {
        bodyParams["Substitutions"] = serializeAws_restJson1_1MapOfListOf__string(input.Substitutions, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1SMSTemplateRequest = function (input, context) {
    var bodyParams = {};
    if (input.Body !== undefined) {
        bodyParams["Body"] = input.Body;
    }
    if (input.DefaultSubstitutions !== undefined) {
        bodyParams["DefaultSubstitutions"] = input.DefaultSubstitutions;
    }
    if (input.TemplateDescription !== undefined) {
        bodyParams["TemplateDescription"] = input.TemplateDescription;
    }
    if (input.tags !== undefined) {
        bodyParams["tags"] = serializeAws_restJson1_1MapOf__string(input.tags, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1Schedule = function (input, context) {
    var bodyParams = {};
    if (input.EndTime !== undefined) {
        bodyParams["EndTime"] = input.EndTime;
    }
    if (input.EventFilter !== undefined) {
        bodyParams["EventFilter"] = serializeAws_restJson1_1CampaignEventFilter(input.EventFilter, context);
    }
    if (input.Frequency !== undefined) {
        bodyParams["Frequency"] = input.Frequency;
    }
    if (input.IsLocalTime !== undefined) {
        bodyParams["IsLocalTime"] = input.IsLocalTime;
    }
    if (input.QuietTime !== undefined) {
        bodyParams["QuietTime"] = serializeAws_restJson1_1QuietTime(input.QuietTime, context);
    }
    if (input.StartTime !== undefined) {
        bodyParams["StartTime"] = input.StartTime;
    }
    if (input.Timezone !== undefined) {
        bodyParams["Timezone"] = input.Timezone;
    }
    return bodyParams;
};
var serializeAws_restJson1_1SegmentBehaviors = function (input, context) {
    var bodyParams = {};
    if (input.Recency !== undefined) {
        bodyParams["Recency"] = serializeAws_restJson1_1RecencyDimension(input.Recency, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1SegmentCondition = function (input, context) {
    var bodyParams = {};
    if (input.SegmentId !== undefined) {
        bodyParams["SegmentId"] = input.SegmentId;
    }
    return bodyParams;
};
var serializeAws_restJson1_1SegmentDemographics = function (input, context) {
    var bodyParams = {};
    if (input.AppVersion !== undefined) {
        bodyParams["AppVersion"] = serializeAws_restJson1_1SetDimension(input.AppVersion, context);
    }
    if (input.Channel !== undefined) {
        bodyParams["Channel"] = serializeAws_restJson1_1SetDimension(input.Channel, context);
    }
    if (input.DeviceType !== undefined) {
        bodyParams["DeviceType"] = serializeAws_restJson1_1SetDimension(input.DeviceType, context);
    }
    if (input.Make !== undefined) {
        bodyParams["Make"] = serializeAws_restJson1_1SetDimension(input.Make, context);
    }
    if (input.Model !== undefined) {
        bodyParams["Model"] = serializeAws_restJson1_1SetDimension(input.Model, context);
    }
    if (input.Platform !== undefined) {
        bodyParams["Platform"] = serializeAws_restJson1_1SetDimension(input.Platform, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1SegmentDimensions = function (input, context) {
    var bodyParams = {};
    if (input.Attributes !== undefined) {
        bodyParams["Attributes"] = serializeAws_restJson1_1MapOfAttributeDimension(input.Attributes, context);
    }
    if (input.Behavior !== undefined) {
        bodyParams["Behavior"] = serializeAws_restJson1_1SegmentBehaviors(input.Behavior, context);
    }
    if (input.Demographic !== undefined) {
        bodyParams["Demographic"] = serializeAws_restJson1_1SegmentDemographics(input.Demographic, context);
    }
    if (input.Location !== undefined) {
        bodyParams["Location"] = serializeAws_restJson1_1SegmentLocation(input.Location, context);
    }
    if (input.Metrics !== undefined) {
        bodyParams["Metrics"] = serializeAws_restJson1_1MapOfMetricDimension(input.Metrics, context);
    }
    if (input.UserAttributes !== undefined) {
        bodyParams["UserAttributes"] = serializeAws_restJson1_1MapOfAttributeDimension(input.UserAttributes, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1SegmentGroup = function (input, context) {
    var bodyParams = {};
    if (input.Dimensions !== undefined) {
        bodyParams["Dimensions"] = serializeAws_restJson1_1ListOfSegmentDimensions(input.Dimensions, context);
    }
    if (input.SourceSegments !== undefined) {
        bodyParams["SourceSegments"] = serializeAws_restJson1_1ListOfSegmentReference(input.SourceSegments, context);
    }
    if (input.SourceType !== undefined) {
        bodyParams["SourceType"] = input.SourceType;
    }
    if (input.Type !== undefined) {
        bodyParams["Type"] = input.Type;
    }
    return bodyParams;
};
var serializeAws_restJson1_1SegmentGroupList = function (input, context) {
    var bodyParams = {};
    if (input.Groups !== undefined) {
        bodyParams["Groups"] = serializeAws_restJson1_1ListOfSegmentGroup(input.Groups, context);
    }
    if (input.Include !== undefined) {
        bodyParams["Include"] = input.Include;
    }
    return bodyParams;
};
var serializeAws_restJson1_1SegmentLocation = function (input, context) {
    var bodyParams = {};
    if (input.Country !== undefined) {
        bodyParams["Country"] = serializeAws_restJson1_1SetDimension(input.Country, context);
    }
    if (input.GPSPoint !== undefined) {
        bodyParams["GPSPoint"] = serializeAws_restJson1_1GPSPointDimension(input.GPSPoint, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1SegmentReference = function (input, context) {
    var bodyParams = {};
    if (input.Id !== undefined) {
        bodyParams["Id"] = input.Id;
    }
    if (input.Version !== undefined) {
        bodyParams["Version"] = input.Version;
    }
    return bodyParams;
};
var serializeAws_restJson1_1SendUsersMessageRequest = function (input, context) {
    var bodyParams = {};
    if (input.Context !== undefined) {
        bodyParams["Context"] = serializeAws_restJson1_1MapOf__string(input.Context, context);
    }
    if (input.MessageConfiguration !== undefined) {
        bodyParams["MessageConfiguration"] = serializeAws_restJson1_1DirectMessageConfiguration(input.MessageConfiguration, context);
    }
    if (input.TemplateConfiguration !== undefined) {
        bodyParams["TemplateConfiguration"] = serializeAws_restJson1_1TemplateConfiguration(input.TemplateConfiguration, context);
    }
    if (input.TraceId !== undefined) {
        bodyParams["TraceId"] = input.TraceId;
    }
    if (input.Users !== undefined) {
        bodyParams["Users"] = serializeAws_restJson1_1MapOfEndpointSendConfiguration(input.Users, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1Session = function (input, context) {
    var bodyParams = {};
    if (input.Duration !== undefined) {
        bodyParams["Duration"] = input.Duration;
    }
    if (input.Id !== undefined) {
        bodyParams["Id"] = input.Id;
    }
    if (input.StartTimestamp !== undefined) {
        bodyParams["StartTimestamp"] = input.StartTimestamp;
    }
    if (input.StopTimestamp !== undefined) {
        bodyParams["StopTimestamp"] = input.StopTimestamp;
    }
    return bodyParams;
};
var serializeAws_restJson1_1SetDimension = function (input, context) {
    var bodyParams = {};
    if (input.DimensionType !== undefined) {
        bodyParams["DimensionType"] = input.DimensionType;
    }
    if (input.Values !== undefined) {
        bodyParams["Values"] = serializeAws_restJson1_1ListOf__string(input.Values, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1SimpleCondition = function (input, context) {
    var bodyParams = {};
    if (input.EventCondition !== undefined) {
        bodyParams["EventCondition"] = serializeAws_restJson1_1EventCondition(input.EventCondition, context);
    }
    if (input.SegmentCondition !== undefined) {
        bodyParams["SegmentCondition"] = serializeAws_restJson1_1SegmentCondition(input.SegmentCondition, context);
    }
    if (input.SegmentDimensions !== undefined) {
        bodyParams["segmentDimensions"] = serializeAws_restJson1_1SegmentDimensions(input.SegmentDimensions, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1SimpleEmail = function (input, context) {
    var bodyParams = {};
    if (input.HtmlPart !== undefined) {
        bodyParams["HtmlPart"] = serializeAws_restJson1_1SimpleEmailPart(input.HtmlPart, context);
    }
    if (input.Subject !== undefined) {
        bodyParams["Subject"] = serializeAws_restJson1_1SimpleEmailPart(input.Subject, context);
    }
    if (input.TextPart !== undefined) {
        bodyParams["TextPart"] = serializeAws_restJson1_1SimpleEmailPart(input.TextPart, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1SimpleEmailPart = function (input, context) {
    var bodyParams = {};
    if (input.Charset !== undefined) {
        bodyParams["Charset"] = input.Charset;
    }
    if (input.Data !== undefined) {
        bodyParams["Data"] = input.Data;
    }
    return bodyParams;
};
var serializeAws_restJson1_1StartCondition = function (input, context) {
    var bodyParams = {};
    if (input.Description !== undefined) {
        bodyParams["Description"] = input.Description;
    }
    if (input.SegmentStartCondition !== undefined) {
        bodyParams["SegmentStartCondition"] = serializeAws_restJson1_1SegmentCondition(input.SegmentStartCondition, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1TagsModel = function (input, context) {
    var bodyParams = {};
    if (input.tags !== undefined) {
        bodyParams["tags"] = serializeAws_restJson1_1MapOf__string(input.tags, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1Template = function (input, context) {
    var bodyParams = {};
    if (input.Name !== undefined) {
        bodyParams["Name"] = input.Name;
    }
    if (input.Version !== undefined) {
        bodyParams["Version"] = input.Version;
    }
    return bodyParams;
};
var serializeAws_restJson1_1TemplateActiveVersionRequest = function (input, context) {
    var bodyParams = {};
    if (input.Version !== undefined) {
        bodyParams["Version"] = input.Version;
    }
    return bodyParams;
};
var serializeAws_restJson1_1TemplateConfiguration = function (input, context) {
    var bodyParams = {};
    if (input.EmailTemplate !== undefined) {
        bodyParams["EmailTemplate"] = serializeAws_restJson1_1Template(input.EmailTemplate, context);
    }
    if (input.PushTemplate !== undefined) {
        bodyParams["PushTemplate"] = serializeAws_restJson1_1Template(input.PushTemplate, context);
    }
    if (input.SMSTemplate !== undefined) {
        bodyParams["SMSTemplate"] = serializeAws_restJson1_1Template(input.SMSTemplate, context);
    }
    if (input.VoiceTemplate !== undefined) {
        bodyParams["VoiceTemplate"] = serializeAws_restJson1_1Template(input.VoiceTemplate, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1UpdateAttributesRequest = function (input, context) {
    var bodyParams = {};
    if (input.Blacklist !== undefined) {
        bodyParams["Blacklist"] = serializeAws_restJson1_1ListOf__string(input.Blacklist, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1VoiceChannelRequest = function (input, context) {
    var bodyParams = {};
    if (input.Enabled !== undefined) {
        bodyParams["Enabled"] = input.Enabled;
    }
    return bodyParams;
};
var serializeAws_restJson1_1VoiceMessage = function (input, context) {
    var bodyParams = {};
    if (input.Body !== undefined) {
        bodyParams["Body"] = input.Body;
    }
    if (input.LanguageCode !== undefined) {
        bodyParams["LanguageCode"] = input.LanguageCode;
    }
    if (input.OriginationNumber !== undefined) {
        bodyParams["OriginationNumber"] = input.OriginationNumber;
    }
    if (input.Substitutions !== undefined) {
        bodyParams["Substitutions"] = serializeAws_restJson1_1MapOfListOf__string(input.Substitutions, context);
    }
    if (input.VoiceId !== undefined) {
        bodyParams["VoiceId"] = input.VoiceId;
    }
    return bodyParams;
};
var serializeAws_restJson1_1VoiceTemplateRequest = function (input, context) {
    var bodyParams = {};
    if (input.Body !== undefined) {
        bodyParams["Body"] = input.Body;
    }
    if (input.DefaultSubstitutions !== undefined) {
        bodyParams["DefaultSubstitutions"] = input.DefaultSubstitutions;
    }
    if (input.LanguageCode !== undefined) {
        bodyParams["LanguageCode"] = input.LanguageCode;
    }
    if (input.TemplateDescription !== undefined) {
        bodyParams["TemplateDescription"] = input.TemplateDescription;
    }
    if (input.VoiceId !== undefined) {
        bodyParams["VoiceId"] = input.VoiceId;
    }
    if (input.tags !== undefined) {
        bodyParams["tags"] = serializeAws_restJson1_1MapOf__string(input.tags, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1WaitActivity = function (input, context) {
    var bodyParams = {};
    if (input.NextActivity !== undefined) {
        bodyParams["NextActivity"] = input.NextActivity;
    }
    if (input.WaitTime !== undefined) {
        bodyParams["WaitTime"] = serializeAws_restJson1_1WaitTime(input.WaitTime, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1WaitTime = function (input, context) {
    var bodyParams = {};
    if (input.WaitFor !== undefined) {
        bodyParams["WaitFor"] = input.WaitFor;
    }
    if (input.WaitUntil !== undefined) {
        bodyParams["WaitUntil"] = input.WaitUntil;
    }
    return bodyParams;
};
var serializeAws_restJson1_1WriteApplicationSettingsRequest = function (input, context) {
    var bodyParams = {};
    if (input.CampaignHook !== undefined) {
        bodyParams["CampaignHook"] = serializeAws_restJson1_1CampaignHook(input.CampaignHook, context);
    }
    if (input.CloudWatchMetricsEnabled !== undefined) {
        bodyParams["CloudWatchMetricsEnabled"] = input.CloudWatchMetricsEnabled;
    }
    if (input.Limits !== undefined) {
        bodyParams["Limits"] = serializeAws_restJson1_1CampaignLimits(input.Limits, context);
    }
    if (input.QuietTime !== undefined) {
        bodyParams["QuietTime"] = serializeAws_restJson1_1QuietTime(input.QuietTime, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1WriteCampaignRequest = function (input, context) {
    var bodyParams = {};
    if (input.AdditionalTreatments !== undefined) {
        bodyParams["AdditionalTreatments"] = serializeAws_restJson1_1ListOfWriteTreatmentResource(input.AdditionalTreatments, context);
    }
    if (input.Description !== undefined) {
        bodyParams["Description"] = input.Description;
    }
    if (input.HoldoutPercent !== undefined) {
        bodyParams["HoldoutPercent"] = input.HoldoutPercent;
    }
    if (input.Hook !== undefined) {
        bodyParams["Hook"] = serializeAws_restJson1_1CampaignHook(input.Hook, context);
    }
    if (input.IsPaused !== undefined) {
        bodyParams["IsPaused"] = input.IsPaused;
    }
    if (input.Limits !== undefined) {
        bodyParams["Limits"] = serializeAws_restJson1_1CampaignLimits(input.Limits, context);
    }
    if (input.MessageConfiguration !== undefined) {
        bodyParams["MessageConfiguration"] = serializeAws_restJson1_1MessageConfiguration(input.MessageConfiguration, context);
    }
    if (input.Name !== undefined) {
        bodyParams["Name"] = input.Name;
    }
    if (input.Schedule !== undefined) {
        bodyParams["Schedule"] = serializeAws_restJson1_1Schedule(input.Schedule, context);
    }
    if (input.SegmentId !== undefined) {
        bodyParams["SegmentId"] = input.SegmentId;
    }
    if (input.SegmentVersion !== undefined) {
        bodyParams["SegmentVersion"] = input.SegmentVersion;
    }
    if (input.TemplateConfiguration !== undefined) {
        bodyParams["TemplateConfiguration"] = serializeAws_restJson1_1TemplateConfiguration(input.TemplateConfiguration, context);
    }
    if (input.TreatmentDescription !== undefined) {
        bodyParams["TreatmentDescription"] = input.TreatmentDescription;
    }
    if (input.TreatmentName !== undefined) {
        bodyParams["TreatmentName"] = input.TreatmentName;
    }
    if (input.tags !== undefined) {
        bodyParams["tags"] = serializeAws_restJson1_1MapOf__string(input.tags, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1WriteEventStream = function (input, context) {
    var bodyParams = {};
    if (input.DestinationStreamArn !== undefined) {
        bodyParams["DestinationStreamArn"] = input.DestinationStreamArn;
    }
    if (input.RoleArn !== undefined) {
        bodyParams["RoleArn"] = input.RoleArn;
    }
    return bodyParams;
};
var serializeAws_restJson1_1WriteJourneyRequest = function (input, context) {
    var bodyParams = {};
    if (input.Activities !== undefined) {
        bodyParams["Activities"] = serializeAws_restJson1_1MapOfActivity(input.Activities, context);
    }
    if (input.CreationDate !== undefined) {
        bodyParams["CreationDate"] = input.CreationDate;
    }
    if (input.LastModifiedDate !== undefined) {
        bodyParams["LastModifiedDate"] = input.LastModifiedDate;
    }
    if (input.Limits !== undefined) {
        bodyParams["Limits"] = serializeAws_restJson1_1JourneyLimits(input.Limits, context);
    }
    if (input.LocalTime !== undefined) {
        bodyParams["LocalTime"] = input.LocalTime;
    }
    if (input.Name !== undefined) {
        bodyParams["Name"] = input.Name;
    }
    if (input.QuietTime !== undefined) {
        bodyParams["QuietTime"] = serializeAws_restJson1_1QuietTime(input.QuietTime, context);
    }
    if (input.RefreshFrequency !== undefined) {
        bodyParams["RefreshFrequency"] = input.RefreshFrequency;
    }
    if (input.Schedule !== undefined) {
        bodyParams["Schedule"] = serializeAws_restJson1_1JourneySchedule(input.Schedule, context);
    }
    if (input.StartActivity !== undefined) {
        bodyParams["StartActivity"] = input.StartActivity;
    }
    if (input.StartCondition !== undefined) {
        bodyParams["StartCondition"] = serializeAws_restJson1_1StartCondition(input.StartCondition, context);
    }
    if (input.State !== undefined) {
        bodyParams["State"] = input.State;
    }
    return bodyParams;
};
var serializeAws_restJson1_1WriteSegmentRequest = function (input, context) {
    var bodyParams = {};
    if (input.Dimensions !== undefined) {
        bodyParams["Dimensions"] = serializeAws_restJson1_1SegmentDimensions(input.Dimensions, context);
    }
    if (input.Name !== undefined) {
        bodyParams["Name"] = input.Name;
    }
    if (input.SegmentGroups !== undefined) {
        bodyParams["SegmentGroups"] = serializeAws_restJson1_1SegmentGroupList(input.SegmentGroups, context);
    }
    if (input.tags !== undefined) {
        bodyParams["tags"] = serializeAws_restJson1_1MapOf__string(input.tags, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1WriteTreatmentResource = function (input, context) {
    var bodyParams = {};
    if (input.MessageConfiguration !== undefined) {
        bodyParams["MessageConfiguration"] = serializeAws_restJson1_1MessageConfiguration(input.MessageConfiguration, context);
    }
    if (input.Schedule !== undefined) {
        bodyParams["Schedule"] = serializeAws_restJson1_1Schedule(input.Schedule, context);
    }
    if (input.SizePercent !== undefined) {
        bodyParams["SizePercent"] = input.SizePercent;
    }
    if (input.TemplateConfiguration !== undefined) {
        bodyParams["TemplateConfiguration"] = serializeAws_restJson1_1TemplateConfiguration(input.TemplateConfiguration, context);
    }
    if (input.TreatmentDescription !== undefined) {
        bodyParams["TreatmentDescription"] = input.TreatmentDescription;
    }
    if (input.TreatmentName !== undefined) {
        bodyParams["TreatmentName"] = input.TreatmentName;
    }
    return bodyParams;
};
var deserializeAws_restJson1_1ADMChannelResponse = function (output, context) {
    var contents = {
        __type: "ADMChannelResponse",
        ApplicationId: undefined,
        CreationDate: undefined,
        Enabled: undefined,
        HasCredential: undefined,
        Id: undefined,
        IsArchived: undefined,
        LastModifiedBy: undefined,
        LastModifiedDate: undefined,
        Platform: undefined,
        Version: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.Enabled !== undefined && output.Enabled !== null) {
        contents.Enabled = output.Enabled;
    }
    if (output.HasCredential !== undefined && output.HasCredential !== null) {
        contents.HasCredential = output.HasCredential;
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.IsArchived !== undefined && output.IsArchived !== null) {
        contents.IsArchived = output.IsArchived;
    }
    if (output.LastModifiedBy !== undefined && output.LastModifiedBy !== null) {
        contents.LastModifiedBy = output.LastModifiedBy;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.Platform !== undefined && output.Platform !== null) {
        contents.Platform = output.Platform;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    return contents;
};
var deserializeAws_restJson1_1APNSChannelResponse = function (output, context) {
    var contents = {
        __type: "APNSChannelResponse",
        ApplicationId: undefined,
        CreationDate: undefined,
        DefaultAuthenticationMethod: undefined,
        Enabled: undefined,
        HasCredential: undefined,
        HasTokenKey: undefined,
        Id: undefined,
        IsArchived: undefined,
        LastModifiedBy: undefined,
        LastModifiedDate: undefined,
        Platform: undefined,
        Version: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.DefaultAuthenticationMethod !== undefined &&
        output.DefaultAuthenticationMethod !== null) {
        contents.DefaultAuthenticationMethod = output.DefaultAuthenticationMethod;
    }
    if (output.Enabled !== undefined && output.Enabled !== null) {
        contents.Enabled = output.Enabled;
    }
    if (output.HasCredential !== undefined && output.HasCredential !== null) {
        contents.HasCredential = output.HasCredential;
    }
    if (output.HasTokenKey !== undefined && output.HasTokenKey !== null) {
        contents.HasTokenKey = output.HasTokenKey;
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.IsArchived !== undefined && output.IsArchived !== null) {
        contents.IsArchived = output.IsArchived;
    }
    if (output.LastModifiedBy !== undefined && output.LastModifiedBy !== null) {
        contents.LastModifiedBy = output.LastModifiedBy;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.Platform !== undefined && output.Platform !== null) {
        contents.Platform = output.Platform;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    return contents;
};
var deserializeAws_restJson1_1APNSPushNotificationTemplate = function (output, context) {
    var contents = {
        __type: "APNSPushNotificationTemplate",
        Action: undefined,
        Body: undefined,
        MediaUrl: undefined,
        RawContent: undefined,
        Sound: undefined,
        Title: undefined,
        Url: undefined
    };
    if (output.Action !== undefined && output.Action !== null) {
        contents.Action = output.Action;
    }
    if (output.Body !== undefined && output.Body !== null) {
        contents.Body = output.Body;
    }
    if (output.MediaUrl !== undefined && output.MediaUrl !== null) {
        contents.MediaUrl = output.MediaUrl;
    }
    if (output.RawContent !== undefined && output.RawContent !== null) {
        contents.RawContent = output.RawContent;
    }
    if (output.Sound !== undefined && output.Sound !== null) {
        contents.Sound = output.Sound;
    }
    if (output.Title !== undefined && output.Title !== null) {
        contents.Title = output.Title;
    }
    if (output.Url !== undefined && output.Url !== null) {
        contents.Url = output.Url;
    }
    return contents;
};
var deserializeAws_restJson1_1APNSSandboxChannelResponse = function (output, context) {
    var contents = {
        __type: "APNSSandboxChannelResponse",
        ApplicationId: undefined,
        CreationDate: undefined,
        DefaultAuthenticationMethod: undefined,
        Enabled: undefined,
        HasCredential: undefined,
        HasTokenKey: undefined,
        Id: undefined,
        IsArchived: undefined,
        LastModifiedBy: undefined,
        LastModifiedDate: undefined,
        Platform: undefined,
        Version: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.DefaultAuthenticationMethod !== undefined &&
        output.DefaultAuthenticationMethod !== null) {
        contents.DefaultAuthenticationMethod = output.DefaultAuthenticationMethod;
    }
    if (output.Enabled !== undefined && output.Enabled !== null) {
        contents.Enabled = output.Enabled;
    }
    if (output.HasCredential !== undefined && output.HasCredential !== null) {
        contents.HasCredential = output.HasCredential;
    }
    if (output.HasTokenKey !== undefined && output.HasTokenKey !== null) {
        contents.HasTokenKey = output.HasTokenKey;
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.IsArchived !== undefined && output.IsArchived !== null) {
        contents.IsArchived = output.IsArchived;
    }
    if (output.LastModifiedBy !== undefined && output.LastModifiedBy !== null) {
        contents.LastModifiedBy = output.LastModifiedBy;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.Platform !== undefined && output.Platform !== null) {
        contents.Platform = output.Platform;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    return contents;
};
var deserializeAws_restJson1_1APNSVoipChannelResponse = function (output, context) {
    var contents = {
        __type: "APNSVoipChannelResponse",
        ApplicationId: undefined,
        CreationDate: undefined,
        DefaultAuthenticationMethod: undefined,
        Enabled: undefined,
        HasCredential: undefined,
        HasTokenKey: undefined,
        Id: undefined,
        IsArchived: undefined,
        LastModifiedBy: undefined,
        LastModifiedDate: undefined,
        Platform: undefined,
        Version: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.DefaultAuthenticationMethod !== undefined &&
        output.DefaultAuthenticationMethod !== null) {
        contents.DefaultAuthenticationMethod = output.DefaultAuthenticationMethod;
    }
    if (output.Enabled !== undefined && output.Enabled !== null) {
        contents.Enabled = output.Enabled;
    }
    if (output.HasCredential !== undefined && output.HasCredential !== null) {
        contents.HasCredential = output.HasCredential;
    }
    if (output.HasTokenKey !== undefined && output.HasTokenKey !== null) {
        contents.HasTokenKey = output.HasTokenKey;
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.IsArchived !== undefined && output.IsArchived !== null) {
        contents.IsArchived = output.IsArchived;
    }
    if (output.LastModifiedBy !== undefined && output.LastModifiedBy !== null) {
        contents.LastModifiedBy = output.LastModifiedBy;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.Platform !== undefined && output.Platform !== null) {
        contents.Platform = output.Platform;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    return contents;
};
var deserializeAws_restJson1_1APNSVoipSandboxChannelResponse = function (output, context) {
    var contents = {
        __type: "APNSVoipSandboxChannelResponse",
        ApplicationId: undefined,
        CreationDate: undefined,
        DefaultAuthenticationMethod: undefined,
        Enabled: undefined,
        HasCredential: undefined,
        HasTokenKey: undefined,
        Id: undefined,
        IsArchived: undefined,
        LastModifiedBy: undefined,
        LastModifiedDate: undefined,
        Platform: undefined,
        Version: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.DefaultAuthenticationMethod !== undefined &&
        output.DefaultAuthenticationMethod !== null) {
        contents.DefaultAuthenticationMethod = output.DefaultAuthenticationMethod;
    }
    if (output.Enabled !== undefined && output.Enabled !== null) {
        contents.Enabled = output.Enabled;
    }
    if (output.HasCredential !== undefined && output.HasCredential !== null) {
        contents.HasCredential = output.HasCredential;
    }
    if (output.HasTokenKey !== undefined && output.HasTokenKey !== null) {
        contents.HasTokenKey = output.HasTokenKey;
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.IsArchived !== undefined && output.IsArchived !== null) {
        contents.IsArchived = output.IsArchived;
    }
    if (output.LastModifiedBy !== undefined && output.LastModifiedBy !== null) {
        contents.LastModifiedBy = output.LastModifiedBy;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.Platform !== undefined && output.Platform !== null) {
        contents.Platform = output.Platform;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    return contents;
};
var deserializeAws_restJson1_1ActivitiesResponse = function (output, context) {
    var contents = {
        __type: "ActivitiesResponse",
        Item: undefined,
        NextToken: undefined
    };
    if (output.Item !== undefined && output.Item !== null) {
        contents.Item = deserializeAws_restJson1_1ListOfActivityResponse(output.Item, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    return contents;
};
var deserializeAws_restJson1_1Activity = function (output, context) {
    var contents = {
        __type: "Activity",
        ConditionalSplit: undefined,
        Description: undefined,
        EMAIL: undefined,
        Holdout: undefined,
        MultiCondition: undefined,
        RandomSplit: undefined,
        Wait: undefined
    };
    if (output.ConditionalSplit !== undefined &&
        output.ConditionalSplit !== null) {
        contents.ConditionalSplit = deserializeAws_restJson1_1ConditionalSplitActivity(output.ConditionalSplit, context);
    }
    if (output.Description !== undefined && output.Description !== null) {
        contents.Description = output.Description;
    }
    if (output.EMAIL !== undefined && output.EMAIL !== null) {
        contents.EMAIL = deserializeAws_restJson1_1EmailMessageActivity(output.EMAIL, context);
    }
    if (output.Holdout !== undefined && output.Holdout !== null) {
        contents.Holdout = deserializeAws_restJson1_1HoldoutActivity(output.Holdout, context);
    }
    if (output.MultiCondition !== undefined && output.MultiCondition !== null) {
        contents.MultiCondition = deserializeAws_restJson1_1MultiConditionalSplitActivity(output.MultiCondition, context);
    }
    if (output.RandomSplit !== undefined && output.RandomSplit !== null) {
        contents.RandomSplit = deserializeAws_restJson1_1RandomSplitActivity(output.RandomSplit, context);
    }
    if (output.Wait !== undefined && output.Wait !== null) {
        contents.Wait = deserializeAws_restJson1_1WaitActivity(output.Wait, context);
    }
    return contents;
};
var deserializeAws_restJson1_1ActivityResponse = function (output, context) {
    var contents = {
        __type: "ActivityResponse",
        ApplicationId: undefined,
        CampaignId: undefined,
        End: undefined,
        Id: undefined,
        Result: undefined,
        ScheduledStart: undefined,
        Start: undefined,
        State: undefined,
        SuccessfulEndpointCount: undefined,
        TimezonesCompletedCount: undefined,
        TimezonesTotalCount: undefined,
        TotalEndpointCount: undefined,
        TreatmentId: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.CampaignId !== undefined && output.CampaignId !== null) {
        contents.CampaignId = output.CampaignId;
    }
    if (output.End !== undefined && output.End !== null) {
        contents.End = output.End;
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.Result !== undefined && output.Result !== null) {
        contents.Result = output.Result;
    }
    if (output.ScheduledStart !== undefined && output.ScheduledStart !== null) {
        contents.ScheduledStart = output.ScheduledStart;
    }
    if (output.Start !== undefined && output.Start !== null) {
        contents.Start = output.Start;
    }
    if (output.State !== undefined && output.State !== null) {
        contents.State = output.State;
    }
    if (output.SuccessfulEndpointCount !== undefined &&
        output.SuccessfulEndpointCount !== null) {
        contents.SuccessfulEndpointCount = output.SuccessfulEndpointCount;
    }
    if (output.TimezonesCompletedCount !== undefined &&
        output.TimezonesCompletedCount !== null) {
        contents.TimezonesCompletedCount = output.TimezonesCompletedCount;
    }
    if (output.TimezonesTotalCount !== undefined &&
        output.TimezonesTotalCount !== null) {
        contents.TimezonesTotalCount = output.TimezonesTotalCount;
    }
    if (output.TotalEndpointCount !== undefined &&
        output.TotalEndpointCount !== null) {
        contents.TotalEndpointCount = output.TotalEndpointCount;
    }
    if (output.TreatmentId !== undefined && output.TreatmentId !== null) {
        contents.TreatmentId = output.TreatmentId;
    }
    return contents;
};
var deserializeAws_restJson1_1AndroidPushNotificationTemplate = function (output, context) {
    var contents = {
        __type: "AndroidPushNotificationTemplate",
        Action: undefined,
        Body: undefined,
        ImageIconUrl: undefined,
        ImageUrl: undefined,
        RawContent: undefined,
        SmallImageIconUrl: undefined,
        Sound: undefined,
        Title: undefined,
        Url: undefined
    };
    if (output.Action !== undefined && output.Action !== null) {
        contents.Action = output.Action;
    }
    if (output.Body !== undefined && output.Body !== null) {
        contents.Body = output.Body;
    }
    if (output.ImageIconUrl !== undefined && output.ImageIconUrl !== null) {
        contents.ImageIconUrl = output.ImageIconUrl;
    }
    if (output.ImageUrl !== undefined && output.ImageUrl !== null) {
        contents.ImageUrl = output.ImageUrl;
    }
    if (output.RawContent !== undefined && output.RawContent !== null) {
        contents.RawContent = output.RawContent;
    }
    if (output.SmallImageIconUrl !== undefined &&
        output.SmallImageIconUrl !== null) {
        contents.SmallImageIconUrl = output.SmallImageIconUrl;
    }
    if (output.Sound !== undefined && output.Sound !== null) {
        contents.Sound = output.Sound;
    }
    if (output.Title !== undefined && output.Title !== null) {
        contents.Title = output.Title;
    }
    if (output.Url !== undefined && output.Url !== null) {
        contents.Url = output.Url;
    }
    return contents;
};
var deserializeAws_restJson1_1ApplicationDateRangeKpiResponse = function (output, context) {
    var contents = {
        __type: "ApplicationDateRangeKpiResponse",
        ApplicationId: undefined,
        EndTime: undefined,
        KpiName: undefined,
        KpiResult: undefined,
        NextToken: undefined,
        StartTime: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.EndTime !== undefined && output.EndTime !== null) {
        contents.EndTime = new Date(output.EndTime);
    }
    if (output.KpiName !== undefined && output.KpiName !== null) {
        contents.KpiName = output.KpiName;
    }
    if (output.KpiResult !== undefined && output.KpiResult !== null) {
        contents.KpiResult = deserializeAws_restJson1_1BaseKpiResult(output.KpiResult, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    if (output.StartTime !== undefined && output.StartTime !== null) {
        contents.StartTime = new Date(output.StartTime);
    }
    return contents;
};
var deserializeAws_restJson1_1ApplicationResponse = function (output, context) {
    var contents = {
        __type: "ApplicationResponse",
        Arn: undefined,
        Id: undefined,
        Name: undefined,
        tags: undefined
    };
    if (output.Arn !== undefined && output.Arn !== null) {
        contents.Arn = output.Arn;
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.Name !== undefined && output.Name !== null) {
        contents.Name = output.Name;
    }
    if (output.tags !== undefined && output.tags !== null) {
        contents.tags = deserializeAws_restJson1_1MapOf__string(output.tags, context);
    }
    return contents;
};
var deserializeAws_restJson1_1ApplicationSettingsResource = function (output, context) {
    var contents = {
        __type: "ApplicationSettingsResource",
        ApplicationId: undefined,
        CampaignHook: undefined,
        LastModifiedDate: undefined,
        Limits: undefined,
        QuietTime: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.CampaignHook !== undefined && output.CampaignHook !== null) {
        contents.CampaignHook = deserializeAws_restJson1_1CampaignHook(output.CampaignHook, context);
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.Limits !== undefined && output.Limits !== null) {
        contents.Limits = deserializeAws_restJson1_1CampaignLimits(output.Limits, context);
    }
    if (output.QuietTime !== undefined && output.QuietTime !== null) {
        contents.QuietTime = deserializeAws_restJson1_1QuietTime(output.QuietTime, context);
    }
    return contents;
};
var deserializeAws_restJson1_1ApplicationsResponse = function (output, context) {
    var contents = {
        __type: "ApplicationsResponse",
        Item: undefined,
        NextToken: undefined
    };
    if (output.Item !== undefined && output.Item !== null) {
        contents.Item = deserializeAws_restJson1_1ListOfApplicationResponse(output.Item, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    return contents;
};
var deserializeAws_restJson1_1AttributeDimension = function (output, context) {
    var contents = {
        __type: "AttributeDimension",
        AttributeType: undefined,
        Values: undefined
    };
    if (output.AttributeType !== undefined && output.AttributeType !== null) {
        contents.AttributeType = output.AttributeType;
    }
    if (output.Values !== undefined && output.Values !== null) {
        contents.Values = deserializeAws_restJson1_1ListOf__string(output.Values, context);
    }
    return contents;
};
var deserializeAws_restJson1_1AttributesResource = function (output, context) {
    var contents = {
        __type: "AttributesResource",
        ApplicationId: undefined,
        AttributeType: undefined,
        Attributes: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.AttributeType !== undefined && output.AttributeType !== null) {
        contents.AttributeType = output.AttributeType;
    }
    if (output.Attributes !== undefined && output.Attributes !== null) {
        contents.Attributes = deserializeAws_restJson1_1ListOf__string(output.Attributes, context);
    }
    return contents;
};
var deserializeAws_restJson1_1BaiduChannelResponse = function (output, context) {
    var contents = {
        __type: "BaiduChannelResponse",
        ApplicationId: undefined,
        CreationDate: undefined,
        Credential: undefined,
        Enabled: undefined,
        HasCredential: undefined,
        Id: undefined,
        IsArchived: undefined,
        LastModifiedBy: undefined,
        LastModifiedDate: undefined,
        Platform: undefined,
        Version: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.Credential !== undefined && output.Credential !== null) {
        contents.Credential = output.Credential;
    }
    if (output.Enabled !== undefined && output.Enabled !== null) {
        contents.Enabled = output.Enabled;
    }
    if (output.HasCredential !== undefined && output.HasCredential !== null) {
        contents.HasCredential = output.HasCredential;
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.IsArchived !== undefined && output.IsArchived !== null) {
        contents.IsArchived = output.IsArchived;
    }
    if (output.LastModifiedBy !== undefined && output.LastModifiedBy !== null) {
        contents.LastModifiedBy = output.LastModifiedBy;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.Platform !== undefined && output.Platform !== null) {
        contents.Platform = output.Platform;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    return contents;
};
var deserializeAws_restJson1_1BaseKpiResult = function (output, context) {
    var contents = {
        __type: "BaseKpiResult",
        Rows: undefined
    };
    if (output.Rows !== undefined && output.Rows !== null) {
        contents.Rows = deserializeAws_restJson1_1ListOfResultRow(output.Rows, context);
    }
    return contents;
};
var deserializeAws_restJson1_1CampaignDateRangeKpiResponse = function (output, context) {
    var contents = {
        __type: "CampaignDateRangeKpiResponse",
        ApplicationId: undefined,
        CampaignId: undefined,
        EndTime: undefined,
        KpiName: undefined,
        KpiResult: undefined,
        NextToken: undefined,
        StartTime: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.CampaignId !== undefined && output.CampaignId !== null) {
        contents.CampaignId = output.CampaignId;
    }
    if (output.EndTime !== undefined && output.EndTime !== null) {
        contents.EndTime = new Date(output.EndTime);
    }
    if (output.KpiName !== undefined && output.KpiName !== null) {
        contents.KpiName = output.KpiName;
    }
    if (output.KpiResult !== undefined && output.KpiResult !== null) {
        contents.KpiResult = deserializeAws_restJson1_1BaseKpiResult(output.KpiResult, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    if (output.StartTime !== undefined && output.StartTime !== null) {
        contents.StartTime = new Date(output.StartTime);
    }
    return contents;
};
var deserializeAws_restJson1_1CampaignEmailMessage = function (output, context) {
    var contents = {
        __type: "CampaignEmailMessage",
        Body: undefined,
        FromAddress: undefined,
        HtmlBody: undefined,
        Title: undefined
    };
    if (output.Body !== undefined && output.Body !== null) {
        contents.Body = output.Body;
    }
    if (output.FromAddress !== undefined && output.FromAddress !== null) {
        contents.FromAddress = output.FromAddress;
    }
    if (output.HtmlBody !== undefined && output.HtmlBody !== null) {
        contents.HtmlBody = output.HtmlBody;
    }
    if (output.Title !== undefined && output.Title !== null) {
        contents.Title = output.Title;
    }
    return contents;
};
var deserializeAws_restJson1_1CampaignEventFilter = function (output, context) {
    var contents = {
        __type: "CampaignEventFilter",
        Dimensions: undefined,
        FilterType: undefined
    };
    if (output.Dimensions !== undefined && output.Dimensions !== null) {
        contents.Dimensions = deserializeAws_restJson1_1EventDimensions(output.Dimensions, context);
    }
    if (output.FilterType !== undefined && output.FilterType !== null) {
        contents.FilterType = output.FilterType;
    }
    return contents;
};
var deserializeAws_restJson1_1CampaignHook = function (output, context) {
    var contents = {
        __type: "CampaignHook",
        LambdaFunctionName: undefined,
        Mode: undefined,
        WebUrl: undefined
    };
    if (output.LambdaFunctionName !== undefined &&
        output.LambdaFunctionName !== null) {
        contents.LambdaFunctionName = output.LambdaFunctionName;
    }
    if (output.Mode !== undefined && output.Mode !== null) {
        contents.Mode = output.Mode;
    }
    if (output.WebUrl !== undefined && output.WebUrl !== null) {
        contents.WebUrl = output.WebUrl;
    }
    return contents;
};
var deserializeAws_restJson1_1CampaignLimits = function (output, context) {
    var contents = {
        __type: "CampaignLimits",
        Daily: undefined,
        MaximumDuration: undefined,
        MessagesPerSecond: undefined,
        Total: undefined
    };
    if (output.Daily !== undefined && output.Daily !== null) {
        contents.Daily = output.Daily;
    }
    if (output.MaximumDuration !== undefined && output.MaximumDuration !== null) {
        contents.MaximumDuration = output.MaximumDuration;
    }
    if (output.MessagesPerSecond !== undefined &&
        output.MessagesPerSecond !== null) {
        contents.MessagesPerSecond = output.MessagesPerSecond;
    }
    if (output.Total !== undefined && output.Total !== null) {
        contents.Total = output.Total;
    }
    return contents;
};
var deserializeAws_restJson1_1CampaignResponse = function (output, context) {
    var contents = {
        __type: "CampaignResponse",
        AdditionalTreatments: undefined,
        ApplicationId: undefined,
        Arn: undefined,
        CreationDate: undefined,
        DefaultState: undefined,
        Description: undefined,
        HoldoutPercent: undefined,
        Hook: undefined,
        Id: undefined,
        IsPaused: undefined,
        LastModifiedDate: undefined,
        Limits: undefined,
        MessageConfiguration: undefined,
        Name: undefined,
        Schedule: undefined,
        SegmentId: undefined,
        SegmentVersion: undefined,
        State: undefined,
        TemplateConfiguration: undefined,
        TreatmentDescription: undefined,
        TreatmentName: undefined,
        Version: undefined,
        tags: undefined
    };
    if (output.AdditionalTreatments !== undefined &&
        output.AdditionalTreatments !== null) {
        contents.AdditionalTreatments = deserializeAws_restJson1_1ListOfTreatmentResource(output.AdditionalTreatments, context);
    }
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.Arn !== undefined && output.Arn !== null) {
        contents.Arn = output.Arn;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.DefaultState !== undefined && output.DefaultState !== null) {
        contents.DefaultState = deserializeAws_restJson1_1CampaignState(output.DefaultState, context);
    }
    if (output.Description !== undefined && output.Description !== null) {
        contents.Description = output.Description;
    }
    if (output.HoldoutPercent !== undefined && output.HoldoutPercent !== null) {
        contents.HoldoutPercent = output.HoldoutPercent;
    }
    if (output.Hook !== undefined && output.Hook !== null) {
        contents.Hook = deserializeAws_restJson1_1CampaignHook(output.Hook, context);
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.IsPaused !== undefined && output.IsPaused !== null) {
        contents.IsPaused = output.IsPaused;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.Limits !== undefined && output.Limits !== null) {
        contents.Limits = deserializeAws_restJson1_1CampaignLimits(output.Limits, context);
    }
    if (output.MessageConfiguration !== undefined &&
        output.MessageConfiguration !== null) {
        contents.MessageConfiguration = deserializeAws_restJson1_1MessageConfiguration(output.MessageConfiguration, context);
    }
    if (output.Name !== undefined && output.Name !== null) {
        contents.Name = output.Name;
    }
    if (output.Schedule !== undefined && output.Schedule !== null) {
        contents.Schedule = deserializeAws_restJson1_1Schedule(output.Schedule, context);
    }
    if (output.SegmentId !== undefined && output.SegmentId !== null) {
        contents.SegmentId = output.SegmentId;
    }
    if (output.SegmentVersion !== undefined && output.SegmentVersion !== null) {
        contents.SegmentVersion = output.SegmentVersion;
    }
    if (output.State !== undefined && output.State !== null) {
        contents.State = deserializeAws_restJson1_1CampaignState(output.State, context);
    }
    if (output.TemplateConfiguration !== undefined &&
        output.TemplateConfiguration !== null) {
        contents.TemplateConfiguration = deserializeAws_restJson1_1TemplateConfiguration(output.TemplateConfiguration, context);
    }
    if (output.TreatmentDescription !== undefined &&
        output.TreatmentDescription !== null) {
        contents.TreatmentDescription = output.TreatmentDescription;
    }
    if (output.TreatmentName !== undefined && output.TreatmentName !== null) {
        contents.TreatmentName = output.TreatmentName;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    if (output.tags !== undefined && output.tags !== null) {
        contents.tags = deserializeAws_restJson1_1MapOf__string(output.tags, context);
    }
    return contents;
};
var deserializeAws_restJson1_1CampaignSmsMessage = function (output, context) {
    var contents = {
        __type: "CampaignSmsMessage",
        Body: undefined,
        MessageType: undefined,
        SenderId: undefined
    };
    if (output.Body !== undefined && output.Body !== null) {
        contents.Body = output.Body;
    }
    if (output.MessageType !== undefined && output.MessageType !== null) {
        contents.MessageType = output.MessageType;
    }
    if (output.SenderId !== undefined && output.SenderId !== null) {
        contents.SenderId = output.SenderId;
    }
    return contents;
};
var deserializeAws_restJson1_1CampaignState = function (output, context) {
    var contents = {
        __type: "CampaignState",
        CampaignStatus: undefined
    };
    if (output.CampaignStatus !== undefined && output.CampaignStatus !== null) {
        contents.CampaignStatus = output.CampaignStatus;
    }
    return contents;
};
var deserializeAws_restJson1_1CampaignsResponse = function (output, context) {
    var contents = {
        __type: "CampaignsResponse",
        Item: undefined,
        NextToken: undefined
    };
    if (output.Item !== undefined && output.Item !== null) {
        contents.Item = deserializeAws_restJson1_1ListOfCampaignResponse(output.Item, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    return contents;
};
var deserializeAws_restJson1_1ChannelResponse = function (output, context) {
    var contents = {
        __type: "ChannelResponse",
        ApplicationId: undefined,
        CreationDate: undefined,
        Enabled: undefined,
        HasCredential: undefined,
        Id: undefined,
        IsArchived: undefined,
        LastModifiedBy: undefined,
        LastModifiedDate: undefined,
        Version: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.Enabled !== undefined && output.Enabled !== null) {
        contents.Enabled = output.Enabled;
    }
    if (output.HasCredential !== undefined && output.HasCredential !== null) {
        contents.HasCredential = output.HasCredential;
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.IsArchived !== undefined && output.IsArchived !== null) {
        contents.IsArchived = output.IsArchived;
    }
    if (output.LastModifiedBy !== undefined && output.LastModifiedBy !== null) {
        contents.LastModifiedBy = output.LastModifiedBy;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    return contents;
};
var deserializeAws_restJson1_1ChannelsResponse = function (output, context) {
    var contents = {
        __type: "ChannelsResponse",
        Channels: undefined
    };
    if (output.Channels !== undefined && output.Channels !== null) {
        contents.Channels = deserializeAws_restJson1_1MapOfChannelResponse(output.Channels, context);
    }
    return contents;
};
var deserializeAws_restJson1_1Condition = function (output, context) {
    var contents = {
        __type: "Condition",
        Conditions: undefined,
        Operator: undefined
    };
    if (output.Conditions !== undefined && output.Conditions !== null) {
        contents.Conditions = deserializeAws_restJson1_1ListOfSimpleCondition(output.Conditions, context);
    }
    if (output.Operator !== undefined && output.Operator !== null) {
        contents.Operator = output.Operator;
    }
    return contents;
};
var deserializeAws_restJson1_1ConditionalSplitActivity = function (output, context) {
    var contents = {
        __type: "ConditionalSplitActivity",
        Condition: undefined,
        EvaluationWaitTime: undefined,
        FalseActivity: undefined,
        TrueActivity: undefined
    };
    if (output.Condition !== undefined && output.Condition !== null) {
        contents.Condition = deserializeAws_restJson1_1Condition(output.Condition, context);
    }
    if (output.EvaluationWaitTime !== undefined &&
        output.EvaluationWaitTime !== null) {
        contents.EvaluationWaitTime = deserializeAws_restJson1_1WaitTime(output.EvaluationWaitTime, context);
    }
    if (output.FalseActivity !== undefined && output.FalseActivity !== null) {
        contents.FalseActivity = output.FalseActivity;
    }
    if (output.TrueActivity !== undefined && output.TrueActivity !== null) {
        contents.TrueActivity = output.TrueActivity;
    }
    return contents;
};
var deserializeAws_restJson1_1CreateTemplateMessageBody = function (output, context) {
    var contents = {
        __type: "CreateTemplateMessageBody",
        Arn: undefined,
        Message: undefined,
        RequestID: undefined
    };
    if (output.Arn !== undefined && output.Arn !== null) {
        contents.Arn = output.Arn;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    if (output.RequestID !== undefined && output.RequestID !== null) {
        contents.RequestID = output.RequestID;
    }
    return contents;
};
var deserializeAws_restJson1_1DefaultPushNotificationTemplate = function (output, context) {
    var contents = {
        __type: "DefaultPushNotificationTemplate",
        Action: undefined,
        Body: undefined,
        Sound: undefined,
        Title: undefined,
        Url: undefined
    };
    if (output.Action !== undefined && output.Action !== null) {
        contents.Action = output.Action;
    }
    if (output.Body !== undefined && output.Body !== null) {
        contents.Body = output.Body;
    }
    if (output.Sound !== undefined && output.Sound !== null) {
        contents.Sound = output.Sound;
    }
    if (output.Title !== undefined && output.Title !== null) {
        contents.Title = output.Title;
    }
    if (output.Url !== undefined && output.Url !== null) {
        contents.Url = output.Url;
    }
    return contents;
};
var deserializeAws_restJson1_1EmailChannelResponse = function (output, context) {
    var contents = {
        __type: "EmailChannelResponse",
        ApplicationId: undefined,
        ConfigurationSet: undefined,
        CreationDate: undefined,
        Enabled: undefined,
        FromAddress: undefined,
        HasCredential: undefined,
        Id: undefined,
        Identity: undefined,
        IsArchived: undefined,
        LastModifiedBy: undefined,
        LastModifiedDate: undefined,
        MessagesPerSecond: undefined,
        Platform: undefined,
        RoleArn: undefined,
        Version: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.ConfigurationSet !== undefined &&
        output.ConfigurationSet !== null) {
        contents.ConfigurationSet = output.ConfigurationSet;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.Enabled !== undefined && output.Enabled !== null) {
        contents.Enabled = output.Enabled;
    }
    if (output.FromAddress !== undefined && output.FromAddress !== null) {
        contents.FromAddress = output.FromAddress;
    }
    if (output.HasCredential !== undefined && output.HasCredential !== null) {
        contents.HasCredential = output.HasCredential;
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.Identity !== undefined && output.Identity !== null) {
        contents.Identity = output.Identity;
    }
    if (output.IsArchived !== undefined && output.IsArchived !== null) {
        contents.IsArchived = output.IsArchived;
    }
    if (output.LastModifiedBy !== undefined && output.LastModifiedBy !== null) {
        contents.LastModifiedBy = output.LastModifiedBy;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.MessagesPerSecond !== undefined &&
        output.MessagesPerSecond !== null) {
        contents.MessagesPerSecond = output.MessagesPerSecond;
    }
    if (output.Platform !== undefined && output.Platform !== null) {
        contents.Platform = output.Platform;
    }
    if (output.RoleArn !== undefined && output.RoleArn !== null) {
        contents.RoleArn = output.RoleArn;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    return contents;
};
var deserializeAws_restJson1_1EmailMessageActivity = function (output, context) {
    var contents = {
        __type: "EmailMessageActivity",
        MessageConfig: undefined,
        NextActivity: undefined,
        TemplateName: undefined,
        TemplateVersion: undefined
    };
    if (output.MessageConfig !== undefined && output.MessageConfig !== null) {
        contents.MessageConfig = deserializeAws_restJson1_1JourneyEmailMessage(output.MessageConfig, context);
    }
    if (output.NextActivity !== undefined && output.NextActivity !== null) {
        contents.NextActivity = output.NextActivity;
    }
    if (output.TemplateName !== undefined && output.TemplateName !== null) {
        contents.TemplateName = output.TemplateName;
    }
    if (output.TemplateVersion !== undefined && output.TemplateVersion !== null) {
        contents.TemplateVersion = output.TemplateVersion;
    }
    return contents;
};
var deserializeAws_restJson1_1EmailTemplateResponse = function (output, context) {
    var contents = {
        __type: "EmailTemplateResponse",
        Arn: undefined,
        CreationDate: undefined,
        DefaultSubstitutions: undefined,
        HtmlPart: undefined,
        LastModifiedDate: undefined,
        Subject: undefined,
        TemplateDescription: undefined,
        TemplateName: undefined,
        TemplateType: undefined,
        TextPart: undefined,
        Version: undefined,
        tags: undefined
    };
    if (output.Arn !== undefined && output.Arn !== null) {
        contents.Arn = output.Arn;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.DefaultSubstitutions !== undefined &&
        output.DefaultSubstitutions !== null) {
        contents.DefaultSubstitutions = output.DefaultSubstitutions;
    }
    if (output.HtmlPart !== undefined && output.HtmlPart !== null) {
        contents.HtmlPart = output.HtmlPart;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.Subject !== undefined && output.Subject !== null) {
        contents.Subject = output.Subject;
    }
    if (output.TemplateDescription !== undefined &&
        output.TemplateDescription !== null) {
        contents.TemplateDescription = output.TemplateDescription;
    }
    if (output.TemplateName !== undefined && output.TemplateName !== null) {
        contents.TemplateName = output.TemplateName;
    }
    if (output.TemplateType !== undefined && output.TemplateType !== null) {
        contents.TemplateType = output.TemplateType;
    }
    if (output.TextPart !== undefined && output.TextPart !== null) {
        contents.TextPart = output.TextPart;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    if (output.tags !== undefined && output.tags !== null) {
        contents.tags = deserializeAws_restJson1_1MapOf__string(output.tags, context);
    }
    return contents;
};
var deserializeAws_restJson1_1EndpointDemographic = function (output, context) {
    var contents = {
        __type: "EndpointDemographic",
        AppVersion: undefined,
        Locale: undefined,
        Make: undefined,
        Model: undefined,
        ModelVersion: undefined,
        Platform: undefined,
        PlatformVersion: undefined,
        Timezone: undefined
    };
    if (output.AppVersion !== undefined && output.AppVersion !== null) {
        contents.AppVersion = output.AppVersion;
    }
    if (output.Locale !== undefined && output.Locale !== null) {
        contents.Locale = output.Locale;
    }
    if (output.Make !== undefined && output.Make !== null) {
        contents.Make = output.Make;
    }
    if (output.Model !== undefined && output.Model !== null) {
        contents.Model = output.Model;
    }
    if (output.ModelVersion !== undefined && output.ModelVersion !== null) {
        contents.ModelVersion = output.ModelVersion;
    }
    if (output.Platform !== undefined && output.Platform !== null) {
        contents.Platform = output.Platform;
    }
    if (output.PlatformVersion !== undefined && output.PlatformVersion !== null) {
        contents.PlatformVersion = output.PlatformVersion;
    }
    if (output.Timezone !== undefined && output.Timezone !== null) {
        contents.Timezone = output.Timezone;
    }
    return contents;
};
var deserializeAws_restJson1_1EndpointItemResponse = function (output, context) {
    var contents = {
        __type: "EndpointItemResponse",
        Message: undefined,
        StatusCode: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    if (output.StatusCode !== undefined && output.StatusCode !== null) {
        contents.StatusCode = output.StatusCode;
    }
    return contents;
};
var deserializeAws_restJson1_1EndpointLocation = function (output, context) {
    var contents = {
        __type: "EndpointLocation",
        City: undefined,
        Country: undefined,
        Latitude: undefined,
        Longitude: undefined,
        PostalCode: undefined,
        Region: undefined
    };
    if (output.City !== undefined && output.City !== null) {
        contents.City = output.City;
    }
    if (output.Country !== undefined && output.Country !== null) {
        contents.Country = output.Country;
    }
    if (output.Latitude !== undefined && output.Latitude !== null) {
        contents.Latitude = output.Latitude;
    }
    if (output.Longitude !== undefined && output.Longitude !== null) {
        contents.Longitude = output.Longitude;
    }
    if (output.PostalCode !== undefined && output.PostalCode !== null) {
        contents.PostalCode = output.PostalCode;
    }
    if (output.Region !== undefined && output.Region !== null) {
        contents.Region = output.Region;
    }
    return contents;
};
var deserializeAws_restJson1_1EndpointMessageResult = function (output, context) {
    var contents = {
        __type: "EndpointMessageResult",
        Address: undefined,
        DeliveryStatus: undefined,
        MessageId: undefined,
        StatusCode: undefined,
        StatusMessage: undefined,
        UpdatedToken: undefined
    };
    if (output.Address !== undefined && output.Address !== null) {
        contents.Address = output.Address;
    }
    if (output.DeliveryStatus !== undefined && output.DeliveryStatus !== null) {
        contents.DeliveryStatus = output.DeliveryStatus;
    }
    if (output.MessageId !== undefined && output.MessageId !== null) {
        contents.MessageId = output.MessageId;
    }
    if (output.StatusCode !== undefined && output.StatusCode !== null) {
        contents.StatusCode = output.StatusCode;
    }
    if (output.StatusMessage !== undefined && output.StatusMessage !== null) {
        contents.StatusMessage = output.StatusMessage;
    }
    if (output.UpdatedToken !== undefined && output.UpdatedToken !== null) {
        contents.UpdatedToken = output.UpdatedToken;
    }
    return contents;
};
var deserializeAws_restJson1_1EndpointResponse = function (output, context) {
    var contents = {
        __type: "EndpointResponse",
        Address: undefined,
        ApplicationId: undefined,
        Attributes: undefined,
        ChannelType: undefined,
        CohortId: undefined,
        CreationDate: undefined,
        Demographic: undefined,
        EffectiveDate: undefined,
        EndpointStatus: undefined,
        Id: undefined,
        Location: undefined,
        Metrics: undefined,
        OptOut: undefined,
        RequestId: undefined,
        User: undefined
    };
    if (output.Address !== undefined && output.Address !== null) {
        contents.Address = output.Address;
    }
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.Attributes !== undefined && output.Attributes !== null) {
        contents.Attributes = deserializeAws_restJson1_1MapOfListOf__string(output.Attributes, context);
    }
    if (output.ChannelType !== undefined && output.ChannelType !== null) {
        contents.ChannelType = output.ChannelType;
    }
    if (output.CohortId !== undefined && output.CohortId !== null) {
        contents.CohortId = output.CohortId;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.Demographic !== undefined && output.Demographic !== null) {
        contents.Demographic = deserializeAws_restJson1_1EndpointDemographic(output.Demographic, context);
    }
    if (output.EffectiveDate !== undefined && output.EffectiveDate !== null) {
        contents.EffectiveDate = output.EffectiveDate;
    }
    if (output.EndpointStatus !== undefined && output.EndpointStatus !== null) {
        contents.EndpointStatus = output.EndpointStatus;
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.Location !== undefined && output.Location !== null) {
        contents.Location = deserializeAws_restJson1_1EndpointLocation(output.Location, context);
    }
    if (output.Metrics !== undefined && output.Metrics !== null) {
        contents.Metrics = deserializeAws_restJson1_1MapOf__double(output.Metrics, context);
    }
    if (output.OptOut !== undefined && output.OptOut !== null) {
        contents.OptOut = output.OptOut;
    }
    if (output.RequestId !== undefined && output.RequestId !== null) {
        contents.RequestId = output.RequestId;
    }
    if (output.User !== undefined && output.User !== null) {
        contents.User = deserializeAws_restJson1_1EndpointUser(output.User, context);
    }
    return contents;
};
var deserializeAws_restJson1_1EndpointUser = function (output, context) {
    var contents = {
        __type: "EndpointUser",
        UserAttributes: undefined,
        UserId: undefined
    };
    if (output.UserAttributes !== undefined && output.UserAttributes !== null) {
        contents.UserAttributes = deserializeAws_restJson1_1MapOfListOf__string(output.UserAttributes, context);
    }
    if (output.UserId !== undefined && output.UserId !== null) {
        contents.UserId = output.UserId;
    }
    return contents;
};
var deserializeAws_restJson1_1EndpointsResponse = function (output, context) {
    var contents = {
        __type: "EndpointsResponse",
        Item: undefined
    };
    if (output.Item !== undefined && output.Item !== null) {
        contents.Item = deserializeAws_restJson1_1ListOfEndpointResponse(output.Item, context);
    }
    return contents;
};
var deserializeAws_restJson1_1EventCondition = function (output, context) {
    var contents = {
        __type: "EventCondition",
        Dimensions: undefined,
        MessageActivity: undefined
    };
    if (output.Dimensions !== undefined && output.Dimensions !== null) {
        contents.Dimensions = deserializeAws_restJson1_1EventDimensions(output.Dimensions, context);
    }
    if (output.MessageActivity !== undefined && output.MessageActivity !== null) {
        contents.MessageActivity = output.MessageActivity;
    }
    return contents;
};
var deserializeAws_restJson1_1EventDimensions = function (output, context) {
    var contents = {
        __type: "EventDimensions",
        Attributes: undefined,
        EventType: undefined,
        Metrics: undefined
    };
    if (output.Attributes !== undefined && output.Attributes !== null) {
        contents.Attributes = deserializeAws_restJson1_1MapOfAttributeDimension(output.Attributes, context);
    }
    if (output.EventType !== undefined && output.EventType !== null) {
        contents.EventType = deserializeAws_restJson1_1SetDimension(output.EventType, context);
    }
    if (output.Metrics !== undefined && output.Metrics !== null) {
        contents.Metrics = deserializeAws_restJson1_1MapOfMetricDimension(output.Metrics, context);
    }
    return contents;
};
var deserializeAws_restJson1_1EventItemResponse = function (output, context) {
    var contents = {
        __type: "EventItemResponse",
        Message: undefined,
        StatusCode: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    if (output.StatusCode !== undefined && output.StatusCode !== null) {
        contents.StatusCode = output.StatusCode;
    }
    return contents;
};
var deserializeAws_restJson1_1EventStream = function (output, context) {
    var contents = {
        __type: "EventStream",
        ApplicationId: undefined,
        DestinationStreamArn: undefined,
        ExternalId: undefined,
        LastModifiedDate: undefined,
        LastUpdatedBy: undefined,
        RoleArn: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.DestinationStreamArn !== undefined &&
        output.DestinationStreamArn !== null) {
        contents.DestinationStreamArn = output.DestinationStreamArn;
    }
    if (output.ExternalId !== undefined && output.ExternalId !== null) {
        contents.ExternalId = output.ExternalId;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.LastUpdatedBy !== undefined && output.LastUpdatedBy !== null) {
        contents.LastUpdatedBy = output.LastUpdatedBy;
    }
    if (output.RoleArn !== undefined && output.RoleArn !== null) {
        contents.RoleArn = output.RoleArn;
    }
    return contents;
};
var deserializeAws_restJson1_1EventsResponse = function (output, context) {
    var contents = {
        __type: "EventsResponse",
        Results: undefined
    };
    if (output.Results !== undefined && output.Results !== null) {
        contents.Results = deserializeAws_restJson1_1MapOfItemResponse(output.Results, context);
    }
    return contents;
};
var deserializeAws_restJson1_1ExportJobResource = function (output, context) {
    var contents = {
        __type: "ExportJobResource",
        RoleArn: undefined,
        S3UrlPrefix: undefined,
        SegmentId: undefined,
        SegmentVersion: undefined
    };
    if (output.RoleArn !== undefined && output.RoleArn !== null) {
        contents.RoleArn = output.RoleArn;
    }
    if (output.S3UrlPrefix !== undefined && output.S3UrlPrefix !== null) {
        contents.S3UrlPrefix = output.S3UrlPrefix;
    }
    if (output.SegmentId !== undefined && output.SegmentId !== null) {
        contents.SegmentId = output.SegmentId;
    }
    if (output.SegmentVersion !== undefined && output.SegmentVersion !== null) {
        contents.SegmentVersion = output.SegmentVersion;
    }
    return contents;
};
var deserializeAws_restJson1_1ExportJobResponse = function (output, context) {
    var contents = {
        __type: "ExportJobResponse",
        ApplicationId: undefined,
        CompletedPieces: undefined,
        CompletionDate: undefined,
        CreationDate: undefined,
        Definition: undefined,
        FailedPieces: undefined,
        Failures: undefined,
        Id: undefined,
        JobStatus: undefined,
        TotalFailures: undefined,
        TotalPieces: undefined,
        TotalProcessed: undefined,
        Type: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.CompletedPieces !== undefined && output.CompletedPieces !== null) {
        contents.CompletedPieces = output.CompletedPieces;
    }
    if (output.CompletionDate !== undefined && output.CompletionDate !== null) {
        contents.CompletionDate = output.CompletionDate;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.Definition !== undefined && output.Definition !== null) {
        contents.Definition = deserializeAws_restJson1_1ExportJobResource(output.Definition, context);
    }
    if (output.FailedPieces !== undefined && output.FailedPieces !== null) {
        contents.FailedPieces = output.FailedPieces;
    }
    if (output.Failures !== undefined && output.Failures !== null) {
        contents.Failures = deserializeAws_restJson1_1ListOf__string(output.Failures, context);
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    if (output.TotalFailures !== undefined && output.TotalFailures !== null) {
        contents.TotalFailures = output.TotalFailures;
    }
    if (output.TotalPieces !== undefined && output.TotalPieces !== null) {
        contents.TotalPieces = output.TotalPieces;
    }
    if (output.TotalProcessed !== undefined && output.TotalProcessed !== null) {
        contents.TotalProcessed = output.TotalProcessed;
    }
    if (output.Type !== undefined && output.Type !== null) {
        contents.Type = output.Type;
    }
    return contents;
};
var deserializeAws_restJson1_1ExportJobsResponse = function (output, context) {
    var contents = {
        __type: "ExportJobsResponse",
        Item: undefined,
        NextToken: undefined
    };
    if (output.Item !== undefined && output.Item !== null) {
        contents.Item = deserializeAws_restJson1_1ListOfExportJobResponse(output.Item, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    return contents;
};
var deserializeAws_restJson1_1GCMChannelResponse = function (output, context) {
    var contents = {
        __type: "GCMChannelResponse",
        ApplicationId: undefined,
        CreationDate: undefined,
        Credential: undefined,
        Enabled: undefined,
        HasCredential: undefined,
        Id: undefined,
        IsArchived: undefined,
        LastModifiedBy: undefined,
        LastModifiedDate: undefined,
        Platform: undefined,
        Version: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.Credential !== undefined && output.Credential !== null) {
        contents.Credential = output.Credential;
    }
    if (output.Enabled !== undefined && output.Enabled !== null) {
        contents.Enabled = output.Enabled;
    }
    if (output.HasCredential !== undefined && output.HasCredential !== null) {
        contents.HasCredential = output.HasCredential;
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.IsArchived !== undefined && output.IsArchived !== null) {
        contents.IsArchived = output.IsArchived;
    }
    if (output.LastModifiedBy !== undefined && output.LastModifiedBy !== null) {
        contents.LastModifiedBy = output.LastModifiedBy;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.Platform !== undefined && output.Platform !== null) {
        contents.Platform = output.Platform;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    return contents;
};
var deserializeAws_restJson1_1GPSCoordinates = function (output, context) {
    var contents = {
        __type: "GPSCoordinates",
        Latitude: undefined,
        Longitude: undefined
    };
    if (output.Latitude !== undefined && output.Latitude !== null) {
        contents.Latitude = output.Latitude;
    }
    if (output.Longitude !== undefined && output.Longitude !== null) {
        contents.Longitude = output.Longitude;
    }
    return contents;
};
var deserializeAws_restJson1_1GPSPointDimension = function (output, context) {
    var contents = {
        __type: "GPSPointDimension",
        Coordinates: undefined,
        RangeInKilometers: undefined
    };
    if (output.Coordinates !== undefined && output.Coordinates !== null) {
        contents.Coordinates = deserializeAws_restJson1_1GPSCoordinates(output.Coordinates, context);
    }
    if (output.RangeInKilometers !== undefined &&
        output.RangeInKilometers !== null) {
        contents.RangeInKilometers = output.RangeInKilometers;
    }
    return contents;
};
var deserializeAws_restJson1_1HoldoutActivity = function (output, context) {
    var contents = {
        __type: "HoldoutActivity",
        NextActivity: undefined,
        Percentage: undefined
    };
    if (output.NextActivity !== undefined && output.NextActivity !== null) {
        contents.NextActivity = output.NextActivity;
    }
    if (output.Percentage !== undefined && output.Percentage !== null) {
        contents.Percentage = output.Percentage;
    }
    return contents;
};
var deserializeAws_restJson1_1ImportJobResource = function (output, context) {
    var contents = {
        __type: "ImportJobResource",
        DefineSegment: undefined,
        ExternalId: undefined,
        Format: undefined,
        RegisterEndpoints: undefined,
        RoleArn: undefined,
        S3Url: undefined,
        SegmentId: undefined,
        SegmentName: undefined
    };
    if (output.DefineSegment !== undefined && output.DefineSegment !== null) {
        contents.DefineSegment = output.DefineSegment;
    }
    if (output.ExternalId !== undefined && output.ExternalId !== null) {
        contents.ExternalId = output.ExternalId;
    }
    if (output.Format !== undefined && output.Format !== null) {
        contents.Format = output.Format;
    }
    if (output.RegisterEndpoints !== undefined &&
        output.RegisterEndpoints !== null) {
        contents.RegisterEndpoints = output.RegisterEndpoints;
    }
    if (output.RoleArn !== undefined && output.RoleArn !== null) {
        contents.RoleArn = output.RoleArn;
    }
    if (output.S3Url !== undefined && output.S3Url !== null) {
        contents.S3Url = output.S3Url;
    }
    if (output.SegmentId !== undefined && output.SegmentId !== null) {
        contents.SegmentId = output.SegmentId;
    }
    if (output.SegmentName !== undefined && output.SegmentName !== null) {
        contents.SegmentName = output.SegmentName;
    }
    return contents;
};
var deserializeAws_restJson1_1ImportJobResponse = function (output, context) {
    var contents = {
        __type: "ImportJobResponse",
        ApplicationId: undefined,
        CompletedPieces: undefined,
        CompletionDate: undefined,
        CreationDate: undefined,
        Definition: undefined,
        FailedPieces: undefined,
        Failures: undefined,
        Id: undefined,
        JobStatus: undefined,
        TotalFailures: undefined,
        TotalPieces: undefined,
        TotalProcessed: undefined,
        Type: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.CompletedPieces !== undefined && output.CompletedPieces !== null) {
        contents.CompletedPieces = output.CompletedPieces;
    }
    if (output.CompletionDate !== undefined && output.CompletionDate !== null) {
        contents.CompletionDate = output.CompletionDate;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.Definition !== undefined && output.Definition !== null) {
        contents.Definition = deserializeAws_restJson1_1ImportJobResource(output.Definition, context);
    }
    if (output.FailedPieces !== undefined && output.FailedPieces !== null) {
        contents.FailedPieces = output.FailedPieces;
    }
    if (output.Failures !== undefined && output.Failures !== null) {
        contents.Failures = deserializeAws_restJson1_1ListOf__string(output.Failures, context);
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    if (output.TotalFailures !== undefined && output.TotalFailures !== null) {
        contents.TotalFailures = output.TotalFailures;
    }
    if (output.TotalPieces !== undefined && output.TotalPieces !== null) {
        contents.TotalPieces = output.TotalPieces;
    }
    if (output.TotalProcessed !== undefined && output.TotalProcessed !== null) {
        contents.TotalProcessed = output.TotalProcessed;
    }
    if (output.Type !== undefined && output.Type !== null) {
        contents.Type = output.Type;
    }
    return contents;
};
var deserializeAws_restJson1_1ImportJobsResponse = function (output, context) {
    var contents = {
        __type: "ImportJobsResponse",
        Item: undefined,
        NextToken: undefined
    };
    if (output.Item !== undefined && output.Item !== null) {
        contents.Item = deserializeAws_restJson1_1ListOfImportJobResponse(output.Item, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    return contents;
};
var deserializeAws_restJson1_1ItemResponse = function (output, context) {
    var contents = {
        __type: "ItemResponse",
        EndpointItemResponse: undefined,
        EventsItemResponse: undefined
    };
    if (output.EndpointItemResponse !== undefined &&
        output.EndpointItemResponse !== null) {
        contents.EndpointItemResponse = deserializeAws_restJson1_1EndpointItemResponse(output.EndpointItemResponse, context);
    }
    if (output.EventsItemResponse !== undefined &&
        output.EventsItemResponse !== null) {
        contents.EventsItemResponse = deserializeAws_restJson1_1MapOfEventItemResponse(output.EventsItemResponse, context);
    }
    return contents;
};
var deserializeAws_restJson1_1JourneyDateRangeKpiResponse = function (output, context) {
    var contents = {
        __type: "JourneyDateRangeKpiResponse",
        ApplicationId: undefined,
        EndTime: undefined,
        JourneyId: undefined,
        KpiName: undefined,
        KpiResult: undefined,
        NextToken: undefined,
        StartTime: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.EndTime !== undefined && output.EndTime !== null) {
        contents.EndTime = new Date(output.EndTime);
    }
    if (output.JourneyId !== undefined && output.JourneyId !== null) {
        contents.JourneyId = output.JourneyId;
    }
    if (output.KpiName !== undefined && output.KpiName !== null) {
        contents.KpiName = output.KpiName;
    }
    if (output.KpiResult !== undefined && output.KpiResult !== null) {
        contents.KpiResult = deserializeAws_restJson1_1BaseKpiResult(output.KpiResult, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    if (output.StartTime !== undefined && output.StartTime !== null) {
        contents.StartTime = new Date(output.StartTime);
    }
    return contents;
};
var deserializeAws_restJson1_1JourneyEmailMessage = function (output, context) {
    var contents = {
        __type: "JourneyEmailMessage",
        FromAddress: undefined
    };
    if (output.FromAddress !== undefined && output.FromAddress !== null) {
        contents.FromAddress = output.FromAddress;
    }
    return contents;
};
var deserializeAws_restJson1_1JourneyExecutionActivityMetricsResponse = function (output, context) {
    var contents = {
        __type: "JourneyExecutionActivityMetricsResponse",
        ActivityType: undefined,
        ApplicationId: undefined,
        JourneyActivityId: undefined,
        JourneyId: undefined,
        LastEvaluatedTime: undefined,
        Metrics: undefined
    };
    if (output.ActivityType !== undefined && output.ActivityType !== null) {
        contents.ActivityType = output.ActivityType;
    }
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.JourneyActivityId !== undefined &&
        output.JourneyActivityId !== null) {
        contents.JourneyActivityId = output.JourneyActivityId;
    }
    if (output.JourneyId !== undefined && output.JourneyId !== null) {
        contents.JourneyId = output.JourneyId;
    }
    if (output.LastEvaluatedTime !== undefined &&
        output.LastEvaluatedTime !== null) {
        contents.LastEvaluatedTime = output.LastEvaluatedTime;
    }
    if (output.Metrics !== undefined && output.Metrics !== null) {
        contents.Metrics = deserializeAws_restJson1_1MapOf__string(output.Metrics, context);
    }
    return contents;
};
var deserializeAws_restJson1_1JourneyExecutionMetricsResponse = function (output, context) {
    var contents = {
        __type: "JourneyExecutionMetricsResponse",
        ApplicationId: undefined,
        JourneyId: undefined,
        LastEvaluatedTime: undefined,
        Metrics: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.JourneyId !== undefined && output.JourneyId !== null) {
        contents.JourneyId = output.JourneyId;
    }
    if (output.LastEvaluatedTime !== undefined &&
        output.LastEvaluatedTime !== null) {
        contents.LastEvaluatedTime = output.LastEvaluatedTime;
    }
    if (output.Metrics !== undefined && output.Metrics !== null) {
        contents.Metrics = deserializeAws_restJson1_1MapOf__string(output.Metrics, context);
    }
    return contents;
};
var deserializeAws_restJson1_1JourneyLimits = function (output, context) {
    var contents = {
        __type: "JourneyLimits",
        DailyCap: undefined,
        EndpointReentryCap: undefined,
        MessagesPerSecond: undefined
    };
    if (output.DailyCap !== undefined && output.DailyCap !== null) {
        contents.DailyCap = output.DailyCap;
    }
    if (output.EndpointReentryCap !== undefined &&
        output.EndpointReentryCap !== null) {
        contents.EndpointReentryCap = output.EndpointReentryCap;
    }
    if (output.MessagesPerSecond !== undefined &&
        output.MessagesPerSecond !== null) {
        contents.MessagesPerSecond = output.MessagesPerSecond;
    }
    return contents;
};
var deserializeAws_restJson1_1JourneyResponse = function (output, context) {
    var contents = {
        __type: "JourneyResponse",
        Activities: undefined,
        ApplicationId: undefined,
        CreationDate: undefined,
        Id: undefined,
        LastModifiedDate: undefined,
        Limits: undefined,
        LocalTime: undefined,
        Name: undefined,
        QuietTime: undefined,
        RefreshFrequency: undefined,
        Schedule: undefined,
        StartActivity: undefined,
        StartCondition: undefined,
        State: undefined,
        tags: undefined
    };
    if (output.Activities !== undefined && output.Activities !== null) {
        contents.Activities = deserializeAws_restJson1_1MapOfActivity(output.Activities, context);
    }
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.Limits !== undefined && output.Limits !== null) {
        contents.Limits = deserializeAws_restJson1_1JourneyLimits(output.Limits, context);
    }
    if (output.LocalTime !== undefined && output.LocalTime !== null) {
        contents.LocalTime = output.LocalTime;
    }
    if (output.Name !== undefined && output.Name !== null) {
        contents.Name = output.Name;
    }
    if (output.QuietTime !== undefined && output.QuietTime !== null) {
        contents.QuietTime = deserializeAws_restJson1_1QuietTime(output.QuietTime, context);
    }
    if (output.RefreshFrequency !== undefined &&
        output.RefreshFrequency !== null) {
        contents.RefreshFrequency = output.RefreshFrequency;
    }
    if (output.Schedule !== undefined && output.Schedule !== null) {
        contents.Schedule = deserializeAws_restJson1_1JourneySchedule(output.Schedule, context);
    }
    if (output.StartActivity !== undefined && output.StartActivity !== null) {
        contents.StartActivity = output.StartActivity;
    }
    if (output.StartCondition !== undefined && output.StartCondition !== null) {
        contents.StartCondition = deserializeAws_restJson1_1StartCondition(output.StartCondition, context);
    }
    if (output.State !== undefined && output.State !== null) {
        contents.State = output.State;
    }
    if (output.tags !== undefined && output.tags !== null) {
        contents.tags = deserializeAws_restJson1_1MapOf__string(output.tags, context);
    }
    return contents;
};
var deserializeAws_restJson1_1JourneySchedule = function (output, context) {
    var contents = {
        __type: "JourneySchedule",
        EndTime: undefined,
        StartTime: undefined,
        Timezone: undefined
    };
    if (output.EndTime !== undefined && output.EndTime !== null) {
        contents.EndTime = new Date(output.EndTime);
    }
    if (output.StartTime !== undefined && output.StartTime !== null) {
        contents.StartTime = new Date(output.StartTime);
    }
    if (output.Timezone !== undefined && output.Timezone !== null) {
        contents.Timezone = output.Timezone;
    }
    return contents;
};
var deserializeAws_restJson1_1JourneysResponse = function (output, context) {
    var contents = {
        __type: "JourneysResponse",
        Item: undefined,
        NextToken: undefined
    };
    if (output.Item !== undefined && output.Item !== null) {
        contents.Item = deserializeAws_restJson1_1ListOfJourneyResponse(output.Item, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    return contents;
};
var deserializeAws_restJson1_1ListOfActivityResponse = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1ActivityResponse(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfApplicationResponse = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1ApplicationResponse(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfCampaignResponse = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1CampaignResponse(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfEndpointResponse = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1EndpointResponse(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfExportJobResponse = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1ExportJobResponse(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfImportJobResponse = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1ImportJobResponse(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfJourneyResponse = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1JourneyResponse(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfMultiConditionalBranch = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1MultiConditionalBranch(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfRandomSplitEntry = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1RandomSplitEntry(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfResultRow = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1ResultRow(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfResultRowValue = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1ResultRowValue(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfSegmentDimensions = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1SegmentDimensions(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfSegmentGroup = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1SegmentGroup(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfSegmentReference = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1SegmentReference(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfSegmentResponse = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1SegmentResponse(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfSimpleCondition = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1SimpleCondition(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfTemplateResponse = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1TemplateResponse(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfTemplateVersionResponse = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1TemplateVersionResponse(entry, context);
    });
};
var deserializeAws_restJson1_1ListOfTreatmentResource = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1TreatmentResource(entry, context);
    });
};
var deserializeAws_restJson1_1ListOf__string = function (output, context) {
    return (output || []).map(function (entry) { return entry; });
};
var deserializeAws_restJson1_1MapOfActivity = function (output, context) {
    var mapParams = {};
    Object.keys(output).forEach(function (key) {
        mapParams[key] = deserializeAws_restJson1_1Activity(output[key], context);
    });
    return mapParams;
};
var deserializeAws_restJson1_1MapOfAttributeDimension = function (output, context) {
    var mapParams = {};
    Object.keys(output).forEach(function (key) {
        mapParams[key] = deserializeAws_restJson1_1AttributeDimension(output[key], context);
    });
    return mapParams;
};
var deserializeAws_restJson1_1MapOfChannelResponse = function (output, context) {
    var mapParams = {};
    Object.keys(output).forEach(function (key) {
        mapParams[key] = deserializeAws_restJson1_1ChannelResponse(output[key], context);
    });
    return mapParams;
};
var deserializeAws_restJson1_1MapOfEndpointMessageResult = function (output, context) {
    var mapParams = {};
    Object.keys(output).forEach(function (key) {
        mapParams[key] = deserializeAws_restJson1_1EndpointMessageResult(output[key], context);
    });
    return mapParams;
};
var deserializeAws_restJson1_1MapOfEventItemResponse = function (output, context) {
    var mapParams = {};
    Object.keys(output).forEach(function (key) {
        mapParams[key] = deserializeAws_restJson1_1EventItemResponse(output[key], context);
    });
    return mapParams;
};
var deserializeAws_restJson1_1MapOfItemResponse = function (output, context) {
    var mapParams = {};
    Object.keys(output).forEach(function (key) {
        mapParams[key] = deserializeAws_restJson1_1ItemResponse(output[key], context);
    });
    return mapParams;
};
var deserializeAws_restJson1_1MapOfListOf__string = function (output, context) {
    var mapParams = {};
    Object.keys(output).forEach(function (key) {
        mapParams[key] = deserializeAws_restJson1_1ListOf__string(output[key], context);
    });
    return mapParams;
};
var deserializeAws_restJson1_1MapOfMapOfEndpointMessageResult = function (output, context) {
    var mapParams = {};
    Object.keys(output).forEach(function (key) {
        mapParams[key] = deserializeAws_restJson1_1MapOfEndpointMessageResult(output[key], context);
    });
    return mapParams;
};
var deserializeAws_restJson1_1MapOfMessageResult = function (output, context) {
    var mapParams = {};
    Object.keys(output).forEach(function (key) {
        mapParams[key] = deserializeAws_restJson1_1MessageResult(output[key], context);
    });
    return mapParams;
};
var deserializeAws_restJson1_1MapOfMetricDimension = function (output, context) {
    var mapParams = {};
    Object.keys(output).forEach(function (key) {
        mapParams[key] = deserializeAws_restJson1_1MetricDimension(output[key], context);
    });
    return mapParams;
};
var deserializeAws_restJson1_1MapOf__double = function (output, context) {
    var mapParams = {};
    Object.keys(output).forEach(function (key) {
        mapParams[key] = output[key];
    });
    return mapParams;
};
var deserializeAws_restJson1_1MapOf__integer = function (output, context) {
    var mapParams = {};
    Object.keys(output).forEach(function (key) {
        mapParams[key] = output[key];
    });
    return mapParams;
};
var deserializeAws_restJson1_1MapOf__string = function (output, context) {
    var mapParams = {};
    Object.keys(output).forEach(function (key) {
        mapParams[key] = output[key];
    });
    return mapParams;
};
var deserializeAws_restJson1_1Message = function (output, context) {
    var contents = {
        __type: "Message",
        Action: undefined,
        Body: undefined,
        ImageIconUrl: undefined,
        ImageSmallIconUrl: undefined,
        ImageUrl: undefined,
        JsonBody: undefined,
        MediaUrl: undefined,
        RawContent: undefined,
        SilentPush: undefined,
        TimeToLive: undefined,
        Title: undefined,
        Url: undefined
    };
    if (output.Action !== undefined && output.Action !== null) {
        contents.Action = output.Action;
    }
    if (output.Body !== undefined && output.Body !== null) {
        contents.Body = output.Body;
    }
    if (output.ImageIconUrl !== undefined && output.ImageIconUrl !== null) {
        contents.ImageIconUrl = output.ImageIconUrl;
    }
    if (output.ImageSmallIconUrl !== undefined &&
        output.ImageSmallIconUrl !== null) {
        contents.ImageSmallIconUrl = output.ImageSmallIconUrl;
    }
    if (output.ImageUrl !== undefined && output.ImageUrl !== null) {
        contents.ImageUrl = output.ImageUrl;
    }
    if (output.JsonBody !== undefined && output.JsonBody !== null) {
        contents.JsonBody = output.JsonBody;
    }
    if (output.MediaUrl !== undefined && output.MediaUrl !== null) {
        contents.MediaUrl = output.MediaUrl;
    }
    if (output.RawContent !== undefined && output.RawContent !== null) {
        contents.RawContent = output.RawContent;
    }
    if (output.SilentPush !== undefined && output.SilentPush !== null) {
        contents.SilentPush = output.SilentPush;
    }
    if (output.TimeToLive !== undefined && output.TimeToLive !== null) {
        contents.TimeToLive = output.TimeToLive;
    }
    if (output.Title !== undefined && output.Title !== null) {
        contents.Title = output.Title;
    }
    if (output.Url !== undefined && output.Url !== null) {
        contents.Url = output.Url;
    }
    return contents;
};
var deserializeAws_restJson1_1MessageBody = function (output, context) {
    var contents = {
        __type: "MessageBody",
        Message: undefined,
        RequestID: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    if (output.RequestID !== undefined && output.RequestID !== null) {
        contents.RequestID = output.RequestID;
    }
    return contents;
};
var deserializeAws_restJson1_1MessageConfiguration = function (output, context) {
    var contents = {
        __type: "MessageConfiguration",
        ADMMessage: undefined,
        APNSMessage: undefined,
        BaiduMessage: undefined,
        DefaultMessage: undefined,
        EmailMessage: undefined,
        GCMMessage: undefined,
        SMSMessage: undefined
    };
    if (output.ADMMessage !== undefined && output.ADMMessage !== null) {
        contents.ADMMessage = deserializeAws_restJson1_1Message(output.ADMMessage, context);
    }
    if (output.APNSMessage !== undefined && output.APNSMessage !== null) {
        contents.APNSMessage = deserializeAws_restJson1_1Message(output.APNSMessage, context);
    }
    if (output.BaiduMessage !== undefined && output.BaiduMessage !== null) {
        contents.BaiduMessage = deserializeAws_restJson1_1Message(output.BaiduMessage, context);
    }
    if (output.DefaultMessage !== undefined && output.DefaultMessage !== null) {
        contents.DefaultMessage = deserializeAws_restJson1_1Message(output.DefaultMessage, context);
    }
    if (output.EmailMessage !== undefined && output.EmailMessage !== null) {
        contents.EmailMessage = deserializeAws_restJson1_1CampaignEmailMessage(output.EmailMessage, context);
    }
    if (output.GCMMessage !== undefined && output.GCMMessage !== null) {
        contents.GCMMessage = deserializeAws_restJson1_1Message(output.GCMMessage, context);
    }
    if (output.SMSMessage !== undefined && output.SMSMessage !== null) {
        contents.SMSMessage = deserializeAws_restJson1_1CampaignSmsMessage(output.SMSMessage, context);
    }
    return contents;
};
var deserializeAws_restJson1_1MessageResponse = function (output, context) {
    var contents = {
        __type: "MessageResponse",
        ApplicationId: undefined,
        EndpointResult: undefined,
        RequestId: undefined,
        Result: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.EndpointResult !== undefined && output.EndpointResult !== null) {
        contents.EndpointResult = deserializeAws_restJson1_1MapOfEndpointMessageResult(output.EndpointResult, context);
    }
    if (output.RequestId !== undefined && output.RequestId !== null) {
        contents.RequestId = output.RequestId;
    }
    if (output.Result !== undefined && output.Result !== null) {
        contents.Result = deserializeAws_restJson1_1MapOfMessageResult(output.Result, context);
    }
    return contents;
};
var deserializeAws_restJson1_1MessageResult = function (output, context) {
    var contents = {
        __type: "MessageResult",
        DeliveryStatus: undefined,
        MessageId: undefined,
        StatusCode: undefined,
        StatusMessage: undefined,
        UpdatedToken: undefined
    };
    if (output.DeliveryStatus !== undefined && output.DeliveryStatus !== null) {
        contents.DeliveryStatus = output.DeliveryStatus;
    }
    if (output.MessageId !== undefined && output.MessageId !== null) {
        contents.MessageId = output.MessageId;
    }
    if (output.StatusCode !== undefined && output.StatusCode !== null) {
        contents.StatusCode = output.StatusCode;
    }
    if (output.StatusMessage !== undefined && output.StatusMessage !== null) {
        contents.StatusMessage = output.StatusMessage;
    }
    if (output.UpdatedToken !== undefined && output.UpdatedToken !== null) {
        contents.UpdatedToken = output.UpdatedToken;
    }
    return contents;
};
var deserializeAws_restJson1_1MetricDimension = function (output, context) {
    var contents = {
        __type: "MetricDimension",
        ComparisonOperator: undefined,
        Value: undefined
    };
    if (output.ComparisonOperator !== undefined &&
        output.ComparisonOperator !== null) {
        contents.ComparisonOperator = output.ComparisonOperator;
    }
    if (output.Value !== undefined && output.Value !== null) {
        contents.Value = output.Value;
    }
    return contents;
};
var deserializeAws_restJson1_1MultiConditionalBranch = function (output, context) {
    var contents = {
        __type: "MultiConditionalBranch",
        Condition: undefined,
        NextActivity: undefined
    };
    if (output.Condition !== undefined && output.Condition !== null) {
        contents.Condition = deserializeAws_restJson1_1SimpleCondition(output.Condition, context);
    }
    if (output.NextActivity !== undefined && output.NextActivity !== null) {
        contents.NextActivity = output.NextActivity;
    }
    return contents;
};
var deserializeAws_restJson1_1MultiConditionalSplitActivity = function (output, context) {
    var contents = {
        __type: "MultiConditionalSplitActivity",
        Branches: undefined,
        DefaultActivity: undefined,
        EvaluationWaitTime: undefined
    };
    if (output.Branches !== undefined && output.Branches !== null) {
        contents.Branches = deserializeAws_restJson1_1ListOfMultiConditionalBranch(output.Branches, context);
    }
    if (output.DefaultActivity !== undefined && output.DefaultActivity !== null) {
        contents.DefaultActivity = output.DefaultActivity;
    }
    if (output.EvaluationWaitTime !== undefined &&
        output.EvaluationWaitTime !== null) {
        contents.EvaluationWaitTime = deserializeAws_restJson1_1WaitTime(output.EvaluationWaitTime, context);
    }
    return contents;
};
var deserializeAws_restJson1_1NumberValidateResponse = function (output, context) {
    var contents = {
        __type: "NumberValidateResponse",
        Carrier: undefined,
        City: undefined,
        CleansedPhoneNumberE164: undefined,
        CleansedPhoneNumberNational: undefined,
        Country: undefined,
        CountryCodeIso2: undefined,
        CountryCodeNumeric: undefined,
        County: undefined,
        OriginalCountryCodeIso2: undefined,
        OriginalPhoneNumber: undefined,
        PhoneType: undefined,
        PhoneTypeCode: undefined,
        Timezone: undefined,
        ZipCode: undefined
    };
    if (output.Carrier !== undefined && output.Carrier !== null) {
        contents.Carrier = output.Carrier;
    }
    if (output.City !== undefined && output.City !== null) {
        contents.City = output.City;
    }
    if (output.CleansedPhoneNumberE164 !== undefined &&
        output.CleansedPhoneNumberE164 !== null) {
        contents.CleansedPhoneNumberE164 = output.CleansedPhoneNumberE164;
    }
    if (output.CleansedPhoneNumberNational !== undefined &&
        output.CleansedPhoneNumberNational !== null) {
        contents.CleansedPhoneNumberNational = output.CleansedPhoneNumberNational;
    }
    if (output.Country !== undefined && output.Country !== null) {
        contents.Country = output.Country;
    }
    if (output.CountryCodeIso2 !== undefined && output.CountryCodeIso2 !== null) {
        contents.CountryCodeIso2 = output.CountryCodeIso2;
    }
    if (output.CountryCodeNumeric !== undefined &&
        output.CountryCodeNumeric !== null) {
        contents.CountryCodeNumeric = output.CountryCodeNumeric;
    }
    if (output.County !== undefined && output.County !== null) {
        contents.County = output.County;
    }
    if (output.OriginalCountryCodeIso2 !== undefined &&
        output.OriginalCountryCodeIso2 !== null) {
        contents.OriginalCountryCodeIso2 = output.OriginalCountryCodeIso2;
    }
    if (output.OriginalPhoneNumber !== undefined &&
        output.OriginalPhoneNumber !== null) {
        contents.OriginalPhoneNumber = output.OriginalPhoneNumber;
    }
    if (output.PhoneType !== undefined && output.PhoneType !== null) {
        contents.PhoneType = output.PhoneType;
    }
    if (output.PhoneTypeCode !== undefined && output.PhoneTypeCode !== null) {
        contents.PhoneTypeCode = output.PhoneTypeCode;
    }
    if (output.Timezone !== undefined && output.Timezone !== null) {
        contents.Timezone = output.Timezone;
    }
    if (output.ZipCode !== undefined && output.ZipCode !== null) {
        contents.ZipCode = output.ZipCode;
    }
    return contents;
};
var deserializeAws_restJson1_1PushNotificationTemplateResponse = function (output, context) {
    var contents = {
        __type: "PushNotificationTemplateResponse",
        ADM: undefined,
        APNS: undefined,
        Arn: undefined,
        Baidu: undefined,
        CreationDate: undefined,
        Default: undefined,
        DefaultSubstitutions: undefined,
        GCM: undefined,
        LastModifiedDate: undefined,
        TemplateDescription: undefined,
        TemplateName: undefined,
        TemplateType: undefined,
        Version: undefined,
        tags: undefined
    };
    if (output.ADM !== undefined && output.ADM !== null) {
        contents.ADM = deserializeAws_restJson1_1AndroidPushNotificationTemplate(output.ADM, context);
    }
    if (output.APNS !== undefined && output.APNS !== null) {
        contents.APNS = deserializeAws_restJson1_1APNSPushNotificationTemplate(output.APNS, context);
    }
    if (output.Arn !== undefined && output.Arn !== null) {
        contents.Arn = output.Arn;
    }
    if (output.Baidu !== undefined && output.Baidu !== null) {
        contents.Baidu = deserializeAws_restJson1_1AndroidPushNotificationTemplate(output.Baidu, context);
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.Default !== undefined && output.Default !== null) {
        contents.Default = deserializeAws_restJson1_1DefaultPushNotificationTemplate(output.Default, context);
    }
    if (output.DefaultSubstitutions !== undefined &&
        output.DefaultSubstitutions !== null) {
        contents.DefaultSubstitutions = output.DefaultSubstitutions;
    }
    if (output.GCM !== undefined && output.GCM !== null) {
        contents.GCM = deserializeAws_restJson1_1AndroidPushNotificationTemplate(output.GCM, context);
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.TemplateDescription !== undefined &&
        output.TemplateDescription !== null) {
        contents.TemplateDescription = output.TemplateDescription;
    }
    if (output.TemplateName !== undefined && output.TemplateName !== null) {
        contents.TemplateName = output.TemplateName;
    }
    if (output.TemplateType !== undefined && output.TemplateType !== null) {
        contents.TemplateType = output.TemplateType;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    if (output.tags !== undefined && output.tags !== null) {
        contents.tags = deserializeAws_restJson1_1MapOf__string(output.tags, context);
    }
    return contents;
};
var deserializeAws_restJson1_1QuietTime = function (output, context) {
    var contents = {
        __type: "QuietTime",
        End: undefined,
        Start: undefined
    };
    if (output.End !== undefined && output.End !== null) {
        contents.End = output.End;
    }
    if (output.Start !== undefined && output.Start !== null) {
        contents.Start = output.Start;
    }
    return contents;
};
var deserializeAws_restJson1_1RandomSplitActivity = function (output, context) {
    var contents = {
        __type: "RandomSplitActivity",
        Branches: undefined
    };
    if (output.Branches !== undefined && output.Branches !== null) {
        contents.Branches = deserializeAws_restJson1_1ListOfRandomSplitEntry(output.Branches, context);
    }
    return contents;
};
var deserializeAws_restJson1_1RandomSplitEntry = function (output, context) {
    var contents = {
        __type: "RandomSplitEntry",
        NextActivity: undefined,
        Percentage: undefined
    };
    if (output.NextActivity !== undefined && output.NextActivity !== null) {
        contents.NextActivity = output.NextActivity;
    }
    if (output.Percentage !== undefined && output.Percentage !== null) {
        contents.Percentage = output.Percentage;
    }
    return contents;
};
var deserializeAws_restJson1_1RecencyDimension = function (output, context) {
    var contents = {
        __type: "RecencyDimension",
        Duration: undefined,
        RecencyType: undefined
    };
    if (output.Duration !== undefined && output.Duration !== null) {
        contents.Duration = output.Duration;
    }
    if (output.RecencyType !== undefined && output.RecencyType !== null) {
        contents.RecencyType = output.RecencyType;
    }
    return contents;
};
var deserializeAws_restJson1_1ResultRow = function (output, context) {
    var contents = {
        __type: "ResultRow",
        GroupedBys: undefined,
        Values: undefined
    };
    if (output.GroupedBys !== undefined && output.GroupedBys !== null) {
        contents.GroupedBys = deserializeAws_restJson1_1ListOfResultRowValue(output.GroupedBys, context);
    }
    if (output.Values !== undefined && output.Values !== null) {
        contents.Values = deserializeAws_restJson1_1ListOfResultRowValue(output.Values, context);
    }
    return contents;
};
var deserializeAws_restJson1_1ResultRowValue = function (output, context) {
    var contents = {
        __type: "ResultRowValue",
        Key: undefined,
        Type: undefined,
        Value: undefined
    };
    if (output.Key !== undefined && output.Key !== null) {
        contents.Key = output.Key;
    }
    if (output.Type !== undefined && output.Type !== null) {
        contents.Type = output.Type;
    }
    if (output.Value !== undefined && output.Value !== null) {
        contents.Value = output.Value;
    }
    return contents;
};
var deserializeAws_restJson1_1SMSChannelResponse = function (output, context) {
    var contents = {
        __type: "SMSChannelResponse",
        ApplicationId: undefined,
        CreationDate: undefined,
        Enabled: undefined,
        HasCredential: undefined,
        Id: undefined,
        IsArchived: undefined,
        LastModifiedBy: undefined,
        LastModifiedDate: undefined,
        Platform: undefined,
        PromotionalMessagesPerSecond: undefined,
        SenderId: undefined,
        ShortCode: undefined,
        TransactionalMessagesPerSecond: undefined,
        Version: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.Enabled !== undefined && output.Enabled !== null) {
        contents.Enabled = output.Enabled;
    }
    if (output.HasCredential !== undefined && output.HasCredential !== null) {
        contents.HasCredential = output.HasCredential;
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.IsArchived !== undefined && output.IsArchived !== null) {
        contents.IsArchived = output.IsArchived;
    }
    if (output.LastModifiedBy !== undefined && output.LastModifiedBy !== null) {
        contents.LastModifiedBy = output.LastModifiedBy;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.Platform !== undefined && output.Platform !== null) {
        contents.Platform = output.Platform;
    }
    if (output.PromotionalMessagesPerSecond !== undefined &&
        output.PromotionalMessagesPerSecond !== null) {
        contents.PromotionalMessagesPerSecond = output.PromotionalMessagesPerSecond;
    }
    if (output.SenderId !== undefined && output.SenderId !== null) {
        contents.SenderId = output.SenderId;
    }
    if (output.ShortCode !== undefined && output.ShortCode !== null) {
        contents.ShortCode = output.ShortCode;
    }
    if (output.TransactionalMessagesPerSecond !== undefined &&
        output.TransactionalMessagesPerSecond !== null) {
        contents.TransactionalMessagesPerSecond =
            output.TransactionalMessagesPerSecond;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    return contents;
};
var deserializeAws_restJson1_1SMSTemplateResponse = function (output, context) {
    var contents = {
        __type: "SMSTemplateResponse",
        Arn: undefined,
        Body: undefined,
        CreationDate: undefined,
        DefaultSubstitutions: undefined,
        LastModifiedDate: undefined,
        TemplateDescription: undefined,
        TemplateName: undefined,
        TemplateType: undefined,
        Version: undefined,
        tags: undefined
    };
    if (output.Arn !== undefined && output.Arn !== null) {
        contents.Arn = output.Arn;
    }
    if (output.Body !== undefined && output.Body !== null) {
        contents.Body = output.Body;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.DefaultSubstitutions !== undefined &&
        output.DefaultSubstitutions !== null) {
        contents.DefaultSubstitutions = output.DefaultSubstitutions;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.TemplateDescription !== undefined &&
        output.TemplateDescription !== null) {
        contents.TemplateDescription = output.TemplateDescription;
    }
    if (output.TemplateName !== undefined && output.TemplateName !== null) {
        contents.TemplateName = output.TemplateName;
    }
    if (output.TemplateType !== undefined && output.TemplateType !== null) {
        contents.TemplateType = output.TemplateType;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    if (output.tags !== undefined && output.tags !== null) {
        contents.tags = deserializeAws_restJson1_1MapOf__string(output.tags, context);
    }
    return contents;
};
var deserializeAws_restJson1_1Schedule = function (output, context) {
    var contents = {
        __type: "Schedule",
        EndTime: undefined,
        EventFilter: undefined,
        Frequency: undefined,
        IsLocalTime: undefined,
        QuietTime: undefined,
        StartTime: undefined,
        Timezone: undefined
    };
    if (output.EndTime !== undefined && output.EndTime !== null) {
        contents.EndTime = output.EndTime;
    }
    if (output.EventFilter !== undefined && output.EventFilter !== null) {
        contents.EventFilter = deserializeAws_restJson1_1CampaignEventFilter(output.EventFilter, context);
    }
    if (output.Frequency !== undefined && output.Frequency !== null) {
        contents.Frequency = output.Frequency;
    }
    if (output.IsLocalTime !== undefined && output.IsLocalTime !== null) {
        contents.IsLocalTime = output.IsLocalTime;
    }
    if (output.QuietTime !== undefined && output.QuietTime !== null) {
        contents.QuietTime = deserializeAws_restJson1_1QuietTime(output.QuietTime, context);
    }
    if (output.StartTime !== undefined && output.StartTime !== null) {
        contents.StartTime = output.StartTime;
    }
    if (output.Timezone !== undefined && output.Timezone !== null) {
        contents.Timezone = output.Timezone;
    }
    return contents;
};
var deserializeAws_restJson1_1SegmentBehaviors = function (output, context) {
    var contents = {
        __type: "SegmentBehaviors",
        Recency: undefined
    };
    if (output.Recency !== undefined && output.Recency !== null) {
        contents.Recency = deserializeAws_restJson1_1RecencyDimension(output.Recency, context);
    }
    return contents;
};
var deserializeAws_restJson1_1SegmentCondition = function (output, context) {
    var contents = {
        __type: "SegmentCondition",
        SegmentId: undefined
    };
    if (output.SegmentId !== undefined && output.SegmentId !== null) {
        contents.SegmentId = output.SegmentId;
    }
    return contents;
};
var deserializeAws_restJson1_1SegmentDemographics = function (output, context) {
    var contents = {
        __type: "SegmentDemographics",
        AppVersion: undefined,
        Channel: undefined,
        DeviceType: undefined,
        Make: undefined,
        Model: undefined,
        Platform: undefined
    };
    if (output.AppVersion !== undefined && output.AppVersion !== null) {
        contents.AppVersion = deserializeAws_restJson1_1SetDimension(output.AppVersion, context);
    }
    if (output.Channel !== undefined && output.Channel !== null) {
        contents.Channel = deserializeAws_restJson1_1SetDimension(output.Channel, context);
    }
    if (output.DeviceType !== undefined && output.DeviceType !== null) {
        contents.DeviceType = deserializeAws_restJson1_1SetDimension(output.DeviceType, context);
    }
    if (output.Make !== undefined && output.Make !== null) {
        contents.Make = deserializeAws_restJson1_1SetDimension(output.Make, context);
    }
    if (output.Model !== undefined && output.Model !== null) {
        contents.Model = deserializeAws_restJson1_1SetDimension(output.Model, context);
    }
    if (output.Platform !== undefined && output.Platform !== null) {
        contents.Platform = deserializeAws_restJson1_1SetDimension(output.Platform, context);
    }
    return contents;
};
var deserializeAws_restJson1_1SegmentDimensions = function (output, context) {
    var contents = {
        __type: "SegmentDimensions",
        Attributes: undefined,
        Behavior: undefined,
        Demographic: undefined,
        Location: undefined,
        Metrics: undefined,
        UserAttributes: undefined
    };
    if (output.Attributes !== undefined && output.Attributes !== null) {
        contents.Attributes = deserializeAws_restJson1_1MapOfAttributeDimension(output.Attributes, context);
    }
    if (output.Behavior !== undefined && output.Behavior !== null) {
        contents.Behavior = deserializeAws_restJson1_1SegmentBehaviors(output.Behavior, context);
    }
    if (output.Demographic !== undefined && output.Demographic !== null) {
        contents.Demographic = deserializeAws_restJson1_1SegmentDemographics(output.Demographic, context);
    }
    if (output.Location !== undefined && output.Location !== null) {
        contents.Location = deserializeAws_restJson1_1SegmentLocation(output.Location, context);
    }
    if (output.Metrics !== undefined && output.Metrics !== null) {
        contents.Metrics = deserializeAws_restJson1_1MapOfMetricDimension(output.Metrics, context);
    }
    if (output.UserAttributes !== undefined && output.UserAttributes !== null) {
        contents.UserAttributes = deserializeAws_restJson1_1MapOfAttributeDimension(output.UserAttributes, context);
    }
    return contents;
};
var deserializeAws_restJson1_1SegmentGroup = function (output, context) {
    var contents = {
        __type: "SegmentGroup",
        Dimensions: undefined,
        SourceSegments: undefined,
        SourceType: undefined,
        Type: undefined
    };
    if (output.Dimensions !== undefined && output.Dimensions !== null) {
        contents.Dimensions = deserializeAws_restJson1_1ListOfSegmentDimensions(output.Dimensions, context);
    }
    if (output.SourceSegments !== undefined && output.SourceSegments !== null) {
        contents.SourceSegments = deserializeAws_restJson1_1ListOfSegmentReference(output.SourceSegments, context);
    }
    if (output.SourceType !== undefined && output.SourceType !== null) {
        contents.SourceType = output.SourceType;
    }
    if (output.Type !== undefined && output.Type !== null) {
        contents.Type = output.Type;
    }
    return contents;
};
var deserializeAws_restJson1_1SegmentGroupList = function (output, context) {
    var contents = {
        __type: "SegmentGroupList",
        Groups: undefined,
        Include: undefined
    };
    if (output.Groups !== undefined && output.Groups !== null) {
        contents.Groups = deserializeAws_restJson1_1ListOfSegmentGroup(output.Groups, context);
    }
    if (output.Include !== undefined && output.Include !== null) {
        contents.Include = output.Include;
    }
    return contents;
};
var deserializeAws_restJson1_1SegmentImportResource = function (output, context) {
    var contents = {
        __type: "SegmentImportResource",
        ChannelCounts: undefined,
        ExternalId: undefined,
        Format: undefined,
        RoleArn: undefined,
        S3Url: undefined,
        Size: undefined
    };
    if (output.ChannelCounts !== undefined && output.ChannelCounts !== null) {
        contents.ChannelCounts = deserializeAws_restJson1_1MapOf__integer(output.ChannelCounts, context);
    }
    if (output.ExternalId !== undefined && output.ExternalId !== null) {
        contents.ExternalId = output.ExternalId;
    }
    if (output.Format !== undefined && output.Format !== null) {
        contents.Format = output.Format;
    }
    if (output.RoleArn !== undefined && output.RoleArn !== null) {
        contents.RoleArn = output.RoleArn;
    }
    if (output.S3Url !== undefined && output.S3Url !== null) {
        contents.S3Url = output.S3Url;
    }
    if (output.Size !== undefined && output.Size !== null) {
        contents.Size = output.Size;
    }
    return contents;
};
var deserializeAws_restJson1_1SegmentLocation = function (output, context) {
    var contents = {
        __type: "SegmentLocation",
        Country: undefined,
        GPSPoint: undefined
    };
    if (output.Country !== undefined && output.Country !== null) {
        contents.Country = deserializeAws_restJson1_1SetDimension(output.Country, context);
    }
    if (output.GPSPoint !== undefined && output.GPSPoint !== null) {
        contents.GPSPoint = deserializeAws_restJson1_1GPSPointDimension(output.GPSPoint, context);
    }
    return contents;
};
var deserializeAws_restJson1_1SegmentReference = function (output, context) {
    var contents = {
        __type: "SegmentReference",
        Id: undefined,
        Version: undefined
    };
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    return contents;
};
var deserializeAws_restJson1_1SegmentResponse = function (output, context) {
    var contents = {
        __type: "SegmentResponse",
        ApplicationId: undefined,
        Arn: undefined,
        CreationDate: undefined,
        Dimensions: undefined,
        Id: undefined,
        ImportDefinition: undefined,
        LastModifiedDate: undefined,
        Name: undefined,
        SegmentGroups: undefined,
        SegmentType: undefined,
        Version: undefined,
        tags: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.Arn !== undefined && output.Arn !== null) {
        contents.Arn = output.Arn;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.Dimensions !== undefined && output.Dimensions !== null) {
        contents.Dimensions = deserializeAws_restJson1_1SegmentDimensions(output.Dimensions, context);
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.ImportDefinition !== undefined &&
        output.ImportDefinition !== null) {
        contents.ImportDefinition = deserializeAws_restJson1_1SegmentImportResource(output.ImportDefinition, context);
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.Name !== undefined && output.Name !== null) {
        contents.Name = output.Name;
    }
    if (output.SegmentGroups !== undefined && output.SegmentGroups !== null) {
        contents.SegmentGroups = deserializeAws_restJson1_1SegmentGroupList(output.SegmentGroups, context);
    }
    if (output.SegmentType !== undefined && output.SegmentType !== null) {
        contents.SegmentType = output.SegmentType;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    if (output.tags !== undefined && output.tags !== null) {
        contents.tags = deserializeAws_restJson1_1MapOf__string(output.tags, context);
    }
    return contents;
};
var deserializeAws_restJson1_1SegmentsResponse = function (output, context) {
    var contents = {
        __type: "SegmentsResponse",
        Item: undefined,
        NextToken: undefined
    };
    if (output.Item !== undefined && output.Item !== null) {
        contents.Item = deserializeAws_restJson1_1ListOfSegmentResponse(output.Item, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    return contents;
};
var deserializeAws_restJson1_1SendUsersMessageResponse = function (output, context) {
    var contents = {
        __type: "SendUsersMessageResponse",
        ApplicationId: undefined,
        RequestId: undefined,
        Result: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.RequestId !== undefined && output.RequestId !== null) {
        contents.RequestId = output.RequestId;
    }
    if (output.Result !== undefined && output.Result !== null) {
        contents.Result = deserializeAws_restJson1_1MapOfMapOfEndpointMessageResult(output.Result, context);
    }
    return contents;
};
var deserializeAws_restJson1_1SetDimension = function (output, context) {
    var contents = {
        __type: "SetDimension",
        DimensionType: undefined,
        Values: undefined
    };
    if (output.DimensionType !== undefined && output.DimensionType !== null) {
        contents.DimensionType = output.DimensionType;
    }
    if (output.Values !== undefined && output.Values !== null) {
        contents.Values = deserializeAws_restJson1_1ListOf__string(output.Values, context);
    }
    return contents;
};
var deserializeAws_restJson1_1SimpleCondition = function (output, context) {
    var contents = {
        __type: "SimpleCondition",
        EventCondition: undefined,
        SegmentCondition: undefined,
        SegmentDimensions: undefined
    };
    if (output.EventCondition !== undefined && output.EventCondition !== null) {
        contents.EventCondition = deserializeAws_restJson1_1EventCondition(output.EventCondition, context);
    }
    if (output.SegmentCondition !== undefined &&
        output.SegmentCondition !== null) {
        contents.SegmentCondition = deserializeAws_restJson1_1SegmentCondition(output.SegmentCondition, context);
    }
    if (output.segmentDimensions !== undefined &&
        output.segmentDimensions !== null) {
        contents.SegmentDimensions = deserializeAws_restJson1_1SegmentDimensions(output.segmentDimensions, context);
    }
    return contents;
};
var deserializeAws_restJson1_1StartCondition = function (output, context) {
    var contents = {
        __type: "StartCondition",
        Description: undefined,
        SegmentStartCondition: undefined
    };
    if (output.Description !== undefined && output.Description !== null) {
        contents.Description = output.Description;
    }
    if (output.SegmentStartCondition !== undefined &&
        output.SegmentStartCondition !== null) {
        contents.SegmentStartCondition = deserializeAws_restJson1_1SegmentCondition(output.SegmentStartCondition, context);
    }
    return contents;
};
var deserializeAws_restJson1_1TagsModel = function (output, context) {
    var contents = {
        __type: "TagsModel",
        tags: undefined
    };
    if (output.tags !== undefined && output.tags !== null) {
        contents.tags = deserializeAws_restJson1_1MapOf__string(output.tags, context);
    }
    return contents;
};
var deserializeAws_restJson1_1Template = function (output, context) {
    var contents = {
        __type: "Template",
        Name: undefined,
        Version: undefined
    };
    if (output.Name !== undefined && output.Name !== null) {
        contents.Name = output.Name;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    return contents;
};
var deserializeAws_restJson1_1TemplateConfiguration = function (output, context) {
    var contents = {
        __type: "TemplateConfiguration",
        EmailTemplate: undefined,
        PushTemplate: undefined,
        SMSTemplate: undefined,
        VoiceTemplate: undefined
    };
    if (output.EmailTemplate !== undefined && output.EmailTemplate !== null) {
        contents.EmailTemplate = deserializeAws_restJson1_1Template(output.EmailTemplate, context);
    }
    if (output.PushTemplate !== undefined && output.PushTemplate !== null) {
        contents.PushTemplate = deserializeAws_restJson1_1Template(output.PushTemplate, context);
    }
    if (output.SMSTemplate !== undefined && output.SMSTemplate !== null) {
        contents.SMSTemplate = deserializeAws_restJson1_1Template(output.SMSTemplate, context);
    }
    if (output.VoiceTemplate !== undefined && output.VoiceTemplate !== null) {
        contents.VoiceTemplate = deserializeAws_restJson1_1Template(output.VoiceTemplate, context);
    }
    return contents;
};
var deserializeAws_restJson1_1TemplateResponse = function (output, context) {
    var contents = {
        __type: "TemplateResponse",
        Arn: undefined,
        CreationDate: undefined,
        DefaultSubstitutions: undefined,
        LastModifiedDate: undefined,
        TemplateDescription: undefined,
        TemplateName: undefined,
        TemplateType: undefined,
        Version: undefined,
        tags: undefined
    };
    if (output.Arn !== undefined && output.Arn !== null) {
        contents.Arn = output.Arn;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.DefaultSubstitutions !== undefined &&
        output.DefaultSubstitutions !== null) {
        contents.DefaultSubstitutions = output.DefaultSubstitutions;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.TemplateDescription !== undefined &&
        output.TemplateDescription !== null) {
        contents.TemplateDescription = output.TemplateDescription;
    }
    if (output.TemplateName !== undefined && output.TemplateName !== null) {
        contents.TemplateName = output.TemplateName;
    }
    if (output.TemplateType !== undefined && output.TemplateType !== null) {
        contents.TemplateType = output.TemplateType;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    if (output.tags !== undefined && output.tags !== null) {
        contents.tags = deserializeAws_restJson1_1MapOf__string(output.tags, context);
    }
    return contents;
};
var deserializeAws_restJson1_1TemplateVersionResponse = function (output, context) {
    var contents = {
        __type: "TemplateVersionResponse",
        CreationDate: undefined,
        DefaultSubstitutions: undefined,
        LastModifiedDate: undefined,
        TemplateDescription: undefined,
        TemplateName: undefined,
        TemplateType: undefined,
        Version: undefined
    };
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.DefaultSubstitutions !== undefined &&
        output.DefaultSubstitutions !== null) {
        contents.DefaultSubstitutions = output.DefaultSubstitutions;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.TemplateDescription !== undefined &&
        output.TemplateDescription !== null) {
        contents.TemplateDescription = output.TemplateDescription;
    }
    if (output.TemplateName !== undefined && output.TemplateName !== null) {
        contents.TemplateName = output.TemplateName;
    }
    if (output.TemplateType !== undefined && output.TemplateType !== null) {
        contents.TemplateType = output.TemplateType;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    return contents;
};
var deserializeAws_restJson1_1TemplateVersionsResponse = function (output, context) {
    var contents = {
        __type: "TemplateVersionsResponse",
        Item: undefined,
        Message: undefined,
        NextToken: undefined,
        RequestID: undefined
    };
    if (output.Item !== undefined && output.Item !== null) {
        contents.Item = deserializeAws_restJson1_1ListOfTemplateVersionResponse(output.Item, context);
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    if (output.RequestID !== undefined && output.RequestID !== null) {
        contents.RequestID = output.RequestID;
    }
    return contents;
};
var deserializeAws_restJson1_1TemplatesResponse = function (output, context) {
    var contents = {
        __type: "TemplatesResponse",
        Item: undefined,
        NextToken: undefined
    };
    if (output.Item !== undefined && output.Item !== null) {
        contents.Item = deserializeAws_restJson1_1ListOfTemplateResponse(output.Item, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    return contents;
};
var deserializeAws_restJson1_1TreatmentResource = function (output, context) {
    var contents = {
        __type: "TreatmentResource",
        Id: undefined,
        MessageConfiguration: undefined,
        Schedule: undefined,
        SizePercent: undefined,
        State: undefined,
        TemplateConfiguration: undefined,
        TreatmentDescription: undefined,
        TreatmentName: undefined
    };
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.MessageConfiguration !== undefined &&
        output.MessageConfiguration !== null) {
        contents.MessageConfiguration = deserializeAws_restJson1_1MessageConfiguration(output.MessageConfiguration, context);
    }
    if (output.Schedule !== undefined && output.Schedule !== null) {
        contents.Schedule = deserializeAws_restJson1_1Schedule(output.Schedule, context);
    }
    if (output.SizePercent !== undefined && output.SizePercent !== null) {
        contents.SizePercent = output.SizePercent;
    }
    if (output.State !== undefined && output.State !== null) {
        contents.State = deserializeAws_restJson1_1CampaignState(output.State, context);
    }
    if (output.TemplateConfiguration !== undefined &&
        output.TemplateConfiguration !== null) {
        contents.TemplateConfiguration = deserializeAws_restJson1_1TemplateConfiguration(output.TemplateConfiguration, context);
    }
    if (output.TreatmentDescription !== undefined &&
        output.TreatmentDescription !== null) {
        contents.TreatmentDescription = output.TreatmentDescription;
    }
    if (output.TreatmentName !== undefined && output.TreatmentName !== null) {
        contents.TreatmentName = output.TreatmentName;
    }
    return contents;
};
var deserializeAws_restJson1_1VoiceChannelResponse = function (output, context) {
    var contents = {
        __type: "VoiceChannelResponse",
        ApplicationId: undefined,
        CreationDate: undefined,
        Enabled: undefined,
        HasCredential: undefined,
        Id: undefined,
        IsArchived: undefined,
        LastModifiedBy: undefined,
        LastModifiedDate: undefined,
        Platform: undefined,
        Version: undefined
    };
    if (output.ApplicationId !== undefined && output.ApplicationId !== null) {
        contents.ApplicationId = output.ApplicationId;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.Enabled !== undefined && output.Enabled !== null) {
        contents.Enabled = output.Enabled;
    }
    if (output.HasCredential !== undefined && output.HasCredential !== null) {
        contents.HasCredential = output.HasCredential;
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.IsArchived !== undefined && output.IsArchived !== null) {
        contents.IsArchived = output.IsArchived;
    }
    if (output.LastModifiedBy !== undefined && output.LastModifiedBy !== null) {
        contents.LastModifiedBy = output.LastModifiedBy;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.Platform !== undefined && output.Platform !== null) {
        contents.Platform = output.Platform;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    return contents;
};
var deserializeAws_restJson1_1VoiceTemplateResponse = function (output, context) {
    var contents = {
        __type: "VoiceTemplateResponse",
        Arn: undefined,
        Body: undefined,
        CreationDate: undefined,
        DefaultSubstitutions: undefined,
        LanguageCode: undefined,
        LastModifiedDate: undefined,
        TemplateDescription: undefined,
        TemplateName: undefined,
        TemplateType: undefined,
        Version: undefined,
        VoiceId: undefined,
        tags: undefined
    };
    if (output.Arn !== undefined && output.Arn !== null) {
        contents.Arn = output.Arn;
    }
    if (output.Body !== undefined && output.Body !== null) {
        contents.Body = output.Body;
    }
    if (output.CreationDate !== undefined && output.CreationDate !== null) {
        contents.CreationDate = output.CreationDate;
    }
    if (output.DefaultSubstitutions !== undefined &&
        output.DefaultSubstitutions !== null) {
        contents.DefaultSubstitutions = output.DefaultSubstitutions;
    }
    if (output.LanguageCode !== undefined && output.LanguageCode !== null) {
        contents.LanguageCode = output.LanguageCode;
    }
    if (output.LastModifiedDate !== undefined &&
        output.LastModifiedDate !== null) {
        contents.LastModifiedDate = output.LastModifiedDate;
    }
    if (output.TemplateDescription !== undefined &&
        output.TemplateDescription !== null) {
        contents.TemplateDescription = output.TemplateDescription;
    }
    if (output.TemplateName !== undefined && output.TemplateName !== null) {
        contents.TemplateName = output.TemplateName;
    }
    if (output.TemplateType !== undefined && output.TemplateType !== null) {
        contents.TemplateType = output.TemplateType;
    }
    if (output.Version !== undefined && output.Version !== null) {
        contents.Version = output.Version;
    }
    if (output.VoiceId !== undefined && output.VoiceId !== null) {
        contents.VoiceId = output.VoiceId;
    }
    if (output.tags !== undefined && output.tags !== null) {
        contents.tags = deserializeAws_restJson1_1MapOf__string(output.tags, context);
    }
    return contents;
};
var deserializeAws_restJson1_1WaitActivity = function (output, context) {
    var contents = {
        __type: "WaitActivity",
        NextActivity: undefined,
        WaitTime: undefined
    };
    if (output.NextActivity !== undefined && output.NextActivity !== null) {
        contents.NextActivity = output.NextActivity;
    }
    if (output.WaitTime !== undefined && output.WaitTime !== null) {
        contents.WaitTime = deserializeAws_restJson1_1WaitTime(output.WaitTime, context);
    }
    return contents;
};
var deserializeAws_restJson1_1WaitTime = function (output, context) {
    var contents = {
        __type: "WaitTime",
        WaitFor: undefined,
        WaitUntil: undefined
    };
    if (output.WaitFor !== undefined && output.WaitFor !== null) {
        contents.WaitFor = output.WaitFor;
    }
    if (output.WaitUntil !== undefined && output.WaitUntil !== null) {
        contents.WaitUntil = output.WaitUntil;
    }
    return contents;
};
var deserializeMetadata = function (output) { return ({
    httpStatusCode: output.statusCode,
    httpHeaders: output.headers,
    requestId: output.headers["x-amzn-requestid"]
}); };
// Collect low-level response body stream to Uint8Array.
var collectBody = function (streamBody, context) {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return (context.streamCollector(streamBody) || Promise.resolve(new Uint8Array()));
};
// Encode Uint8Array data into string with utf-8.
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) {
        return context.utf8Encoder(body);
    });
};
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
};
/**
 * Load an error code for the aws.rest-json-1.1 protocol.
 */
var loadRestJsonErrorCode = function (output, data) {
    var findKey = function (object, key) {
        return Object.keys(object).find(function (k) { return k.toLowerCase() === key.toLowerCase(); });
    };
    var sanitizeErrorCode = function (rawValue) {
        var cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    var headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
    return "";
};
//# sourceMappingURL=Aws_restJson1_1.js.map