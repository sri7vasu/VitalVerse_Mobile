import { __assign, __awaiter, __generator, __values } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { v4 as generateIdempotencyToken } from "uuid";
export function serializeAws_json1_1BatchDetectDominantLanguageCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.BatchDetectDominantLanguage";
            body = JSON.stringify(serializeAws_json1_1BatchDetectDominantLanguageRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1BatchDetectEntitiesCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.BatchDetectEntities";
            body = JSON.stringify(serializeAws_json1_1BatchDetectEntitiesRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1BatchDetectKeyPhrasesCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.BatchDetectKeyPhrases";
            body = JSON.stringify(serializeAws_json1_1BatchDetectKeyPhrasesRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1BatchDetectSentimentCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.BatchDetectSentiment";
            body = JSON.stringify(serializeAws_json1_1BatchDetectSentimentRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1BatchDetectSyntaxCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.BatchDetectSyntax";
            body = JSON.stringify(serializeAws_json1_1BatchDetectSyntaxRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ClassifyDocumentCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.ClassifyDocument";
            body = JSON.stringify(serializeAws_json1_1ClassifyDocumentRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1CreateDocumentClassifierCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.CreateDocumentClassifier";
            body = JSON.stringify(serializeAws_json1_1CreateDocumentClassifierRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1CreateEndpointCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.CreateEndpoint";
            body = JSON.stringify(serializeAws_json1_1CreateEndpointRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1CreateEntityRecognizerCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.CreateEntityRecognizer";
            body = JSON.stringify(serializeAws_json1_1CreateEntityRecognizerRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DeleteDocumentClassifierCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.DeleteDocumentClassifier";
            body = JSON.stringify(serializeAws_json1_1DeleteDocumentClassifierRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DeleteEndpointCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.DeleteEndpoint";
            body = JSON.stringify(serializeAws_json1_1DeleteEndpointRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DeleteEntityRecognizerCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.DeleteEntityRecognizer";
            body = JSON.stringify(serializeAws_json1_1DeleteEntityRecognizerRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DescribeDocumentClassificationJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] =
                "Comprehend_20171127.DescribeDocumentClassificationJob";
            body = JSON.stringify(serializeAws_json1_1DescribeDocumentClassificationJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DescribeDocumentClassifierCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.DescribeDocumentClassifier";
            body = JSON.stringify(serializeAws_json1_1DescribeDocumentClassifierRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DescribeDominantLanguageDetectionJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] =
                "Comprehend_20171127.DescribeDominantLanguageDetectionJob";
            body = JSON.stringify(serializeAws_json1_1DescribeDominantLanguageDetectionJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DescribeEndpointCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.DescribeEndpoint";
            body = JSON.stringify(serializeAws_json1_1DescribeEndpointRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DescribeEntitiesDetectionJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.DescribeEntitiesDetectionJob";
            body = JSON.stringify(serializeAws_json1_1DescribeEntitiesDetectionJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DescribeEntityRecognizerCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.DescribeEntityRecognizer";
            body = JSON.stringify(serializeAws_json1_1DescribeEntityRecognizerRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DescribeKeyPhrasesDetectionJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] =
                "Comprehend_20171127.DescribeKeyPhrasesDetectionJob";
            body = JSON.stringify(serializeAws_json1_1DescribeKeyPhrasesDetectionJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DescribeSentimentDetectionJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.DescribeSentimentDetectionJob";
            body = JSON.stringify(serializeAws_json1_1DescribeSentimentDetectionJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DescribeTopicsDetectionJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.DescribeTopicsDetectionJob";
            body = JSON.stringify(serializeAws_json1_1DescribeTopicsDetectionJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DetectDominantLanguageCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.DetectDominantLanguage";
            body = JSON.stringify(serializeAws_json1_1DetectDominantLanguageRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DetectEntitiesCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.DetectEntities";
            body = JSON.stringify(serializeAws_json1_1DetectEntitiesRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DetectKeyPhrasesCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.DetectKeyPhrases";
            body = JSON.stringify(serializeAws_json1_1DetectKeyPhrasesRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DetectSentimentCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.DetectSentiment";
            body = JSON.stringify(serializeAws_json1_1DetectSentimentRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DetectSyntaxCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.DetectSyntax";
            body = JSON.stringify(serializeAws_json1_1DetectSyntaxRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ListDocumentClassificationJobsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] =
                "Comprehend_20171127.ListDocumentClassificationJobs";
            body = JSON.stringify(serializeAws_json1_1ListDocumentClassificationJobsRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ListDocumentClassifiersCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.ListDocumentClassifiers";
            body = JSON.stringify(serializeAws_json1_1ListDocumentClassifiersRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ListDominantLanguageDetectionJobsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] =
                "Comprehend_20171127.ListDominantLanguageDetectionJobs";
            body = JSON.stringify(serializeAws_json1_1ListDominantLanguageDetectionJobsRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ListEndpointsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.ListEndpoints";
            body = JSON.stringify(serializeAws_json1_1ListEndpointsRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ListEntitiesDetectionJobsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.ListEntitiesDetectionJobs";
            body = JSON.stringify(serializeAws_json1_1ListEntitiesDetectionJobsRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ListEntityRecognizersCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.ListEntityRecognizers";
            body = JSON.stringify(serializeAws_json1_1ListEntityRecognizersRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ListKeyPhrasesDetectionJobsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.ListKeyPhrasesDetectionJobs";
            body = JSON.stringify(serializeAws_json1_1ListKeyPhrasesDetectionJobsRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ListSentimentDetectionJobsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.ListSentimentDetectionJobs";
            body = JSON.stringify(serializeAws_json1_1ListSentimentDetectionJobsRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ListTagsForResourceCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.ListTagsForResource";
            body = JSON.stringify(serializeAws_json1_1ListTagsForResourceRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1ListTopicsDetectionJobsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.ListTopicsDetectionJobs";
            body = JSON.stringify(serializeAws_json1_1ListTopicsDetectionJobsRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StartDocumentClassificationJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] =
                "Comprehend_20171127.StartDocumentClassificationJob";
            body = JSON.stringify(serializeAws_json1_1StartDocumentClassificationJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StartDominantLanguageDetectionJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] =
                "Comprehend_20171127.StartDominantLanguageDetectionJob";
            body = JSON.stringify(serializeAws_json1_1StartDominantLanguageDetectionJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StartEntitiesDetectionJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.StartEntitiesDetectionJob";
            body = JSON.stringify(serializeAws_json1_1StartEntitiesDetectionJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StartKeyPhrasesDetectionJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.StartKeyPhrasesDetectionJob";
            body = JSON.stringify(serializeAws_json1_1StartKeyPhrasesDetectionJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StartSentimentDetectionJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.StartSentimentDetectionJob";
            body = JSON.stringify(serializeAws_json1_1StartSentimentDetectionJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StartTopicsDetectionJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.StartTopicsDetectionJob";
            body = JSON.stringify(serializeAws_json1_1StartTopicsDetectionJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StopDominantLanguageDetectionJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] =
                "Comprehend_20171127.StopDominantLanguageDetectionJob";
            body = JSON.stringify(serializeAws_json1_1StopDominantLanguageDetectionJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StopEntitiesDetectionJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.StopEntitiesDetectionJob";
            body = JSON.stringify(serializeAws_json1_1StopEntitiesDetectionJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StopKeyPhrasesDetectionJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.StopKeyPhrasesDetectionJob";
            body = JSON.stringify(serializeAws_json1_1StopKeyPhrasesDetectionJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StopSentimentDetectionJobCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.StopSentimentDetectionJob";
            body = JSON.stringify(serializeAws_json1_1StopSentimentDetectionJobRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StopTrainingDocumentClassifierCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] =
                "Comprehend_20171127.StopTrainingDocumentClassifier";
            body = JSON.stringify(serializeAws_json1_1StopTrainingDocumentClassifierRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StopTrainingEntityRecognizerCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.StopTrainingEntityRecognizer";
            body = JSON.stringify(serializeAws_json1_1StopTrainingEntityRecognizerRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1TagResourceCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.TagResource";
            body = JSON.stringify(serializeAws_json1_1TagResourceRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1UntagResourceCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.UntagResource";
            body = JSON.stringify(serializeAws_json1_1UntagResourceRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1UpdateEndpointCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Comprehend_20171127.UpdateEndpoint";
            body = JSON.stringify(serializeAws_json1_1UpdateEndpointRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function deserializeAws_json1_1BatchDetectDominantLanguageCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1BatchDetectDominantLanguageCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1BatchDetectDominantLanguageResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "BatchDetectDominantLanguageResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1BatchDetectDominantLanguageCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "BatchSizeLimitExceededException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#BatchSizeLimitExceededException": return [3 /*break*/, 2];
                        case "InternalServerException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 4];
                        case "InvalidRequestException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 6];
                        case "TextSizeLimitExceededException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TextSizeLimitExceededException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1BatchSizeLimitExceededExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1BatchDetectEntitiesCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1BatchDetectEntitiesCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1BatchDetectEntitiesResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "BatchDetectEntitiesResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1BatchDetectEntitiesCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, parsedBody, message;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _j.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "BatchSizeLimitExceededException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#BatchSizeLimitExceededException": return [3 /*break*/, 2];
                        case "InternalServerException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 4];
                        case "InvalidRequestException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 6];
                        case "TextSizeLimitExceededException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TextSizeLimitExceededException": return [3 /*break*/, 8];
                        case "UnsupportedLanguageException": return [3 /*break*/, 10];
                        case "com.amazonaws.comprehend#UnsupportedLanguageException": return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 12];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1BatchSizeLimitExceededExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1UnsupportedLanguageExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1BatchDetectKeyPhrasesCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1BatchDetectKeyPhrasesCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1BatchDetectKeyPhrasesResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "BatchDetectKeyPhrasesResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1BatchDetectKeyPhrasesCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, parsedBody, message;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _j.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "BatchSizeLimitExceededException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#BatchSizeLimitExceededException": return [3 /*break*/, 2];
                        case "InternalServerException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 4];
                        case "InvalidRequestException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 6];
                        case "TextSizeLimitExceededException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TextSizeLimitExceededException": return [3 /*break*/, 8];
                        case "UnsupportedLanguageException": return [3 /*break*/, 10];
                        case "com.amazonaws.comprehend#UnsupportedLanguageException": return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 12];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1BatchSizeLimitExceededExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1UnsupportedLanguageExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1BatchDetectSentimentCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1BatchDetectSentimentCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1BatchDetectSentimentResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "BatchDetectSentimentResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1BatchDetectSentimentCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, parsedBody, message;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _j.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "BatchSizeLimitExceededException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#BatchSizeLimitExceededException": return [3 /*break*/, 2];
                        case "InternalServerException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 4];
                        case "InvalidRequestException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 6];
                        case "TextSizeLimitExceededException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TextSizeLimitExceededException": return [3 /*break*/, 8];
                        case "UnsupportedLanguageException": return [3 /*break*/, 10];
                        case "com.amazonaws.comprehend#UnsupportedLanguageException": return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 12];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1BatchSizeLimitExceededExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1UnsupportedLanguageExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1BatchDetectSyntaxCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1BatchDetectSyntaxCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1BatchDetectSyntaxResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "BatchDetectSyntaxResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1BatchDetectSyntaxCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, parsedBody, message;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _j.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "BatchSizeLimitExceededException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#BatchSizeLimitExceededException": return [3 /*break*/, 2];
                        case "InternalServerException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 4];
                        case "InvalidRequestException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 6];
                        case "TextSizeLimitExceededException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TextSizeLimitExceededException": return [3 /*break*/, 8];
                        case "UnsupportedLanguageException": return [3 /*break*/, 10];
                        case "com.amazonaws.comprehend#UnsupportedLanguageException": return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 12];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1BatchSizeLimitExceededExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1UnsupportedLanguageExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ClassifyDocumentCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ClassifyDocumentCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ClassifyDocumentResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ClassifyDocumentResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ClassifyDocumentCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "ResourceUnavailableException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#ResourceUnavailableException": return [3 /*break*/, 6];
                        case "TextSizeLimitExceededException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TextSizeLimitExceededException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceUnavailableExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1CreateDocumentClassifierCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1CreateDocumentClassifierCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1CreateDocumentClassifierResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "CreateDocumentClassifierResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1CreateDocumentClassifierCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;
        return __generator(this, function (_m) {
            switch (_m.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _m.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "KmsKeyValidationException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#KmsKeyValidationException": return [3 /*break*/, 6];
                        case "ResourceInUseException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#ResourceInUseException": return [3 /*break*/, 8];
                        case "ResourceLimitExceededException": return [3 /*break*/, 10];
                        case "com.amazonaws.comprehend#ResourceLimitExceededException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 12];
                        case "TooManyTagsException": return [3 /*break*/, 14];
                        case "com.amazonaws.comprehend#TooManyTagsException": return [3 /*break*/, 14];
                        case "UnsupportedLanguageException": return [3 /*break*/, 16];
                        case "com.amazonaws.comprehend#UnsupportedLanguageException": return [3 /*break*/, 16];
                    }
                    return [3 /*break*/, 18];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KmsKeyValidationExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyTagsExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 16:
                    _l = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1UnsupportedLanguageExceptionResponse(parsedOutput, context)];
                case 17:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 18:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _m.label = 19;
                case 19:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1CreateEndpointCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1CreateEndpointCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1CreateEndpointResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "CreateEndpointResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1CreateEndpointCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;
        return __generator(this, function (_m) {
            switch (_m.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _m.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#ResourceInUseException": return [3 /*break*/, 6];
                        case "ResourceLimitExceededException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#ResourceLimitExceededException": return [3 /*break*/, 8];
                        case "ResourceNotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.comprehend#ResourceNotFoundException": return [3 /*break*/, 10];
                        case "ResourceUnavailableException": return [3 /*break*/, 12];
                        case "com.amazonaws.comprehend#ResourceUnavailableException": return [3 /*break*/, 12];
                        case "TooManyRequestsException": return [3 /*break*/, 14];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 14];
                        case "TooManyTagsException": return [3 /*break*/, 16];
                        case "com.amazonaws.comprehend#TooManyTagsException": return [3 /*break*/, 16];
                    }
                    return [3 /*break*/, 18];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceUnavailableExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 16:
                    _l = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyTagsExceptionResponse(parsedOutput, context)];
                case 17:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 18:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _m.label = 19;
                case 19:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1CreateEntityRecognizerCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1CreateEntityRecognizerCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1CreateEntityRecognizerResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "CreateEntityRecognizerResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1CreateEntityRecognizerCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;
        return __generator(this, function (_m) {
            switch (_m.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _m.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "KmsKeyValidationException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#KmsKeyValidationException": return [3 /*break*/, 6];
                        case "ResourceInUseException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#ResourceInUseException": return [3 /*break*/, 8];
                        case "ResourceLimitExceededException": return [3 /*break*/, 10];
                        case "com.amazonaws.comprehend#ResourceLimitExceededException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 12];
                        case "TooManyTagsException": return [3 /*break*/, 14];
                        case "com.amazonaws.comprehend#TooManyTagsException": return [3 /*break*/, 14];
                        case "UnsupportedLanguageException": return [3 /*break*/, 16];
                        case "com.amazonaws.comprehend#UnsupportedLanguageException": return [3 /*break*/, 16];
                    }
                    return [3 /*break*/, 18];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KmsKeyValidationExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyTagsExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 16:
                    _l = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1UnsupportedLanguageExceptionResponse(parsedOutput, context)];
                case 17:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 18:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _m.label = 19;
                case 19:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DeleteDocumentClassifierCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DeleteDocumentClassifierCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DeleteDocumentClassifierResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DeleteDocumentClassifierResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DeleteDocumentClassifierCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#ResourceInUseException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#ResourceNotFoundException": return [3 /*break*/, 8];
                        case "ResourceUnavailableException": return [3 /*break*/, 10];
                        case "com.amazonaws.comprehend#ResourceUnavailableException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceUnavailableExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DeleteEndpointCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DeleteEndpointCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DeleteEndpointResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DeleteEndpointResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DeleteEndpointCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, parsedBody, message;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _j.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#ResourceInUseException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#ResourceNotFoundException": return [3 /*break*/, 8];
                        case "TooManyRequestsException": return [3 /*break*/, 10];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 12];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DeleteEntityRecognizerCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DeleteEntityRecognizerCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DeleteEntityRecognizerResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DeleteEntityRecognizerResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DeleteEntityRecognizerCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#ResourceInUseException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#ResourceNotFoundException": return [3 /*break*/, 8];
                        case "ResourceUnavailableException": return [3 /*break*/, 10];
                        case "com.amazonaws.comprehend#ResourceUnavailableException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceUnavailableExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DescribeDocumentClassificationJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DescribeDocumentClassificationJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeDocumentClassificationJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DescribeDocumentClassificationJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DescribeDocumentClassificationJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "JobNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#JobNotFoundException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1JobNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DescribeDocumentClassifierCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DescribeDocumentClassifierCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeDocumentClassifierResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DescribeDocumentClassifierResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DescribeDocumentClassifierCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "ResourceNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#ResourceNotFoundException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DescribeDominantLanguageDetectionJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DescribeDominantLanguageDetectionJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeDominantLanguageDetectionJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DescribeDominantLanguageDetectionJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DescribeDominantLanguageDetectionJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "JobNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#JobNotFoundException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1JobNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DescribeEndpointCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DescribeEndpointCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeEndpointResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DescribeEndpointResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DescribeEndpointCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "ResourceNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#ResourceNotFoundException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DescribeEntitiesDetectionJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DescribeEntitiesDetectionJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeEntitiesDetectionJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DescribeEntitiesDetectionJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DescribeEntitiesDetectionJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "JobNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#JobNotFoundException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1JobNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DescribeEntityRecognizerCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DescribeEntityRecognizerCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeEntityRecognizerResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DescribeEntityRecognizerResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DescribeEntityRecognizerCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "ResourceNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#ResourceNotFoundException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DescribeKeyPhrasesDetectionJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DescribeKeyPhrasesDetectionJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeKeyPhrasesDetectionJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DescribeKeyPhrasesDetectionJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DescribeKeyPhrasesDetectionJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "JobNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#JobNotFoundException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1JobNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DescribeSentimentDetectionJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DescribeSentimentDetectionJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeSentimentDetectionJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DescribeSentimentDetectionJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DescribeSentimentDetectionJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "JobNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#JobNotFoundException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1JobNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DescribeTopicsDetectionJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DescribeTopicsDetectionJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeTopicsDetectionJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DescribeTopicsDetectionJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DescribeTopicsDetectionJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "JobNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#JobNotFoundException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1JobNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DetectDominantLanguageCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DetectDominantLanguageCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DetectDominantLanguageResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DetectDominantLanguageResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DetectDominantLanguageCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "TextSizeLimitExceededException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#TextSizeLimitExceededException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DetectEntitiesCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DetectEntitiesCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DetectEntitiesResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DetectEntitiesResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DetectEntitiesCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "TextSizeLimitExceededException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#TextSizeLimitExceededException": return [3 /*break*/, 6];
                        case "UnsupportedLanguageException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#UnsupportedLanguageException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1UnsupportedLanguageExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DetectKeyPhrasesCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DetectKeyPhrasesCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DetectKeyPhrasesResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DetectKeyPhrasesResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DetectKeyPhrasesCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "TextSizeLimitExceededException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#TextSizeLimitExceededException": return [3 /*break*/, 6];
                        case "UnsupportedLanguageException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#UnsupportedLanguageException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1UnsupportedLanguageExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DetectSentimentCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DetectSentimentCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DetectSentimentResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DetectSentimentResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DetectSentimentCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "TextSizeLimitExceededException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#TextSizeLimitExceededException": return [3 /*break*/, 6];
                        case "UnsupportedLanguageException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#UnsupportedLanguageException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1UnsupportedLanguageExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DetectSyntaxCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DetectSyntaxCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DetectSyntaxResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DetectSyntaxResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DetectSyntaxCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "TextSizeLimitExceededException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#TextSizeLimitExceededException": return [3 /*break*/, 6];
                        case "UnsupportedLanguageException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#UnsupportedLanguageException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1UnsupportedLanguageExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ListDocumentClassificationJobsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ListDocumentClassificationJobsCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListDocumentClassificationJobsResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ListDocumentClassificationJobsResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ListDocumentClassificationJobsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidFilterException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidFilterException": return [3 /*break*/, 4];
                        case "InvalidRequestException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidFilterExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ListDocumentClassifiersCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ListDocumentClassifiersCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListDocumentClassifiersResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ListDocumentClassifiersResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ListDocumentClassifiersCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidFilterException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidFilterException": return [3 /*break*/, 4];
                        case "InvalidRequestException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidFilterExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ListDominantLanguageDetectionJobsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ListDominantLanguageDetectionJobsCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListDominantLanguageDetectionJobsResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ListDominantLanguageDetectionJobsResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ListDominantLanguageDetectionJobsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidFilterException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidFilterException": return [3 /*break*/, 4];
                        case "InvalidRequestException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidFilterExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ListEndpointsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ListEndpointsCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListEndpointsResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ListEndpointsResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ListEndpointsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "TooManyRequestsException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ListEntitiesDetectionJobsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ListEntitiesDetectionJobsCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListEntitiesDetectionJobsResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ListEntitiesDetectionJobsResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ListEntitiesDetectionJobsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidFilterException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidFilterException": return [3 /*break*/, 4];
                        case "InvalidRequestException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidFilterExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ListEntityRecognizersCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ListEntityRecognizersCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListEntityRecognizersResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ListEntityRecognizersResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ListEntityRecognizersCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidFilterException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidFilterException": return [3 /*break*/, 4];
                        case "InvalidRequestException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidFilterExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ListKeyPhrasesDetectionJobsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ListKeyPhrasesDetectionJobsCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListKeyPhrasesDetectionJobsResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ListKeyPhrasesDetectionJobsResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ListKeyPhrasesDetectionJobsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidFilterException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidFilterException": return [3 /*break*/, 4];
                        case "InvalidRequestException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidFilterExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ListSentimentDetectionJobsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ListSentimentDetectionJobsCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListSentimentDetectionJobsResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ListSentimentDetectionJobsResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ListSentimentDetectionJobsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidFilterException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidFilterException": return [3 /*break*/, 4];
                        case "InvalidRequestException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidFilterExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ListTagsForResourceCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ListTagsForResourceCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListTagsForResourceResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ListTagsForResourceResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ListTagsForResourceCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "ResourceNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#ResourceNotFoundException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1ListTopicsDetectionJobsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1ListTopicsDetectionJobsCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListTopicsDetectionJobsResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "ListTopicsDetectionJobsResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1ListTopicsDetectionJobsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidFilterException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidFilterException": return [3 /*break*/, 4];
                        case "InvalidRequestException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidFilterExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StartDocumentClassificationJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StartDocumentClassificationJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StartDocumentClassificationJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "StartDocumentClassificationJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StartDocumentClassificationJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "KmsKeyValidationException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#KmsKeyValidationException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#ResourceNotFoundException": return [3 /*break*/, 8];
                        case "ResourceUnavailableException": return [3 /*break*/, 10];
                        case "com.amazonaws.comprehend#ResourceUnavailableException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KmsKeyValidationExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceUnavailableExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StartDominantLanguageDetectionJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StartDominantLanguageDetectionJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StartDominantLanguageDetectionJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "StartDominantLanguageDetectionJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StartDominantLanguageDetectionJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "KmsKeyValidationException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#KmsKeyValidationException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KmsKeyValidationExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StartEntitiesDetectionJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StartEntitiesDetectionJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StartEntitiesDetectionJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "StartEntitiesDetectionJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StartEntitiesDetectionJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "KmsKeyValidationException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#KmsKeyValidationException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#ResourceNotFoundException": return [3 /*break*/, 8];
                        case "ResourceUnavailableException": return [3 /*break*/, 10];
                        case "com.amazonaws.comprehend#ResourceUnavailableException": return [3 /*break*/, 10];
                        case "TooManyRequestsException": return [3 /*break*/, 12];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KmsKeyValidationExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceUnavailableExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StartKeyPhrasesDetectionJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StartKeyPhrasesDetectionJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StartKeyPhrasesDetectionJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "StartKeyPhrasesDetectionJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StartKeyPhrasesDetectionJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "KmsKeyValidationException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#KmsKeyValidationException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KmsKeyValidationExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StartSentimentDetectionJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StartSentimentDetectionJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StartSentimentDetectionJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "StartSentimentDetectionJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StartSentimentDetectionJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "KmsKeyValidationException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#KmsKeyValidationException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KmsKeyValidationExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StartTopicsDetectionJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StartTopicsDetectionJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StartTopicsDetectionJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "StartTopicsDetectionJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StartTopicsDetectionJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "KmsKeyValidationException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#KmsKeyValidationException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1KmsKeyValidationExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StopDominantLanguageDetectionJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StopDominantLanguageDetectionJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StopDominantLanguageDetectionJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "StopDominantLanguageDetectionJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StopDominantLanguageDetectionJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "JobNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#JobNotFoundException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1JobNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StopEntitiesDetectionJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StopEntitiesDetectionJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StopEntitiesDetectionJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "StopEntitiesDetectionJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StopEntitiesDetectionJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "JobNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#JobNotFoundException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1JobNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StopKeyPhrasesDetectionJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StopKeyPhrasesDetectionJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StopKeyPhrasesDetectionJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "StopKeyPhrasesDetectionJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StopKeyPhrasesDetectionJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "JobNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#JobNotFoundException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1JobNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StopSentimentDetectionJobCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StopSentimentDetectionJobCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StopSentimentDetectionJobResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "StopSentimentDetectionJobResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StopSentimentDetectionJobCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, parsedBody, message;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "JobNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#JobNotFoundException": return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1JobNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 9];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StopTrainingDocumentClassifierCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StopTrainingDocumentClassifierCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StopTrainingDocumentClassifierResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "StopTrainingDocumentClassifierResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StopTrainingDocumentClassifierCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "ResourceNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#ResourceNotFoundException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StopTrainingEntityRecognizerCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StopTrainingEntityRecognizerCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StopTrainingEntityRecognizerResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "StopTrainingEntityRecognizerResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StopTrainingEntityRecognizerCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "ResourceNotFoundException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#ResourceNotFoundException": return [3 /*break*/, 6];
                        case "TooManyRequestsException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1TagResourceCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1TagResourceCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1TagResourceResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "TagResourceResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1TagResourceCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, parsedBody, message;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _j.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "ConcurrentModificationException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#ConcurrentModificationException": return [3 /*break*/, 2];
                        case "InternalServerException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 4];
                        case "InvalidRequestException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#ResourceNotFoundException": return [3 /*break*/, 8];
                        case "TooManyTagsException": return [3 /*break*/, 10];
                        case "com.amazonaws.comprehend#TooManyTagsException": return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 12];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyTagsExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1UntagResourceCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1UntagResourceCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1UntagResourceResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "UntagResourceResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1UntagResourceCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, parsedBody, message;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _j.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "ConcurrentModificationException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#ConcurrentModificationException": return [3 /*break*/, 2];
                        case "InternalServerException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 4];
                        case "InvalidRequestException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 6];
                        case "ResourceNotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#ResourceNotFoundException": return [3 /*break*/, 8];
                        case "TooManyTagKeysException": return [3 /*break*/, 10];
                        case "com.amazonaws.comprehend#TooManyTagKeysException": return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 12];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyTagKeysExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1UpdateEndpointCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1UpdateEndpointCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1UpdateEndpointResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "UpdateEndpointResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1UpdateEndpointCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
        return __generator(this, function (_l) {
            switch (_l.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _l.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "InternalServerException": return [3 /*break*/, 2];
                        case "com.amazonaws.comprehend#InternalServerException": return [3 /*break*/, 2];
                        case "InvalidRequestException": return [3 /*break*/, 4];
                        case "com.amazonaws.comprehend#InvalidRequestException": return [3 /*break*/, 4];
                        case "ResourceInUseException": return [3 /*break*/, 6];
                        case "com.amazonaws.comprehend#ResourceInUseException": return [3 /*break*/, 6];
                        case "ResourceLimitExceededException": return [3 /*break*/, 8];
                        case "com.amazonaws.comprehend#ResourceLimitExceededException": return [3 /*break*/, 8];
                        case "ResourceNotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.comprehend#ResourceNotFoundException": return [3 /*break*/, 10];
                        case "ResourceUnavailableException": return [3 /*break*/, 12];
                        case "com.amazonaws.comprehend#ResourceUnavailableException": return [3 /*break*/, 12];
                        case "TooManyRequestsException": return [3 /*break*/, 14];
                        case "com.amazonaws.comprehend#TooManyRequestsException": return [3 /*break*/, 14];
                    }
                    return [3 /*break*/, 16];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 17];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 17];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 17];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 17];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 17];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ResourceUnavailableExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 17];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 17];
                case 16:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _l.label = 17;
                case 17:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
var deserializeAws_json1_1BatchSizeLimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1BatchSizeLimitExceededException(body, context);
        contents = __assign({ name: "BatchSizeLimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ConcurrentModificationExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ConcurrentModificationException(body, context);
        contents = __assign({ name: "ConcurrentModificationException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InternalServerExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InternalServerException(body, context);
        contents = __assign({ name: "InternalServerException", $fault: "server", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidFilterExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidFilterException(body, context);
        contents = __assign({ name: "InvalidFilterException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidRequestExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidRequestException(body, context);
        contents = __assign({ name: "InvalidRequestException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1JobNotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1JobNotFoundException(body, context);
        contents = __assign({ name: "JobNotFoundException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1KmsKeyValidationExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1KmsKeyValidationException(body, context);
        contents = __assign({ name: "KmsKeyValidationException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ResourceInUseExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ResourceInUseException(body, context);
        contents = __assign({ name: "ResourceInUseException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ResourceLimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ResourceLimitExceededException(body, context);
        contents = __assign({ name: "ResourceLimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ResourceNotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
        contents = __assign({ name: "ResourceNotFoundException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ResourceUnavailableExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ResourceUnavailableException(body, context);
        contents = __assign({ name: "ResourceUnavailableException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1TextSizeLimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1TextSizeLimitExceededException(body, context);
        contents = __assign({ name: "TextSizeLimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1TooManyRequestsExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1TooManyRequestsException(body, context);
        contents = __assign({ name: "TooManyRequestsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1TooManyTagKeysExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1TooManyTagKeysException(body, context);
        contents = __assign({ name: "TooManyTagKeysException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1TooManyTagsExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1TooManyTagsException(body, context);
        contents = __assign({ name: "TooManyTagsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1UnsupportedLanguageExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1UnsupportedLanguageException(body, context);
        contents = __assign({ name: "UnsupportedLanguageException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var serializeAws_json1_1BatchDetectDominantLanguageRequest = function (input, context) {
    var bodyParams = {};
    if (input.TextList !== undefined) {
        bodyParams["TextList"] = serializeAws_json1_1StringList(input.TextList, context);
    }
    return bodyParams;
};
var serializeAws_json1_1BatchDetectEntitiesRequest = function (input, context) {
    var bodyParams = {};
    if (input.LanguageCode !== undefined) {
        bodyParams["LanguageCode"] = input.LanguageCode;
    }
    if (input.TextList !== undefined) {
        bodyParams["TextList"] = serializeAws_json1_1StringList(input.TextList, context);
    }
    return bodyParams;
};
var serializeAws_json1_1BatchDetectKeyPhrasesRequest = function (input, context) {
    var bodyParams = {};
    if (input.LanguageCode !== undefined) {
        bodyParams["LanguageCode"] = input.LanguageCode;
    }
    if (input.TextList !== undefined) {
        bodyParams["TextList"] = serializeAws_json1_1StringList(input.TextList, context);
    }
    return bodyParams;
};
var serializeAws_json1_1BatchDetectSentimentRequest = function (input, context) {
    var bodyParams = {};
    if (input.LanguageCode !== undefined) {
        bodyParams["LanguageCode"] = input.LanguageCode;
    }
    if (input.TextList !== undefined) {
        bodyParams["TextList"] = serializeAws_json1_1StringList(input.TextList, context);
    }
    return bodyParams;
};
var serializeAws_json1_1BatchDetectSyntaxRequest = function (input, context) {
    var bodyParams = {};
    if (input.LanguageCode !== undefined) {
        bodyParams["LanguageCode"] = input.LanguageCode;
    }
    if (input.TextList !== undefined) {
        bodyParams["TextList"] = serializeAws_json1_1StringList(input.TextList, context);
    }
    return bodyParams;
};
var serializeAws_json1_1ClassifyDocumentRequest = function (input, context) {
    var bodyParams = {};
    if (input.EndpointArn !== undefined) {
        bodyParams["EndpointArn"] = input.EndpointArn;
    }
    if (input.Text !== undefined) {
        bodyParams["Text"] = input.Text;
    }
    return bodyParams;
};
var serializeAws_json1_1CreateDocumentClassifierRequest = function (input, context) {
    var bodyParams = {};
    if (input.ClientRequestToken === undefined) {
        input.ClientRequestToken = generateIdempotencyToken();
    }
    if (input.ClientRequestToken !== undefined) {
        bodyParams["ClientRequestToken"] = input.ClientRequestToken;
    }
    if (input.DataAccessRoleArn !== undefined) {
        bodyParams["DataAccessRoleArn"] = input.DataAccessRoleArn;
    }
    if (input.DocumentClassifierName !== undefined) {
        bodyParams["DocumentClassifierName"] = input.DocumentClassifierName;
    }
    if (input.InputDataConfig !== undefined) {
        bodyParams["InputDataConfig"] = serializeAws_json1_1DocumentClassifierInputDataConfig(input.InputDataConfig, context);
    }
    if (input.LanguageCode !== undefined) {
        bodyParams["LanguageCode"] = input.LanguageCode;
    }
    if (input.Mode !== undefined) {
        bodyParams["Mode"] = input.Mode;
    }
    if (input.OutputDataConfig !== undefined) {
        bodyParams["OutputDataConfig"] = serializeAws_json1_1DocumentClassifierOutputDataConfig(input.OutputDataConfig, context);
    }
    if (input.Tags !== undefined) {
        bodyParams["Tags"] = serializeAws_json1_1TagList(input.Tags, context);
    }
    if (input.VolumeKmsKeyId !== undefined) {
        bodyParams["VolumeKmsKeyId"] = input.VolumeKmsKeyId;
    }
    if (input.VpcConfig !== undefined) {
        bodyParams["VpcConfig"] = serializeAws_json1_1VpcConfig(input.VpcConfig, context);
    }
    return bodyParams;
};
var serializeAws_json1_1CreateEndpointRequest = function (input, context) {
    var bodyParams = {};
    if (input.ClientRequestToken === undefined) {
        input.ClientRequestToken = generateIdempotencyToken();
    }
    if (input.ClientRequestToken !== undefined) {
        bodyParams["ClientRequestToken"] = input.ClientRequestToken;
    }
    if (input.DesiredInferenceUnits !== undefined) {
        bodyParams["DesiredInferenceUnits"] = input.DesiredInferenceUnits;
    }
    if (input.EndpointName !== undefined) {
        bodyParams["EndpointName"] = input.EndpointName;
    }
    if (input.ModelArn !== undefined) {
        bodyParams["ModelArn"] = input.ModelArn;
    }
    if (input.Tags !== undefined) {
        bodyParams["Tags"] = serializeAws_json1_1TagList(input.Tags, context);
    }
    return bodyParams;
};
var serializeAws_json1_1CreateEntityRecognizerRequest = function (input, context) {
    var bodyParams = {};
    if (input.ClientRequestToken === undefined) {
        input.ClientRequestToken = generateIdempotencyToken();
    }
    if (input.ClientRequestToken !== undefined) {
        bodyParams["ClientRequestToken"] = input.ClientRequestToken;
    }
    if (input.DataAccessRoleArn !== undefined) {
        bodyParams["DataAccessRoleArn"] = input.DataAccessRoleArn;
    }
    if (input.InputDataConfig !== undefined) {
        bodyParams["InputDataConfig"] = serializeAws_json1_1EntityRecognizerInputDataConfig(input.InputDataConfig, context);
    }
    if (input.LanguageCode !== undefined) {
        bodyParams["LanguageCode"] = input.LanguageCode;
    }
    if (input.RecognizerName !== undefined) {
        bodyParams["RecognizerName"] = input.RecognizerName;
    }
    if (input.Tags !== undefined) {
        bodyParams["Tags"] = serializeAws_json1_1TagList(input.Tags, context);
    }
    if (input.VolumeKmsKeyId !== undefined) {
        bodyParams["VolumeKmsKeyId"] = input.VolumeKmsKeyId;
    }
    if (input.VpcConfig !== undefined) {
        bodyParams["VpcConfig"] = serializeAws_json1_1VpcConfig(input.VpcConfig, context);
    }
    return bodyParams;
};
var serializeAws_json1_1DeleteDocumentClassifierRequest = function (input, context) {
    var bodyParams = {};
    if (input.DocumentClassifierArn !== undefined) {
        bodyParams["DocumentClassifierArn"] = input.DocumentClassifierArn;
    }
    return bodyParams;
};
var serializeAws_json1_1DeleteEndpointRequest = function (input, context) {
    var bodyParams = {};
    if (input.EndpointArn !== undefined) {
        bodyParams["EndpointArn"] = input.EndpointArn;
    }
    return bodyParams;
};
var serializeAws_json1_1DeleteEntityRecognizerRequest = function (input, context) {
    var bodyParams = {};
    if (input.EntityRecognizerArn !== undefined) {
        bodyParams["EntityRecognizerArn"] = input.EntityRecognizerArn;
    }
    return bodyParams;
};
var serializeAws_json1_1DescribeDocumentClassificationJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.JobId !== undefined) {
        bodyParams["JobId"] = input.JobId;
    }
    return bodyParams;
};
var serializeAws_json1_1DescribeDocumentClassifierRequest = function (input, context) {
    var bodyParams = {};
    if (input.DocumentClassifierArn !== undefined) {
        bodyParams["DocumentClassifierArn"] = input.DocumentClassifierArn;
    }
    return bodyParams;
};
var serializeAws_json1_1DescribeDominantLanguageDetectionJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.JobId !== undefined) {
        bodyParams["JobId"] = input.JobId;
    }
    return bodyParams;
};
var serializeAws_json1_1DescribeEndpointRequest = function (input, context) {
    var bodyParams = {};
    if (input.EndpointArn !== undefined) {
        bodyParams["EndpointArn"] = input.EndpointArn;
    }
    return bodyParams;
};
var serializeAws_json1_1DescribeEntitiesDetectionJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.JobId !== undefined) {
        bodyParams["JobId"] = input.JobId;
    }
    return bodyParams;
};
var serializeAws_json1_1DescribeEntityRecognizerRequest = function (input, context) {
    var bodyParams = {};
    if (input.EntityRecognizerArn !== undefined) {
        bodyParams["EntityRecognizerArn"] = input.EntityRecognizerArn;
    }
    return bodyParams;
};
var serializeAws_json1_1DescribeKeyPhrasesDetectionJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.JobId !== undefined) {
        bodyParams["JobId"] = input.JobId;
    }
    return bodyParams;
};
var serializeAws_json1_1DescribeSentimentDetectionJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.JobId !== undefined) {
        bodyParams["JobId"] = input.JobId;
    }
    return bodyParams;
};
var serializeAws_json1_1DescribeTopicsDetectionJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.JobId !== undefined) {
        bodyParams["JobId"] = input.JobId;
    }
    return bodyParams;
};
var serializeAws_json1_1DetectDominantLanguageRequest = function (input, context) {
    var bodyParams = {};
    if (input.Text !== undefined) {
        bodyParams["Text"] = input.Text;
    }
    return bodyParams;
};
var serializeAws_json1_1DetectEntitiesRequest = function (input, context) {
    var bodyParams = {};
    if (input.LanguageCode !== undefined) {
        bodyParams["LanguageCode"] = input.LanguageCode;
    }
    if (input.Text !== undefined) {
        bodyParams["Text"] = input.Text;
    }
    return bodyParams;
};
var serializeAws_json1_1DetectKeyPhrasesRequest = function (input, context) {
    var bodyParams = {};
    if (input.LanguageCode !== undefined) {
        bodyParams["LanguageCode"] = input.LanguageCode;
    }
    if (input.Text !== undefined) {
        bodyParams["Text"] = input.Text;
    }
    return bodyParams;
};
var serializeAws_json1_1DetectSentimentRequest = function (input, context) {
    var bodyParams = {};
    if (input.LanguageCode !== undefined) {
        bodyParams["LanguageCode"] = input.LanguageCode;
    }
    if (input.Text !== undefined) {
        bodyParams["Text"] = input.Text;
    }
    return bodyParams;
};
var serializeAws_json1_1DetectSyntaxRequest = function (input, context) {
    var bodyParams = {};
    if (input.LanguageCode !== undefined) {
        bodyParams["LanguageCode"] = input.LanguageCode;
    }
    if (input.Text !== undefined) {
        bodyParams["Text"] = input.Text;
    }
    return bodyParams;
};
var serializeAws_json1_1DocumentClassificationJobFilter = function (input, context) {
    var bodyParams = {};
    if (input.JobName !== undefined) {
        bodyParams["JobName"] = input.JobName;
    }
    if (input.JobStatus !== undefined) {
        bodyParams["JobStatus"] = input.JobStatus;
    }
    if (input.SubmitTimeAfter !== undefined) {
        bodyParams["SubmitTimeAfter"] = Math.round(input.SubmitTimeAfter.getTime() / 1000);
    }
    if (input.SubmitTimeBefore !== undefined) {
        bodyParams["SubmitTimeBefore"] = Math.round(input.SubmitTimeBefore.getTime() / 1000);
    }
    return bodyParams;
};
var serializeAws_json1_1DocumentClassifierFilter = function (input, context) {
    var bodyParams = {};
    if (input.Status !== undefined) {
        bodyParams["Status"] = input.Status;
    }
    if (input.SubmitTimeAfter !== undefined) {
        bodyParams["SubmitTimeAfter"] = Math.round(input.SubmitTimeAfter.getTime() / 1000);
    }
    if (input.SubmitTimeBefore !== undefined) {
        bodyParams["SubmitTimeBefore"] = Math.round(input.SubmitTimeBefore.getTime() / 1000);
    }
    return bodyParams;
};
var serializeAws_json1_1DocumentClassifierInputDataConfig = function (input, context) {
    var bodyParams = {};
    if (input.LabelDelimiter !== undefined) {
        bodyParams["LabelDelimiter"] = input.LabelDelimiter;
    }
    if (input.S3Uri !== undefined) {
        bodyParams["S3Uri"] = input.S3Uri;
    }
    return bodyParams;
};
var serializeAws_json1_1DocumentClassifierOutputDataConfig = function (input, context) {
    var bodyParams = {};
    if (input.KmsKeyId !== undefined) {
        bodyParams["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.S3Uri !== undefined) {
        bodyParams["S3Uri"] = input.S3Uri;
    }
    return bodyParams;
};
var serializeAws_json1_1DominantLanguageDetectionJobFilter = function (input, context) {
    var bodyParams = {};
    if (input.JobName !== undefined) {
        bodyParams["JobName"] = input.JobName;
    }
    if (input.JobStatus !== undefined) {
        bodyParams["JobStatus"] = input.JobStatus;
    }
    if (input.SubmitTimeAfter !== undefined) {
        bodyParams["SubmitTimeAfter"] = Math.round(input.SubmitTimeAfter.getTime() / 1000);
    }
    if (input.SubmitTimeBefore !== undefined) {
        bodyParams["SubmitTimeBefore"] = Math.round(input.SubmitTimeBefore.getTime() / 1000);
    }
    return bodyParams;
};
var serializeAws_json1_1EndpointFilter = function (input, context) {
    var bodyParams = {};
    if (input.CreationTimeAfter !== undefined) {
        bodyParams["CreationTimeAfter"] = Math.round(input.CreationTimeAfter.getTime() / 1000);
    }
    if (input.CreationTimeBefore !== undefined) {
        bodyParams["CreationTimeBefore"] = Math.round(input.CreationTimeBefore.getTime() / 1000);
    }
    if (input.ModelArn !== undefined) {
        bodyParams["ModelArn"] = input.ModelArn;
    }
    if (input.Status !== undefined) {
        bodyParams["Status"] = input.Status;
    }
    return bodyParams;
};
var serializeAws_json1_1EntitiesDetectionJobFilter = function (input, context) {
    var bodyParams = {};
    if (input.JobName !== undefined) {
        bodyParams["JobName"] = input.JobName;
    }
    if (input.JobStatus !== undefined) {
        bodyParams["JobStatus"] = input.JobStatus;
    }
    if (input.SubmitTimeAfter !== undefined) {
        bodyParams["SubmitTimeAfter"] = Math.round(input.SubmitTimeAfter.getTime() / 1000);
    }
    if (input.SubmitTimeBefore !== undefined) {
        bodyParams["SubmitTimeBefore"] = Math.round(input.SubmitTimeBefore.getTime() / 1000);
    }
    return bodyParams;
};
var serializeAws_json1_1EntityRecognizerAnnotations = function (input, context) {
    var bodyParams = {};
    if (input.S3Uri !== undefined) {
        bodyParams["S3Uri"] = input.S3Uri;
    }
    return bodyParams;
};
var serializeAws_json1_1EntityRecognizerDocuments = function (input, context) {
    var bodyParams = {};
    if (input.S3Uri !== undefined) {
        bodyParams["S3Uri"] = input.S3Uri;
    }
    return bodyParams;
};
var serializeAws_json1_1EntityRecognizerEntityList = function (input, context) {
    var bodyParams = {};
    if (input.S3Uri !== undefined) {
        bodyParams["S3Uri"] = input.S3Uri;
    }
    return bodyParams;
};
var serializeAws_json1_1EntityRecognizerFilter = function (input, context) {
    var bodyParams = {};
    if (input.Status !== undefined) {
        bodyParams["Status"] = input.Status;
    }
    if (input.SubmitTimeAfter !== undefined) {
        bodyParams["SubmitTimeAfter"] = Math.round(input.SubmitTimeAfter.getTime() / 1000);
    }
    if (input.SubmitTimeBefore !== undefined) {
        bodyParams["SubmitTimeBefore"] = Math.round(input.SubmitTimeBefore.getTime() / 1000);
    }
    return bodyParams;
};
var serializeAws_json1_1EntityRecognizerInputDataConfig = function (input, context) {
    var bodyParams = {};
    if (input.Annotations !== undefined) {
        bodyParams["Annotations"] = serializeAws_json1_1EntityRecognizerAnnotations(input.Annotations, context);
    }
    if (input.Documents !== undefined) {
        bodyParams["Documents"] = serializeAws_json1_1EntityRecognizerDocuments(input.Documents, context);
    }
    if (input.EntityList !== undefined) {
        bodyParams["EntityList"] = serializeAws_json1_1EntityRecognizerEntityList(input.EntityList, context);
    }
    if (input.EntityTypes !== undefined) {
        bodyParams["EntityTypes"] = serializeAws_json1_1EntityTypesList(input.EntityTypes, context);
    }
    return bodyParams;
};
var serializeAws_json1_1EntityTypesList = function (input, context) {
    var e_1, _a;
    var contents = [];
    try {
        for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
            var entry = input_1_1.value;
            contents.push(serializeAws_json1_1EntityTypesListItem(entry, context));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return contents;
};
var serializeAws_json1_1EntityTypesListItem = function (input, context) {
    var bodyParams = {};
    if (input.Type !== undefined) {
        bodyParams["Type"] = input.Type;
    }
    return bodyParams;
};
var serializeAws_json1_1InputDataConfig = function (input, context) {
    var bodyParams = {};
    if (input.InputFormat !== undefined) {
        bodyParams["InputFormat"] = input.InputFormat;
    }
    if (input.S3Uri !== undefined) {
        bodyParams["S3Uri"] = input.S3Uri;
    }
    return bodyParams;
};
var serializeAws_json1_1KeyPhrasesDetectionJobFilter = function (input, context) {
    var bodyParams = {};
    if (input.JobName !== undefined) {
        bodyParams["JobName"] = input.JobName;
    }
    if (input.JobStatus !== undefined) {
        bodyParams["JobStatus"] = input.JobStatus;
    }
    if (input.SubmitTimeAfter !== undefined) {
        bodyParams["SubmitTimeAfter"] = Math.round(input.SubmitTimeAfter.getTime() / 1000);
    }
    if (input.SubmitTimeBefore !== undefined) {
        bodyParams["SubmitTimeBefore"] = Math.round(input.SubmitTimeBefore.getTime() / 1000);
    }
    return bodyParams;
};
var serializeAws_json1_1ListDocumentClassificationJobsRequest = function (input, context) {
    var bodyParams = {};
    if (input.Filter !== undefined) {
        bodyParams["Filter"] = serializeAws_json1_1DocumentClassificationJobFilter(input.Filter, context);
    }
    if (input.MaxResults !== undefined) {
        bodyParams["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined) {
        bodyParams["NextToken"] = input.NextToken;
    }
    return bodyParams;
};
var serializeAws_json1_1ListDocumentClassifiersRequest = function (input, context) {
    var bodyParams = {};
    if (input.Filter !== undefined) {
        bodyParams["Filter"] = serializeAws_json1_1DocumentClassifierFilter(input.Filter, context);
    }
    if (input.MaxResults !== undefined) {
        bodyParams["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined) {
        bodyParams["NextToken"] = input.NextToken;
    }
    return bodyParams;
};
var serializeAws_json1_1ListDominantLanguageDetectionJobsRequest = function (input, context) {
    var bodyParams = {};
    if (input.Filter !== undefined) {
        bodyParams["Filter"] = serializeAws_json1_1DominantLanguageDetectionJobFilter(input.Filter, context);
    }
    if (input.MaxResults !== undefined) {
        bodyParams["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined) {
        bodyParams["NextToken"] = input.NextToken;
    }
    return bodyParams;
};
var serializeAws_json1_1ListEndpointsRequest = function (input, context) {
    var bodyParams = {};
    if (input.Filter !== undefined) {
        bodyParams["Filter"] = serializeAws_json1_1EndpointFilter(input.Filter, context);
    }
    if (input.MaxResults !== undefined) {
        bodyParams["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined) {
        bodyParams["NextToken"] = input.NextToken;
    }
    return bodyParams;
};
var serializeAws_json1_1ListEntitiesDetectionJobsRequest = function (input, context) {
    var bodyParams = {};
    if (input.Filter !== undefined) {
        bodyParams["Filter"] = serializeAws_json1_1EntitiesDetectionJobFilter(input.Filter, context);
    }
    if (input.MaxResults !== undefined) {
        bodyParams["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined) {
        bodyParams["NextToken"] = input.NextToken;
    }
    return bodyParams;
};
var serializeAws_json1_1ListEntityRecognizersRequest = function (input, context) {
    var bodyParams = {};
    if (input.Filter !== undefined) {
        bodyParams["Filter"] = serializeAws_json1_1EntityRecognizerFilter(input.Filter, context);
    }
    if (input.MaxResults !== undefined) {
        bodyParams["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined) {
        bodyParams["NextToken"] = input.NextToken;
    }
    return bodyParams;
};
var serializeAws_json1_1ListKeyPhrasesDetectionJobsRequest = function (input, context) {
    var bodyParams = {};
    if (input.Filter !== undefined) {
        bodyParams["Filter"] = serializeAws_json1_1KeyPhrasesDetectionJobFilter(input.Filter, context);
    }
    if (input.MaxResults !== undefined) {
        bodyParams["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined) {
        bodyParams["NextToken"] = input.NextToken;
    }
    return bodyParams;
};
var serializeAws_json1_1ListSentimentDetectionJobsRequest = function (input, context) {
    var bodyParams = {};
    if (input.Filter !== undefined) {
        bodyParams["Filter"] = serializeAws_json1_1SentimentDetectionJobFilter(input.Filter, context);
    }
    if (input.MaxResults !== undefined) {
        bodyParams["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined) {
        bodyParams["NextToken"] = input.NextToken;
    }
    return bodyParams;
};
var serializeAws_json1_1ListTagsForResourceRequest = function (input, context) {
    var bodyParams = {};
    if (input.ResourceArn !== undefined) {
        bodyParams["ResourceArn"] = input.ResourceArn;
    }
    return bodyParams;
};
var serializeAws_json1_1ListTopicsDetectionJobsRequest = function (input, context) {
    var bodyParams = {};
    if (input.Filter !== undefined) {
        bodyParams["Filter"] = serializeAws_json1_1TopicsDetectionJobFilter(input.Filter, context);
    }
    if (input.MaxResults !== undefined) {
        bodyParams["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined) {
        bodyParams["NextToken"] = input.NextToken;
    }
    return bodyParams;
};
var serializeAws_json1_1OutputDataConfig = function (input, context) {
    var bodyParams = {};
    if (input.KmsKeyId !== undefined) {
        bodyParams["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.S3Uri !== undefined) {
        bodyParams["S3Uri"] = input.S3Uri;
    }
    return bodyParams;
};
var serializeAws_json1_1SecurityGroupIds = function (input, context) {
    var e_2, _a;
    var contents = [];
    try {
        for (var input_2 = __values(input), input_2_1 = input_2.next(); !input_2_1.done; input_2_1 = input_2.next()) {
            var entry = input_2_1.value;
            contents.push(entry);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (input_2_1 && !input_2_1.done && (_a = input_2.return)) _a.call(input_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return contents;
};
var serializeAws_json1_1SentimentDetectionJobFilter = function (input, context) {
    var bodyParams = {};
    if (input.JobName !== undefined) {
        bodyParams["JobName"] = input.JobName;
    }
    if (input.JobStatus !== undefined) {
        bodyParams["JobStatus"] = input.JobStatus;
    }
    if (input.SubmitTimeAfter !== undefined) {
        bodyParams["SubmitTimeAfter"] = Math.round(input.SubmitTimeAfter.getTime() / 1000);
    }
    if (input.SubmitTimeBefore !== undefined) {
        bodyParams["SubmitTimeBefore"] = Math.round(input.SubmitTimeBefore.getTime() / 1000);
    }
    return bodyParams;
};
var serializeAws_json1_1StartDocumentClassificationJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.ClientRequestToken === undefined) {
        input.ClientRequestToken = generateIdempotencyToken();
    }
    if (input.ClientRequestToken !== undefined) {
        bodyParams["ClientRequestToken"] = input.ClientRequestToken;
    }
    if (input.DataAccessRoleArn !== undefined) {
        bodyParams["DataAccessRoleArn"] = input.DataAccessRoleArn;
    }
    if (input.DocumentClassifierArn !== undefined) {
        bodyParams["DocumentClassifierArn"] = input.DocumentClassifierArn;
    }
    if (input.InputDataConfig !== undefined) {
        bodyParams["InputDataConfig"] = serializeAws_json1_1InputDataConfig(input.InputDataConfig, context);
    }
    if (input.JobName !== undefined) {
        bodyParams["JobName"] = input.JobName;
    }
    if (input.OutputDataConfig !== undefined) {
        bodyParams["OutputDataConfig"] = serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context);
    }
    if (input.VolumeKmsKeyId !== undefined) {
        bodyParams["VolumeKmsKeyId"] = input.VolumeKmsKeyId;
    }
    if (input.VpcConfig !== undefined) {
        bodyParams["VpcConfig"] = serializeAws_json1_1VpcConfig(input.VpcConfig, context);
    }
    return bodyParams;
};
var serializeAws_json1_1StartDominantLanguageDetectionJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.ClientRequestToken === undefined) {
        input.ClientRequestToken = generateIdempotencyToken();
    }
    if (input.ClientRequestToken !== undefined) {
        bodyParams["ClientRequestToken"] = input.ClientRequestToken;
    }
    if (input.DataAccessRoleArn !== undefined) {
        bodyParams["DataAccessRoleArn"] = input.DataAccessRoleArn;
    }
    if (input.InputDataConfig !== undefined) {
        bodyParams["InputDataConfig"] = serializeAws_json1_1InputDataConfig(input.InputDataConfig, context);
    }
    if (input.JobName !== undefined) {
        bodyParams["JobName"] = input.JobName;
    }
    if (input.OutputDataConfig !== undefined) {
        bodyParams["OutputDataConfig"] = serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context);
    }
    if (input.VolumeKmsKeyId !== undefined) {
        bodyParams["VolumeKmsKeyId"] = input.VolumeKmsKeyId;
    }
    if (input.VpcConfig !== undefined) {
        bodyParams["VpcConfig"] = serializeAws_json1_1VpcConfig(input.VpcConfig, context);
    }
    return bodyParams;
};
var serializeAws_json1_1StartEntitiesDetectionJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.ClientRequestToken === undefined) {
        input.ClientRequestToken = generateIdempotencyToken();
    }
    if (input.ClientRequestToken !== undefined) {
        bodyParams["ClientRequestToken"] = input.ClientRequestToken;
    }
    if (input.DataAccessRoleArn !== undefined) {
        bodyParams["DataAccessRoleArn"] = input.DataAccessRoleArn;
    }
    if (input.EntityRecognizerArn !== undefined) {
        bodyParams["EntityRecognizerArn"] = input.EntityRecognizerArn;
    }
    if (input.InputDataConfig !== undefined) {
        bodyParams["InputDataConfig"] = serializeAws_json1_1InputDataConfig(input.InputDataConfig, context);
    }
    if (input.JobName !== undefined) {
        bodyParams["JobName"] = input.JobName;
    }
    if (input.LanguageCode !== undefined) {
        bodyParams["LanguageCode"] = input.LanguageCode;
    }
    if (input.OutputDataConfig !== undefined) {
        bodyParams["OutputDataConfig"] = serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context);
    }
    if (input.VolumeKmsKeyId !== undefined) {
        bodyParams["VolumeKmsKeyId"] = input.VolumeKmsKeyId;
    }
    if (input.VpcConfig !== undefined) {
        bodyParams["VpcConfig"] = serializeAws_json1_1VpcConfig(input.VpcConfig, context);
    }
    return bodyParams;
};
var serializeAws_json1_1StartKeyPhrasesDetectionJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.ClientRequestToken === undefined) {
        input.ClientRequestToken = generateIdempotencyToken();
    }
    if (input.ClientRequestToken !== undefined) {
        bodyParams["ClientRequestToken"] = input.ClientRequestToken;
    }
    if (input.DataAccessRoleArn !== undefined) {
        bodyParams["DataAccessRoleArn"] = input.DataAccessRoleArn;
    }
    if (input.InputDataConfig !== undefined) {
        bodyParams["InputDataConfig"] = serializeAws_json1_1InputDataConfig(input.InputDataConfig, context);
    }
    if (input.JobName !== undefined) {
        bodyParams["JobName"] = input.JobName;
    }
    if (input.LanguageCode !== undefined) {
        bodyParams["LanguageCode"] = input.LanguageCode;
    }
    if (input.OutputDataConfig !== undefined) {
        bodyParams["OutputDataConfig"] = serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context);
    }
    if (input.VolumeKmsKeyId !== undefined) {
        bodyParams["VolumeKmsKeyId"] = input.VolumeKmsKeyId;
    }
    if (input.VpcConfig !== undefined) {
        bodyParams["VpcConfig"] = serializeAws_json1_1VpcConfig(input.VpcConfig, context);
    }
    return bodyParams;
};
var serializeAws_json1_1StartSentimentDetectionJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.ClientRequestToken === undefined) {
        input.ClientRequestToken = generateIdempotencyToken();
    }
    if (input.ClientRequestToken !== undefined) {
        bodyParams["ClientRequestToken"] = input.ClientRequestToken;
    }
    if (input.DataAccessRoleArn !== undefined) {
        bodyParams["DataAccessRoleArn"] = input.DataAccessRoleArn;
    }
    if (input.InputDataConfig !== undefined) {
        bodyParams["InputDataConfig"] = serializeAws_json1_1InputDataConfig(input.InputDataConfig, context);
    }
    if (input.JobName !== undefined) {
        bodyParams["JobName"] = input.JobName;
    }
    if (input.LanguageCode !== undefined) {
        bodyParams["LanguageCode"] = input.LanguageCode;
    }
    if (input.OutputDataConfig !== undefined) {
        bodyParams["OutputDataConfig"] = serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context);
    }
    if (input.VolumeKmsKeyId !== undefined) {
        bodyParams["VolumeKmsKeyId"] = input.VolumeKmsKeyId;
    }
    if (input.VpcConfig !== undefined) {
        bodyParams["VpcConfig"] = serializeAws_json1_1VpcConfig(input.VpcConfig, context);
    }
    return bodyParams;
};
var serializeAws_json1_1StartTopicsDetectionJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.ClientRequestToken === undefined) {
        input.ClientRequestToken = generateIdempotencyToken();
    }
    if (input.ClientRequestToken !== undefined) {
        bodyParams["ClientRequestToken"] = input.ClientRequestToken;
    }
    if (input.DataAccessRoleArn !== undefined) {
        bodyParams["DataAccessRoleArn"] = input.DataAccessRoleArn;
    }
    if (input.InputDataConfig !== undefined) {
        bodyParams["InputDataConfig"] = serializeAws_json1_1InputDataConfig(input.InputDataConfig, context);
    }
    if (input.JobName !== undefined) {
        bodyParams["JobName"] = input.JobName;
    }
    if (input.NumberOfTopics !== undefined) {
        bodyParams["NumberOfTopics"] = input.NumberOfTopics;
    }
    if (input.OutputDataConfig !== undefined) {
        bodyParams["OutputDataConfig"] = serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context);
    }
    if (input.VolumeKmsKeyId !== undefined) {
        bodyParams["VolumeKmsKeyId"] = input.VolumeKmsKeyId;
    }
    if (input.VpcConfig !== undefined) {
        bodyParams["VpcConfig"] = serializeAws_json1_1VpcConfig(input.VpcConfig, context);
    }
    return bodyParams;
};
var serializeAws_json1_1StopDominantLanguageDetectionJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.JobId !== undefined) {
        bodyParams["JobId"] = input.JobId;
    }
    return bodyParams;
};
var serializeAws_json1_1StopEntitiesDetectionJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.JobId !== undefined) {
        bodyParams["JobId"] = input.JobId;
    }
    return bodyParams;
};
var serializeAws_json1_1StopKeyPhrasesDetectionJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.JobId !== undefined) {
        bodyParams["JobId"] = input.JobId;
    }
    return bodyParams;
};
var serializeAws_json1_1StopSentimentDetectionJobRequest = function (input, context) {
    var bodyParams = {};
    if (input.JobId !== undefined) {
        bodyParams["JobId"] = input.JobId;
    }
    return bodyParams;
};
var serializeAws_json1_1StopTrainingDocumentClassifierRequest = function (input, context) {
    var bodyParams = {};
    if (input.DocumentClassifierArn !== undefined) {
        bodyParams["DocumentClassifierArn"] = input.DocumentClassifierArn;
    }
    return bodyParams;
};
var serializeAws_json1_1StopTrainingEntityRecognizerRequest = function (input, context) {
    var bodyParams = {};
    if (input.EntityRecognizerArn !== undefined) {
        bodyParams["EntityRecognizerArn"] = input.EntityRecognizerArn;
    }
    return bodyParams;
};
var serializeAws_json1_1StringList = function (input, context) {
    var e_3, _a;
    var contents = [];
    try {
        for (var input_3 = __values(input), input_3_1 = input_3.next(); !input_3_1.done; input_3_1 = input_3.next()) {
            var entry = input_3_1.value;
            contents.push(entry);
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (input_3_1 && !input_3_1.done && (_a = input_3.return)) _a.call(input_3);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return contents;
};
var serializeAws_json1_1Subnets = function (input, context) {
    var e_4, _a;
    var contents = [];
    try {
        for (var input_4 = __values(input), input_4_1 = input_4.next(); !input_4_1.done; input_4_1 = input_4.next()) {
            var entry = input_4_1.value;
            contents.push(entry);
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (input_4_1 && !input_4_1.done && (_a = input_4.return)) _a.call(input_4);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return contents;
};
var serializeAws_json1_1Tag = function (input, context) {
    var bodyParams = {};
    if (input.Key !== undefined) {
        bodyParams["Key"] = input.Key;
    }
    if (input.Value !== undefined) {
        bodyParams["Value"] = input.Value;
    }
    return bodyParams;
};
var serializeAws_json1_1TagKeyList = function (input, context) {
    var e_5, _a;
    var contents = [];
    try {
        for (var input_5 = __values(input), input_5_1 = input_5.next(); !input_5_1.done; input_5_1 = input_5.next()) {
            var entry = input_5_1.value;
            contents.push(entry);
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (input_5_1 && !input_5_1.done && (_a = input_5.return)) _a.call(input_5);
        }
        finally { if (e_5) throw e_5.error; }
    }
    return contents;
};
var serializeAws_json1_1TagList = function (input, context) {
    var e_6, _a;
    var contents = [];
    try {
        for (var input_6 = __values(input), input_6_1 = input_6.next(); !input_6_1.done; input_6_1 = input_6.next()) {
            var entry = input_6_1.value;
            contents.push(serializeAws_json1_1Tag(entry, context));
        }
    }
    catch (e_6_1) { e_6 = { error: e_6_1 }; }
    finally {
        try {
            if (input_6_1 && !input_6_1.done && (_a = input_6.return)) _a.call(input_6);
        }
        finally { if (e_6) throw e_6.error; }
    }
    return contents;
};
var serializeAws_json1_1TagResourceRequest = function (input, context) {
    var bodyParams = {};
    if (input.ResourceArn !== undefined) {
        bodyParams["ResourceArn"] = input.ResourceArn;
    }
    if (input.Tags !== undefined) {
        bodyParams["Tags"] = serializeAws_json1_1TagList(input.Tags, context);
    }
    return bodyParams;
};
var serializeAws_json1_1TopicsDetectionJobFilter = function (input, context) {
    var bodyParams = {};
    if (input.JobName !== undefined) {
        bodyParams["JobName"] = input.JobName;
    }
    if (input.JobStatus !== undefined) {
        bodyParams["JobStatus"] = input.JobStatus;
    }
    if (input.SubmitTimeAfter !== undefined) {
        bodyParams["SubmitTimeAfter"] = Math.round(input.SubmitTimeAfter.getTime() / 1000);
    }
    if (input.SubmitTimeBefore !== undefined) {
        bodyParams["SubmitTimeBefore"] = Math.round(input.SubmitTimeBefore.getTime() / 1000);
    }
    return bodyParams;
};
var serializeAws_json1_1UntagResourceRequest = function (input, context) {
    var bodyParams = {};
    if (input.ResourceArn !== undefined) {
        bodyParams["ResourceArn"] = input.ResourceArn;
    }
    if (input.TagKeys !== undefined) {
        bodyParams["TagKeys"] = serializeAws_json1_1TagKeyList(input.TagKeys, context);
    }
    return bodyParams;
};
var serializeAws_json1_1UpdateEndpointRequest = function (input, context) {
    var bodyParams = {};
    if (input.DesiredInferenceUnits !== undefined) {
        bodyParams["DesiredInferenceUnits"] = input.DesiredInferenceUnits;
    }
    if (input.EndpointArn !== undefined) {
        bodyParams["EndpointArn"] = input.EndpointArn;
    }
    return bodyParams;
};
var serializeAws_json1_1VpcConfig = function (input, context) {
    var bodyParams = {};
    if (input.SecurityGroupIds !== undefined) {
        bodyParams["SecurityGroupIds"] = serializeAws_json1_1SecurityGroupIds(input.SecurityGroupIds, context);
    }
    if (input.Subnets !== undefined) {
        bodyParams["Subnets"] = serializeAws_json1_1Subnets(input.Subnets, context);
    }
    return bodyParams;
};
var deserializeAws_json1_1BatchDetectDominantLanguageItemResult = function (output, context) {
    var contents = {
        __type: "BatchDetectDominantLanguageItemResult",
        Index: undefined,
        Languages: undefined
    };
    if (output.Index !== undefined && output.Index !== null) {
        contents.Index = output.Index;
    }
    if (output.Languages !== undefined && output.Languages !== null) {
        contents.Languages = deserializeAws_json1_1ListOfDominantLanguages(output.Languages, context);
    }
    return contents;
};
var deserializeAws_json1_1BatchDetectDominantLanguageResponse = function (output, context) {
    var contents = {
        __type: "BatchDetectDominantLanguageResponse",
        ErrorList: undefined,
        ResultList: undefined
    };
    if (output.ErrorList !== undefined && output.ErrorList !== null) {
        contents.ErrorList = deserializeAws_json1_1BatchItemErrorList(output.ErrorList, context);
    }
    if (output.ResultList !== undefined && output.ResultList !== null) {
        contents.ResultList = deserializeAws_json1_1ListOfDetectDominantLanguageResult(output.ResultList, context);
    }
    return contents;
};
var deserializeAws_json1_1BatchDetectEntitiesItemResult = function (output, context) {
    var contents = {
        __type: "BatchDetectEntitiesItemResult",
        Entities: undefined,
        Index: undefined
    };
    if (output.Entities !== undefined && output.Entities !== null) {
        contents.Entities = deserializeAws_json1_1ListOfEntities(output.Entities, context);
    }
    if (output.Index !== undefined && output.Index !== null) {
        contents.Index = output.Index;
    }
    return contents;
};
var deserializeAws_json1_1BatchDetectEntitiesResponse = function (output, context) {
    var contents = {
        __type: "BatchDetectEntitiesResponse",
        ErrorList: undefined,
        ResultList: undefined
    };
    if (output.ErrorList !== undefined && output.ErrorList !== null) {
        contents.ErrorList = deserializeAws_json1_1BatchItemErrorList(output.ErrorList, context);
    }
    if (output.ResultList !== undefined && output.ResultList !== null) {
        contents.ResultList = deserializeAws_json1_1ListOfDetectEntitiesResult(output.ResultList, context);
    }
    return contents;
};
var deserializeAws_json1_1BatchDetectKeyPhrasesItemResult = function (output, context) {
    var contents = {
        __type: "BatchDetectKeyPhrasesItemResult",
        Index: undefined,
        KeyPhrases: undefined
    };
    if (output.Index !== undefined && output.Index !== null) {
        contents.Index = output.Index;
    }
    if (output.KeyPhrases !== undefined && output.KeyPhrases !== null) {
        contents.KeyPhrases = deserializeAws_json1_1ListOfKeyPhrases(output.KeyPhrases, context);
    }
    return contents;
};
var deserializeAws_json1_1BatchDetectKeyPhrasesResponse = function (output, context) {
    var contents = {
        __type: "BatchDetectKeyPhrasesResponse",
        ErrorList: undefined,
        ResultList: undefined
    };
    if (output.ErrorList !== undefined && output.ErrorList !== null) {
        contents.ErrorList = deserializeAws_json1_1BatchItemErrorList(output.ErrorList, context);
    }
    if (output.ResultList !== undefined && output.ResultList !== null) {
        contents.ResultList = deserializeAws_json1_1ListOfDetectKeyPhrasesResult(output.ResultList, context);
    }
    return contents;
};
var deserializeAws_json1_1BatchDetectSentimentItemResult = function (output, context) {
    var contents = {
        __type: "BatchDetectSentimentItemResult",
        Index: undefined,
        Sentiment: undefined,
        SentimentScore: undefined
    };
    if (output.Index !== undefined && output.Index !== null) {
        contents.Index = output.Index;
    }
    if (output.Sentiment !== undefined && output.Sentiment !== null) {
        contents.Sentiment = output.Sentiment;
    }
    if (output.SentimentScore !== undefined && output.SentimentScore !== null) {
        contents.SentimentScore = deserializeAws_json1_1SentimentScore(output.SentimentScore, context);
    }
    return contents;
};
var deserializeAws_json1_1BatchDetectSentimentResponse = function (output, context) {
    var contents = {
        __type: "BatchDetectSentimentResponse",
        ErrorList: undefined,
        ResultList: undefined
    };
    if (output.ErrorList !== undefined && output.ErrorList !== null) {
        contents.ErrorList = deserializeAws_json1_1BatchItemErrorList(output.ErrorList, context);
    }
    if (output.ResultList !== undefined && output.ResultList !== null) {
        contents.ResultList = deserializeAws_json1_1ListOfDetectSentimentResult(output.ResultList, context);
    }
    return contents;
};
var deserializeAws_json1_1BatchDetectSyntaxItemResult = function (output, context) {
    var contents = {
        __type: "BatchDetectSyntaxItemResult",
        Index: undefined,
        SyntaxTokens: undefined
    };
    if (output.Index !== undefined && output.Index !== null) {
        contents.Index = output.Index;
    }
    if (output.SyntaxTokens !== undefined && output.SyntaxTokens !== null) {
        contents.SyntaxTokens = deserializeAws_json1_1ListOfSyntaxTokens(output.SyntaxTokens, context);
    }
    return contents;
};
var deserializeAws_json1_1BatchDetectSyntaxResponse = function (output, context) {
    var contents = {
        __type: "BatchDetectSyntaxResponse",
        ErrorList: undefined,
        ResultList: undefined
    };
    if (output.ErrorList !== undefined && output.ErrorList !== null) {
        contents.ErrorList = deserializeAws_json1_1BatchItemErrorList(output.ErrorList, context);
    }
    if (output.ResultList !== undefined && output.ResultList !== null) {
        contents.ResultList = deserializeAws_json1_1ListOfDetectSyntaxResult(output.ResultList, context);
    }
    return contents;
};
var deserializeAws_json1_1BatchItemError = function (output, context) {
    var contents = {
        __type: "BatchItemError",
        ErrorCode: undefined,
        ErrorMessage: undefined,
        Index: undefined
    };
    if (output.ErrorCode !== undefined && output.ErrorCode !== null) {
        contents.ErrorCode = output.ErrorCode;
    }
    if (output.ErrorMessage !== undefined && output.ErrorMessage !== null) {
        contents.ErrorMessage = output.ErrorMessage;
    }
    if (output.Index !== undefined && output.Index !== null) {
        contents.Index = output.Index;
    }
    return contents;
};
var deserializeAws_json1_1BatchItemErrorList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1BatchItemError(entry, context);
    });
};
var deserializeAws_json1_1BatchSizeLimitExceededException = function (output, context) {
    var contents = {
        __type: "BatchSizeLimitExceededException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1ClassifierEvaluationMetrics = function (output, context) {
    var contents = {
        __type: "ClassifierEvaluationMetrics",
        Accuracy: undefined,
        F1Score: undefined,
        HammingLoss: undefined,
        MicroF1Score: undefined,
        MicroPrecision: undefined,
        MicroRecall: undefined,
        Precision: undefined,
        Recall: undefined
    };
    if (output.Accuracy !== undefined && output.Accuracy !== null) {
        contents.Accuracy = output.Accuracy;
    }
    if (output.F1Score !== undefined && output.F1Score !== null) {
        contents.F1Score = output.F1Score;
    }
    if (output.HammingLoss !== undefined && output.HammingLoss !== null) {
        contents.HammingLoss = output.HammingLoss;
    }
    if (output.MicroF1Score !== undefined && output.MicroF1Score !== null) {
        contents.MicroF1Score = output.MicroF1Score;
    }
    if (output.MicroPrecision !== undefined && output.MicroPrecision !== null) {
        contents.MicroPrecision = output.MicroPrecision;
    }
    if (output.MicroRecall !== undefined && output.MicroRecall !== null) {
        contents.MicroRecall = output.MicroRecall;
    }
    if (output.Precision !== undefined && output.Precision !== null) {
        contents.Precision = output.Precision;
    }
    if (output.Recall !== undefined && output.Recall !== null) {
        contents.Recall = output.Recall;
    }
    return contents;
};
var deserializeAws_json1_1ClassifierMetadata = function (output, context) {
    var contents = {
        __type: "ClassifierMetadata",
        EvaluationMetrics: undefined,
        NumberOfLabels: undefined,
        NumberOfTestDocuments: undefined,
        NumberOfTrainedDocuments: undefined
    };
    if (output.EvaluationMetrics !== undefined &&
        output.EvaluationMetrics !== null) {
        contents.EvaluationMetrics = deserializeAws_json1_1ClassifierEvaluationMetrics(output.EvaluationMetrics, context);
    }
    if (output.NumberOfLabels !== undefined && output.NumberOfLabels !== null) {
        contents.NumberOfLabels = output.NumberOfLabels;
    }
    if (output.NumberOfTestDocuments !== undefined &&
        output.NumberOfTestDocuments !== null) {
        contents.NumberOfTestDocuments = output.NumberOfTestDocuments;
    }
    if (output.NumberOfTrainedDocuments !== undefined &&
        output.NumberOfTrainedDocuments !== null) {
        contents.NumberOfTrainedDocuments = output.NumberOfTrainedDocuments;
    }
    return contents;
};
var deserializeAws_json1_1ClassifyDocumentResponse = function (output, context) {
    var contents = {
        __type: "ClassifyDocumentResponse",
        Classes: undefined,
        Labels: undefined
    };
    if (output.Classes !== undefined && output.Classes !== null) {
        contents.Classes = deserializeAws_json1_1ListOfClasses(output.Classes, context);
    }
    if (output.Labels !== undefined && output.Labels !== null) {
        contents.Labels = deserializeAws_json1_1ListOfLabels(output.Labels, context);
    }
    return contents;
};
var deserializeAws_json1_1ConcurrentModificationException = function (output, context) {
    var contents = {
        __type: "ConcurrentModificationException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1CreateDocumentClassifierResponse = function (output, context) {
    var contents = {
        __type: "CreateDocumentClassifierResponse",
        DocumentClassifierArn: undefined
    };
    if (output.DocumentClassifierArn !== undefined &&
        output.DocumentClassifierArn !== null) {
        contents.DocumentClassifierArn = output.DocumentClassifierArn;
    }
    return contents;
};
var deserializeAws_json1_1CreateEndpointResponse = function (output, context) {
    var contents = {
        __type: "CreateEndpointResponse",
        EndpointArn: undefined
    };
    if (output.EndpointArn !== undefined && output.EndpointArn !== null) {
        contents.EndpointArn = output.EndpointArn;
    }
    return contents;
};
var deserializeAws_json1_1CreateEntityRecognizerResponse = function (output, context) {
    var contents = {
        __type: "CreateEntityRecognizerResponse",
        EntityRecognizerArn: undefined
    };
    if (output.EntityRecognizerArn !== undefined &&
        output.EntityRecognizerArn !== null) {
        contents.EntityRecognizerArn = output.EntityRecognizerArn;
    }
    return contents;
};
var deserializeAws_json1_1DeleteDocumentClassifierResponse = function (output, context) {
    var contents = {
        __type: "DeleteDocumentClassifierResponse"
    };
    return contents;
};
var deserializeAws_json1_1DeleteEndpointResponse = function (output, context) {
    var contents = {
        __type: "DeleteEndpointResponse"
    };
    return contents;
};
var deserializeAws_json1_1DeleteEntityRecognizerResponse = function (output, context) {
    var contents = {
        __type: "DeleteEntityRecognizerResponse"
    };
    return contents;
};
var deserializeAws_json1_1DescribeDocumentClassificationJobResponse = function (output, context) {
    var contents = {
        __type: "DescribeDocumentClassificationJobResponse",
        DocumentClassificationJobProperties: undefined
    };
    if (output.DocumentClassificationJobProperties !== undefined &&
        output.DocumentClassificationJobProperties !== null) {
        contents.DocumentClassificationJobProperties = deserializeAws_json1_1DocumentClassificationJobProperties(output.DocumentClassificationJobProperties, context);
    }
    return contents;
};
var deserializeAws_json1_1DescribeDocumentClassifierResponse = function (output, context) {
    var contents = {
        __type: "DescribeDocumentClassifierResponse",
        DocumentClassifierProperties: undefined
    };
    if (output.DocumentClassifierProperties !== undefined &&
        output.DocumentClassifierProperties !== null) {
        contents.DocumentClassifierProperties = deserializeAws_json1_1DocumentClassifierProperties(output.DocumentClassifierProperties, context);
    }
    return contents;
};
var deserializeAws_json1_1DescribeDominantLanguageDetectionJobResponse = function (output, context) {
    var contents = {
        __type: "DescribeDominantLanguageDetectionJobResponse",
        DominantLanguageDetectionJobProperties: undefined
    };
    if (output.DominantLanguageDetectionJobProperties !== undefined &&
        output.DominantLanguageDetectionJobProperties !== null) {
        contents.DominantLanguageDetectionJobProperties = deserializeAws_json1_1DominantLanguageDetectionJobProperties(output.DominantLanguageDetectionJobProperties, context);
    }
    return contents;
};
var deserializeAws_json1_1DescribeEndpointResponse = function (output, context) {
    var contents = {
        __type: "DescribeEndpointResponse",
        EndpointProperties: undefined
    };
    if (output.EndpointProperties !== undefined &&
        output.EndpointProperties !== null) {
        contents.EndpointProperties = deserializeAws_json1_1EndpointProperties(output.EndpointProperties, context);
    }
    return contents;
};
var deserializeAws_json1_1DescribeEntitiesDetectionJobResponse = function (output, context) {
    var contents = {
        __type: "DescribeEntitiesDetectionJobResponse",
        EntitiesDetectionJobProperties: undefined
    };
    if (output.EntitiesDetectionJobProperties !== undefined &&
        output.EntitiesDetectionJobProperties !== null) {
        contents.EntitiesDetectionJobProperties = deserializeAws_json1_1EntitiesDetectionJobProperties(output.EntitiesDetectionJobProperties, context);
    }
    return contents;
};
var deserializeAws_json1_1DescribeEntityRecognizerResponse = function (output, context) {
    var contents = {
        __type: "DescribeEntityRecognizerResponse",
        EntityRecognizerProperties: undefined
    };
    if (output.EntityRecognizerProperties !== undefined &&
        output.EntityRecognizerProperties !== null) {
        contents.EntityRecognizerProperties = deserializeAws_json1_1EntityRecognizerProperties(output.EntityRecognizerProperties, context);
    }
    return contents;
};
var deserializeAws_json1_1DescribeKeyPhrasesDetectionJobResponse = function (output, context) {
    var contents = {
        __type: "DescribeKeyPhrasesDetectionJobResponse",
        KeyPhrasesDetectionJobProperties: undefined
    };
    if (output.KeyPhrasesDetectionJobProperties !== undefined &&
        output.KeyPhrasesDetectionJobProperties !== null) {
        contents.KeyPhrasesDetectionJobProperties = deserializeAws_json1_1KeyPhrasesDetectionJobProperties(output.KeyPhrasesDetectionJobProperties, context);
    }
    return contents;
};
var deserializeAws_json1_1DescribeSentimentDetectionJobResponse = function (output, context) {
    var contents = {
        __type: "DescribeSentimentDetectionJobResponse",
        SentimentDetectionJobProperties: undefined
    };
    if (output.SentimentDetectionJobProperties !== undefined &&
        output.SentimentDetectionJobProperties !== null) {
        contents.SentimentDetectionJobProperties = deserializeAws_json1_1SentimentDetectionJobProperties(output.SentimentDetectionJobProperties, context);
    }
    return contents;
};
var deserializeAws_json1_1DescribeTopicsDetectionJobResponse = function (output, context) {
    var contents = {
        __type: "DescribeTopicsDetectionJobResponse",
        TopicsDetectionJobProperties: undefined
    };
    if (output.TopicsDetectionJobProperties !== undefined &&
        output.TopicsDetectionJobProperties !== null) {
        contents.TopicsDetectionJobProperties = deserializeAws_json1_1TopicsDetectionJobProperties(output.TopicsDetectionJobProperties, context);
    }
    return contents;
};
var deserializeAws_json1_1DetectDominantLanguageResponse = function (output, context) {
    var contents = {
        __type: "DetectDominantLanguageResponse",
        Languages: undefined
    };
    if (output.Languages !== undefined && output.Languages !== null) {
        contents.Languages = deserializeAws_json1_1ListOfDominantLanguages(output.Languages, context);
    }
    return contents;
};
var deserializeAws_json1_1DetectEntitiesResponse = function (output, context) {
    var contents = {
        __type: "DetectEntitiesResponse",
        Entities: undefined
    };
    if (output.Entities !== undefined && output.Entities !== null) {
        contents.Entities = deserializeAws_json1_1ListOfEntities(output.Entities, context);
    }
    return contents;
};
var deserializeAws_json1_1DetectKeyPhrasesResponse = function (output, context) {
    var contents = {
        __type: "DetectKeyPhrasesResponse",
        KeyPhrases: undefined
    };
    if (output.KeyPhrases !== undefined && output.KeyPhrases !== null) {
        contents.KeyPhrases = deserializeAws_json1_1ListOfKeyPhrases(output.KeyPhrases, context);
    }
    return contents;
};
var deserializeAws_json1_1DetectSentimentResponse = function (output, context) {
    var contents = {
        __type: "DetectSentimentResponse",
        Sentiment: undefined,
        SentimentScore: undefined
    };
    if (output.Sentiment !== undefined && output.Sentiment !== null) {
        contents.Sentiment = output.Sentiment;
    }
    if (output.SentimentScore !== undefined && output.SentimentScore !== null) {
        contents.SentimentScore = deserializeAws_json1_1SentimentScore(output.SentimentScore, context);
    }
    return contents;
};
var deserializeAws_json1_1DetectSyntaxResponse = function (output, context) {
    var contents = {
        __type: "DetectSyntaxResponse",
        SyntaxTokens: undefined
    };
    if (output.SyntaxTokens !== undefined && output.SyntaxTokens !== null) {
        contents.SyntaxTokens = deserializeAws_json1_1ListOfSyntaxTokens(output.SyntaxTokens, context);
    }
    return contents;
};
var deserializeAws_json1_1DocumentClass = function (output, context) {
    var contents = {
        __type: "DocumentClass",
        Name: undefined,
        Score: undefined
    };
    if (output.Name !== undefined && output.Name !== null) {
        contents.Name = output.Name;
    }
    if (output.Score !== undefined && output.Score !== null) {
        contents.Score = output.Score;
    }
    return contents;
};
var deserializeAws_json1_1DocumentClassificationJobProperties = function (output, context) {
    var contents = {
        __type: "DocumentClassificationJobProperties",
        DataAccessRoleArn: undefined,
        DocumentClassifierArn: undefined,
        EndTime: undefined,
        InputDataConfig: undefined,
        JobId: undefined,
        JobName: undefined,
        JobStatus: undefined,
        Message: undefined,
        OutputDataConfig: undefined,
        SubmitTime: undefined,
        VolumeKmsKeyId: undefined,
        VpcConfig: undefined
    };
    if (output.DataAccessRoleArn !== undefined &&
        output.DataAccessRoleArn !== null) {
        contents.DataAccessRoleArn = output.DataAccessRoleArn;
    }
    if (output.DocumentClassifierArn !== undefined &&
        output.DocumentClassifierArn !== null) {
        contents.DocumentClassifierArn = output.DocumentClassifierArn;
    }
    if (output.EndTime !== undefined && output.EndTime !== null) {
        contents.EndTime = new Date(Math.round(output.EndTime * 1000));
    }
    if (output.InputDataConfig !== undefined && output.InputDataConfig !== null) {
        contents.InputDataConfig = deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context);
    }
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobName !== undefined && output.JobName !== null) {
        contents.JobName = output.JobName;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    if (output.OutputDataConfig !== undefined &&
        output.OutputDataConfig !== null) {
        contents.OutputDataConfig = deserializeAws_json1_1OutputDataConfig(output.OutputDataConfig, context);
    }
    if (output.SubmitTime !== undefined && output.SubmitTime !== null) {
        contents.SubmitTime = new Date(Math.round(output.SubmitTime * 1000));
    }
    if (output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null) {
        contents.VolumeKmsKeyId = output.VolumeKmsKeyId;
    }
    if (output.VpcConfig !== undefined && output.VpcConfig !== null) {
        contents.VpcConfig = deserializeAws_json1_1VpcConfig(output.VpcConfig, context);
    }
    return contents;
};
var deserializeAws_json1_1DocumentClassificationJobPropertiesList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1DocumentClassificationJobProperties(entry, context);
    });
};
var deserializeAws_json1_1DocumentClassifierInputDataConfig = function (output, context) {
    var contents = {
        __type: "DocumentClassifierInputDataConfig",
        LabelDelimiter: undefined,
        S3Uri: undefined
    };
    if (output.LabelDelimiter !== undefined && output.LabelDelimiter !== null) {
        contents.LabelDelimiter = output.LabelDelimiter;
    }
    if (output.S3Uri !== undefined && output.S3Uri !== null) {
        contents.S3Uri = output.S3Uri;
    }
    return contents;
};
var deserializeAws_json1_1DocumentClassifierOutputDataConfig = function (output, context) {
    var contents = {
        __type: "DocumentClassifierOutputDataConfig",
        KmsKeyId: undefined,
        S3Uri: undefined
    };
    if (output.KmsKeyId !== undefined && output.KmsKeyId !== null) {
        contents.KmsKeyId = output.KmsKeyId;
    }
    if (output.S3Uri !== undefined && output.S3Uri !== null) {
        contents.S3Uri = output.S3Uri;
    }
    return contents;
};
var deserializeAws_json1_1DocumentClassifierProperties = function (output, context) {
    var contents = {
        __type: "DocumentClassifierProperties",
        ClassifierMetadata: undefined,
        DataAccessRoleArn: undefined,
        DocumentClassifierArn: undefined,
        EndTime: undefined,
        InputDataConfig: undefined,
        LanguageCode: undefined,
        Message: undefined,
        Mode: undefined,
        OutputDataConfig: undefined,
        Status: undefined,
        SubmitTime: undefined,
        TrainingEndTime: undefined,
        TrainingStartTime: undefined,
        VolumeKmsKeyId: undefined,
        VpcConfig: undefined
    };
    if (output.ClassifierMetadata !== undefined &&
        output.ClassifierMetadata !== null) {
        contents.ClassifierMetadata = deserializeAws_json1_1ClassifierMetadata(output.ClassifierMetadata, context);
    }
    if (output.DataAccessRoleArn !== undefined &&
        output.DataAccessRoleArn !== null) {
        contents.DataAccessRoleArn = output.DataAccessRoleArn;
    }
    if (output.DocumentClassifierArn !== undefined &&
        output.DocumentClassifierArn !== null) {
        contents.DocumentClassifierArn = output.DocumentClassifierArn;
    }
    if (output.EndTime !== undefined && output.EndTime !== null) {
        contents.EndTime = new Date(Math.round(output.EndTime * 1000));
    }
    if (output.InputDataConfig !== undefined && output.InputDataConfig !== null) {
        contents.InputDataConfig = deserializeAws_json1_1DocumentClassifierInputDataConfig(output.InputDataConfig, context);
    }
    if (output.LanguageCode !== undefined && output.LanguageCode !== null) {
        contents.LanguageCode = output.LanguageCode;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    if (output.Mode !== undefined && output.Mode !== null) {
        contents.Mode = output.Mode;
    }
    if (output.OutputDataConfig !== undefined &&
        output.OutputDataConfig !== null) {
        contents.OutputDataConfig = deserializeAws_json1_1DocumentClassifierOutputDataConfig(output.OutputDataConfig, context);
    }
    if (output.Status !== undefined && output.Status !== null) {
        contents.Status = output.Status;
    }
    if (output.SubmitTime !== undefined && output.SubmitTime !== null) {
        contents.SubmitTime = new Date(Math.round(output.SubmitTime * 1000));
    }
    if (output.TrainingEndTime !== undefined && output.TrainingEndTime !== null) {
        contents.TrainingEndTime = new Date(Math.round(output.TrainingEndTime * 1000));
    }
    if (output.TrainingStartTime !== undefined &&
        output.TrainingStartTime !== null) {
        contents.TrainingStartTime = new Date(Math.round(output.TrainingStartTime * 1000));
    }
    if (output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null) {
        contents.VolumeKmsKeyId = output.VolumeKmsKeyId;
    }
    if (output.VpcConfig !== undefined && output.VpcConfig !== null) {
        contents.VpcConfig = deserializeAws_json1_1VpcConfig(output.VpcConfig, context);
    }
    return contents;
};
var deserializeAws_json1_1DocumentClassifierPropertiesList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1DocumentClassifierProperties(entry, context);
    });
};
var deserializeAws_json1_1DocumentLabel = function (output, context) {
    var contents = {
        __type: "DocumentLabel",
        Name: undefined,
        Score: undefined
    };
    if (output.Name !== undefined && output.Name !== null) {
        contents.Name = output.Name;
    }
    if (output.Score !== undefined && output.Score !== null) {
        contents.Score = output.Score;
    }
    return contents;
};
var deserializeAws_json1_1DominantLanguage = function (output, context) {
    var contents = {
        __type: "DominantLanguage",
        LanguageCode: undefined,
        Score: undefined
    };
    if (output.LanguageCode !== undefined && output.LanguageCode !== null) {
        contents.LanguageCode = output.LanguageCode;
    }
    if (output.Score !== undefined && output.Score !== null) {
        contents.Score = output.Score;
    }
    return contents;
};
var deserializeAws_json1_1DominantLanguageDetectionJobProperties = function (output, context) {
    var contents = {
        __type: "DominantLanguageDetectionJobProperties",
        DataAccessRoleArn: undefined,
        EndTime: undefined,
        InputDataConfig: undefined,
        JobId: undefined,
        JobName: undefined,
        JobStatus: undefined,
        Message: undefined,
        OutputDataConfig: undefined,
        SubmitTime: undefined,
        VolumeKmsKeyId: undefined,
        VpcConfig: undefined
    };
    if (output.DataAccessRoleArn !== undefined &&
        output.DataAccessRoleArn !== null) {
        contents.DataAccessRoleArn = output.DataAccessRoleArn;
    }
    if (output.EndTime !== undefined && output.EndTime !== null) {
        contents.EndTime = new Date(Math.round(output.EndTime * 1000));
    }
    if (output.InputDataConfig !== undefined && output.InputDataConfig !== null) {
        contents.InputDataConfig = deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context);
    }
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobName !== undefined && output.JobName !== null) {
        contents.JobName = output.JobName;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    if (output.OutputDataConfig !== undefined &&
        output.OutputDataConfig !== null) {
        contents.OutputDataConfig = deserializeAws_json1_1OutputDataConfig(output.OutputDataConfig, context);
    }
    if (output.SubmitTime !== undefined && output.SubmitTime !== null) {
        contents.SubmitTime = new Date(Math.round(output.SubmitTime * 1000));
    }
    if (output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null) {
        contents.VolumeKmsKeyId = output.VolumeKmsKeyId;
    }
    if (output.VpcConfig !== undefined && output.VpcConfig !== null) {
        contents.VpcConfig = deserializeAws_json1_1VpcConfig(output.VpcConfig, context);
    }
    return contents;
};
var deserializeAws_json1_1DominantLanguageDetectionJobPropertiesList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1DominantLanguageDetectionJobProperties(entry, context);
    });
};
var deserializeAws_json1_1EndpointProperties = function (output, context) {
    var contents = {
        __type: "EndpointProperties",
        CreationTime: undefined,
        CurrentInferenceUnits: undefined,
        DesiredInferenceUnits: undefined,
        EndpointArn: undefined,
        LastModifiedTime: undefined,
        Message: undefined,
        ModelArn: undefined,
        Status: undefined
    };
    if (output.CreationTime !== undefined && output.CreationTime !== null) {
        contents.CreationTime = new Date(Math.round(output.CreationTime * 1000));
    }
    if (output.CurrentInferenceUnits !== undefined &&
        output.CurrentInferenceUnits !== null) {
        contents.CurrentInferenceUnits = output.CurrentInferenceUnits;
    }
    if (output.DesiredInferenceUnits !== undefined &&
        output.DesiredInferenceUnits !== null) {
        contents.DesiredInferenceUnits = output.DesiredInferenceUnits;
    }
    if (output.EndpointArn !== undefined && output.EndpointArn !== null) {
        contents.EndpointArn = output.EndpointArn;
    }
    if (output.LastModifiedTime !== undefined &&
        output.LastModifiedTime !== null) {
        contents.LastModifiedTime = new Date(Math.round(output.LastModifiedTime * 1000));
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    if (output.ModelArn !== undefined && output.ModelArn !== null) {
        contents.ModelArn = output.ModelArn;
    }
    if (output.Status !== undefined && output.Status !== null) {
        contents.Status = output.Status;
    }
    return contents;
};
var deserializeAws_json1_1EndpointPropertiesList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1EndpointProperties(entry, context);
    });
};
var deserializeAws_json1_1EntitiesDetectionJobProperties = function (output, context) {
    var contents = {
        __type: "EntitiesDetectionJobProperties",
        DataAccessRoleArn: undefined,
        EndTime: undefined,
        EntityRecognizerArn: undefined,
        InputDataConfig: undefined,
        JobId: undefined,
        JobName: undefined,
        JobStatus: undefined,
        LanguageCode: undefined,
        Message: undefined,
        OutputDataConfig: undefined,
        SubmitTime: undefined,
        VolumeKmsKeyId: undefined,
        VpcConfig: undefined
    };
    if (output.DataAccessRoleArn !== undefined &&
        output.DataAccessRoleArn !== null) {
        contents.DataAccessRoleArn = output.DataAccessRoleArn;
    }
    if (output.EndTime !== undefined && output.EndTime !== null) {
        contents.EndTime = new Date(Math.round(output.EndTime * 1000));
    }
    if (output.EntityRecognizerArn !== undefined &&
        output.EntityRecognizerArn !== null) {
        contents.EntityRecognizerArn = output.EntityRecognizerArn;
    }
    if (output.InputDataConfig !== undefined && output.InputDataConfig !== null) {
        contents.InputDataConfig = deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context);
    }
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobName !== undefined && output.JobName !== null) {
        contents.JobName = output.JobName;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    if (output.LanguageCode !== undefined && output.LanguageCode !== null) {
        contents.LanguageCode = output.LanguageCode;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    if (output.OutputDataConfig !== undefined &&
        output.OutputDataConfig !== null) {
        contents.OutputDataConfig = deserializeAws_json1_1OutputDataConfig(output.OutputDataConfig, context);
    }
    if (output.SubmitTime !== undefined && output.SubmitTime !== null) {
        contents.SubmitTime = new Date(Math.round(output.SubmitTime * 1000));
    }
    if (output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null) {
        contents.VolumeKmsKeyId = output.VolumeKmsKeyId;
    }
    if (output.VpcConfig !== undefined && output.VpcConfig !== null) {
        contents.VpcConfig = deserializeAws_json1_1VpcConfig(output.VpcConfig, context);
    }
    return contents;
};
var deserializeAws_json1_1EntitiesDetectionJobPropertiesList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1EntitiesDetectionJobProperties(entry, context);
    });
};
var deserializeAws_json1_1Entity = function (output, context) {
    var contents = {
        __type: "Entity",
        BeginOffset: undefined,
        EndOffset: undefined,
        Score: undefined,
        Text: undefined,
        Type: undefined
    };
    if (output.BeginOffset !== undefined && output.BeginOffset !== null) {
        contents.BeginOffset = output.BeginOffset;
    }
    if (output.EndOffset !== undefined && output.EndOffset !== null) {
        contents.EndOffset = output.EndOffset;
    }
    if (output.Score !== undefined && output.Score !== null) {
        contents.Score = output.Score;
    }
    if (output.Text !== undefined && output.Text !== null) {
        contents.Text = output.Text;
    }
    if (output.Type !== undefined && output.Type !== null) {
        contents.Type = output.Type;
    }
    return contents;
};
var deserializeAws_json1_1EntityRecognizerAnnotations = function (output, context) {
    var contents = {
        __type: "EntityRecognizerAnnotations",
        S3Uri: undefined
    };
    if (output.S3Uri !== undefined && output.S3Uri !== null) {
        contents.S3Uri = output.S3Uri;
    }
    return contents;
};
var deserializeAws_json1_1EntityRecognizerDocuments = function (output, context) {
    var contents = {
        __type: "EntityRecognizerDocuments",
        S3Uri: undefined
    };
    if (output.S3Uri !== undefined && output.S3Uri !== null) {
        contents.S3Uri = output.S3Uri;
    }
    return contents;
};
var deserializeAws_json1_1EntityRecognizerEntityList = function (output, context) {
    var contents = {
        __type: "EntityRecognizerEntityList",
        S3Uri: undefined
    };
    if (output.S3Uri !== undefined && output.S3Uri !== null) {
        contents.S3Uri = output.S3Uri;
    }
    return contents;
};
var deserializeAws_json1_1EntityRecognizerEvaluationMetrics = function (output, context) {
    var contents = {
        __type: "EntityRecognizerEvaluationMetrics",
        F1Score: undefined,
        Precision: undefined,
        Recall: undefined
    };
    if (output.F1Score !== undefined && output.F1Score !== null) {
        contents.F1Score = output.F1Score;
    }
    if (output.Precision !== undefined && output.Precision !== null) {
        contents.Precision = output.Precision;
    }
    if (output.Recall !== undefined && output.Recall !== null) {
        contents.Recall = output.Recall;
    }
    return contents;
};
var deserializeAws_json1_1EntityRecognizerInputDataConfig = function (output, context) {
    var contents = {
        __type: "EntityRecognizerInputDataConfig",
        Annotations: undefined,
        Documents: undefined,
        EntityList: undefined,
        EntityTypes: undefined
    };
    if (output.Annotations !== undefined && output.Annotations !== null) {
        contents.Annotations = deserializeAws_json1_1EntityRecognizerAnnotations(output.Annotations, context);
    }
    if (output.Documents !== undefined && output.Documents !== null) {
        contents.Documents = deserializeAws_json1_1EntityRecognizerDocuments(output.Documents, context);
    }
    if (output.EntityList !== undefined && output.EntityList !== null) {
        contents.EntityList = deserializeAws_json1_1EntityRecognizerEntityList(output.EntityList, context);
    }
    if (output.EntityTypes !== undefined && output.EntityTypes !== null) {
        contents.EntityTypes = deserializeAws_json1_1EntityTypesList(output.EntityTypes, context);
    }
    return contents;
};
var deserializeAws_json1_1EntityRecognizerMetadata = function (output, context) {
    var contents = {
        __type: "EntityRecognizerMetadata",
        EntityTypes: undefined,
        EvaluationMetrics: undefined,
        NumberOfTestDocuments: undefined,
        NumberOfTrainedDocuments: undefined
    };
    if (output.EntityTypes !== undefined && output.EntityTypes !== null) {
        contents.EntityTypes = deserializeAws_json1_1EntityRecognizerMetadataEntityTypesList(output.EntityTypes, context);
    }
    if (output.EvaluationMetrics !== undefined &&
        output.EvaluationMetrics !== null) {
        contents.EvaluationMetrics = deserializeAws_json1_1EntityRecognizerEvaluationMetrics(output.EvaluationMetrics, context);
    }
    if (output.NumberOfTestDocuments !== undefined &&
        output.NumberOfTestDocuments !== null) {
        contents.NumberOfTestDocuments = output.NumberOfTestDocuments;
    }
    if (output.NumberOfTrainedDocuments !== undefined &&
        output.NumberOfTrainedDocuments !== null) {
        contents.NumberOfTrainedDocuments = output.NumberOfTrainedDocuments;
    }
    return contents;
};
var deserializeAws_json1_1EntityRecognizerMetadataEntityTypesList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1EntityRecognizerMetadataEntityTypesListItem(entry, context);
    });
};
var deserializeAws_json1_1EntityRecognizerMetadataEntityTypesListItem = function (output, context) {
    var contents = {
        __type: "EntityRecognizerMetadataEntityTypesListItem",
        EvaluationMetrics: undefined,
        NumberOfTrainMentions: undefined,
        Type: undefined
    };
    if (output.EvaluationMetrics !== undefined &&
        output.EvaluationMetrics !== null) {
        contents.EvaluationMetrics = deserializeAws_json1_1EntityTypesEvaluationMetrics(output.EvaluationMetrics, context);
    }
    if (output.NumberOfTrainMentions !== undefined &&
        output.NumberOfTrainMentions !== null) {
        contents.NumberOfTrainMentions = output.NumberOfTrainMentions;
    }
    if (output.Type !== undefined && output.Type !== null) {
        contents.Type = output.Type;
    }
    return contents;
};
var deserializeAws_json1_1EntityRecognizerProperties = function (output, context) {
    var contents = {
        __type: "EntityRecognizerProperties",
        DataAccessRoleArn: undefined,
        EndTime: undefined,
        EntityRecognizerArn: undefined,
        InputDataConfig: undefined,
        LanguageCode: undefined,
        Message: undefined,
        RecognizerMetadata: undefined,
        Status: undefined,
        SubmitTime: undefined,
        TrainingEndTime: undefined,
        TrainingStartTime: undefined,
        VolumeKmsKeyId: undefined,
        VpcConfig: undefined
    };
    if (output.DataAccessRoleArn !== undefined &&
        output.DataAccessRoleArn !== null) {
        contents.DataAccessRoleArn = output.DataAccessRoleArn;
    }
    if (output.EndTime !== undefined && output.EndTime !== null) {
        contents.EndTime = new Date(Math.round(output.EndTime * 1000));
    }
    if (output.EntityRecognizerArn !== undefined &&
        output.EntityRecognizerArn !== null) {
        contents.EntityRecognizerArn = output.EntityRecognizerArn;
    }
    if (output.InputDataConfig !== undefined && output.InputDataConfig !== null) {
        contents.InputDataConfig = deserializeAws_json1_1EntityRecognizerInputDataConfig(output.InputDataConfig, context);
    }
    if (output.LanguageCode !== undefined && output.LanguageCode !== null) {
        contents.LanguageCode = output.LanguageCode;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    if (output.RecognizerMetadata !== undefined &&
        output.RecognizerMetadata !== null) {
        contents.RecognizerMetadata = deserializeAws_json1_1EntityRecognizerMetadata(output.RecognizerMetadata, context);
    }
    if (output.Status !== undefined && output.Status !== null) {
        contents.Status = output.Status;
    }
    if (output.SubmitTime !== undefined && output.SubmitTime !== null) {
        contents.SubmitTime = new Date(Math.round(output.SubmitTime * 1000));
    }
    if (output.TrainingEndTime !== undefined && output.TrainingEndTime !== null) {
        contents.TrainingEndTime = new Date(Math.round(output.TrainingEndTime * 1000));
    }
    if (output.TrainingStartTime !== undefined &&
        output.TrainingStartTime !== null) {
        contents.TrainingStartTime = new Date(Math.round(output.TrainingStartTime * 1000));
    }
    if (output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null) {
        contents.VolumeKmsKeyId = output.VolumeKmsKeyId;
    }
    if (output.VpcConfig !== undefined && output.VpcConfig !== null) {
        contents.VpcConfig = deserializeAws_json1_1VpcConfig(output.VpcConfig, context);
    }
    return contents;
};
var deserializeAws_json1_1EntityRecognizerPropertiesList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1EntityRecognizerProperties(entry, context);
    });
};
var deserializeAws_json1_1EntityTypesEvaluationMetrics = function (output, context) {
    var contents = {
        __type: "EntityTypesEvaluationMetrics",
        F1Score: undefined,
        Precision: undefined,
        Recall: undefined
    };
    if (output.F1Score !== undefined && output.F1Score !== null) {
        contents.F1Score = output.F1Score;
    }
    if (output.Precision !== undefined && output.Precision !== null) {
        contents.Precision = output.Precision;
    }
    if (output.Recall !== undefined && output.Recall !== null) {
        contents.Recall = output.Recall;
    }
    return contents;
};
var deserializeAws_json1_1EntityTypesList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1EntityTypesListItem(entry, context);
    });
};
var deserializeAws_json1_1EntityTypesListItem = function (output, context) {
    var contents = {
        __type: "EntityTypesListItem",
        Type: undefined
    };
    if (output.Type !== undefined && output.Type !== null) {
        contents.Type = output.Type;
    }
    return contents;
};
var deserializeAws_json1_1InputDataConfig = function (output, context) {
    var contents = {
        __type: "InputDataConfig",
        InputFormat: undefined,
        S3Uri: undefined
    };
    if (output.InputFormat !== undefined && output.InputFormat !== null) {
        contents.InputFormat = output.InputFormat;
    }
    if (output.S3Uri !== undefined && output.S3Uri !== null) {
        contents.S3Uri = output.S3Uri;
    }
    return contents;
};
var deserializeAws_json1_1InternalServerException = function (output, context) {
    var contents = {
        __type: "InternalServerException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1InvalidFilterException = function (output, context) {
    var contents = {
        __type: "InvalidFilterException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1InvalidRequestException = function (output, context) {
    var contents = {
        __type: "InvalidRequestException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1JobNotFoundException = function (output, context) {
    var contents = {
        __type: "JobNotFoundException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1KeyPhrase = function (output, context) {
    var contents = {
        __type: "KeyPhrase",
        BeginOffset: undefined,
        EndOffset: undefined,
        Score: undefined,
        Text: undefined
    };
    if (output.BeginOffset !== undefined && output.BeginOffset !== null) {
        contents.BeginOffset = output.BeginOffset;
    }
    if (output.EndOffset !== undefined && output.EndOffset !== null) {
        contents.EndOffset = output.EndOffset;
    }
    if (output.Score !== undefined && output.Score !== null) {
        contents.Score = output.Score;
    }
    if (output.Text !== undefined && output.Text !== null) {
        contents.Text = output.Text;
    }
    return contents;
};
var deserializeAws_json1_1KeyPhrasesDetectionJobProperties = function (output, context) {
    var contents = {
        __type: "KeyPhrasesDetectionJobProperties",
        DataAccessRoleArn: undefined,
        EndTime: undefined,
        InputDataConfig: undefined,
        JobId: undefined,
        JobName: undefined,
        JobStatus: undefined,
        LanguageCode: undefined,
        Message: undefined,
        OutputDataConfig: undefined,
        SubmitTime: undefined,
        VolumeKmsKeyId: undefined,
        VpcConfig: undefined
    };
    if (output.DataAccessRoleArn !== undefined &&
        output.DataAccessRoleArn !== null) {
        contents.DataAccessRoleArn = output.DataAccessRoleArn;
    }
    if (output.EndTime !== undefined && output.EndTime !== null) {
        contents.EndTime = new Date(Math.round(output.EndTime * 1000));
    }
    if (output.InputDataConfig !== undefined && output.InputDataConfig !== null) {
        contents.InputDataConfig = deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context);
    }
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobName !== undefined && output.JobName !== null) {
        contents.JobName = output.JobName;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    if (output.LanguageCode !== undefined && output.LanguageCode !== null) {
        contents.LanguageCode = output.LanguageCode;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    if (output.OutputDataConfig !== undefined &&
        output.OutputDataConfig !== null) {
        contents.OutputDataConfig = deserializeAws_json1_1OutputDataConfig(output.OutputDataConfig, context);
    }
    if (output.SubmitTime !== undefined && output.SubmitTime !== null) {
        contents.SubmitTime = new Date(Math.round(output.SubmitTime * 1000));
    }
    if (output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null) {
        contents.VolumeKmsKeyId = output.VolumeKmsKeyId;
    }
    if (output.VpcConfig !== undefined && output.VpcConfig !== null) {
        contents.VpcConfig = deserializeAws_json1_1VpcConfig(output.VpcConfig, context);
    }
    return contents;
};
var deserializeAws_json1_1KeyPhrasesDetectionJobPropertiesList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1KeyPhrasesDetectionJobProperties(entry, context);
    });
};
var deserializeAws_json1_1KmsKeyValidationException = function (output, context) {
    var contents = {
        __type: "KmsKeyValidationException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1ListDocumentClassificationJobsResponse = function (output, context) {
    var contents = {
        __type: "ListDocumentClassificationJobsResponse",
        DocumentClassificationJobPropertiesList: undefined,
        NextToken: undefined
    };
    if (output.DocumentClassificationJobPropertiesList !== undefined &&
        output.DocumentClassificationJobPropertiesList !== null) {
        contents.DocumentClassificationJobPropertiesList = deserializeAws_json1_1DocumentClassificationJobPropertiesList(output.DocumentClassificationJobPropertiesList, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    return contents;
};
var deserializeAws_json1_1ListDocumentClassifiersResponse = function (output, context) {
    var contents = {
        __type: "ListDocumentClassifiersResponse",
        DocumentClassifierPropertiesList: undefined,
        NextToken: undefined
    };
    if (output.DocumentClassifierPropertiesList !== undefined &&
        output.DocumentClassifierPropertiesList !== null) {
        contents.DocumentClassifierPropertiesList = deserializeAws_json1_1DocumentClassifierPropertiesList(output.DocumentClassifierPropertiesList, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    return contents;
};
var deserializeAws_json1_1ListDominantLanguageDetectionJobsResponse = function (output, context) {
    var contents = {
        __type: "ListDominantLanguageDetectionJobsResponse",
        DominantLanguageDetectionJobPropertiesList: undefined,
        NextToken: undefined
    };
    if (output.DominantLanguageDetectionJobPropertiesList !== undefined &&
        output.DominantLanguageDetectionJobPropertiesList !== null) {
        contents.DominantLanguageDetectionJobPropertiesList = deserializeAws_json1_1DominantLanguageDetectionJobPropertiesList(output.DominantLanguageDetectionJobPropertiesList, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    return contents;
};
var deserializeAws_json1_1ListEndpointsResponse = function (output, context) {
    var contents = {
        __type: "ListEndpointsResponse",
        EndpointPropertiesList: undefined,
        NextToken: undefined
    };
    if (output.EndpointPropertiesList !== undefined &&
        output.EndpointPropertiesList !== null) {
        contents.EndpointPropertiesList = deserializeAws_json1_1EndpointPropertiesList(output.EndpointPropertiesList, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    return contents;
};
var deserializeAws_json1_1ListEntitiesDetectionJobsResponse = function (output, context) {
    var contents = {
        __type: "ListEntitiesDetectionJobsResponse",
        EntitiesDetectionJobPropertiesList: undefined,
        NextToken: undefined
    };
    if (output.EntitiesDetectionJobPropertiesList !== undefined &&
        output.EntitiesDetectionJobPropertiesList !== null) {
        contents.EntitiesDetectionJobPropertiesList = deserializeAws_json1_1EntitiesDetectionJobPropertiesList(output.EntitiesDetectionJobPropertiesList, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    return contents;
};
var deserializeAws_json1_1ListEntityRecognizersResponse = function (output, context) {
    var contents = {
        __type: "ListEntityRecognizersResponse",
        EntityRecognizerPropertiesList: undefined,
        NextToken: undefined
    };
    if (output.EntityRecognizerPropertiesList !== undefined &&
        output.EntityRecognizerPropertiesList !== null) {
        contents.EntityRecognizerPropertiesList = deserializeAws_json1_1EntityRecognizerPropertiesList(output.EntityRecognizerPropertiesList, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    return contents;
};
var deserializeAws_json1_1ListKeyPhrasesDetectionJobsResponse = function (output, context) {
    var contents = {
        __type: "ListKeyPhrasesDetectionJobsResponse",
        KeyPhrasesDetectionJobPropertiesList: undefined,
        NextToken: undefined
    };
    if (output.KeyPhrasesDetectionJobPropertiesList !== undefined &&
        output.KeyPhrasesDetectionJobPropertiesList !== null) {
        contents.KeyPhrasesDetectionJobPropertiesList = deserializeAws_json1_1KeyPhrasesDetectionJobPropertiesList(output.KeyPhrasesDetectionJobPropertiesList, context);
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    return contents;
};
var deserializeAws_json1_1ListOfClasses = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1DocumentClass(entry, context);
    });
};
var deserializeAws_json1_1ListOfDetectDominantLanguageResult = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1BatchDetectDominantLanguageItemResult(entry, context);
    });
};
var deserializeAws_json1_1ListOfDetectEntitiesResult = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1BatchDetectEntitiesItemResult(entry, context);
    });
};
var deserializeAws_json1_1ListOfDetectKeyPhrasesResult = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1BatchDetectKeyPhrasesItemResult(entry, context);
    });
};
var deserializeAws_json1_1ListOfDetectSentimentResult = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1BatchDetectSentimentItemResult(entry, context);
    });
};
var deserializeAws_json1_1ListOfDetectSyntaxResult = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1BatchDetectSyntaxItemResult(entry, context);
    });
};
var deserializeAws_json1_1ListOfDominantLanguages = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1DominantLanguage(entry, context);
    });
};
var deserializeAws_json1_1ListOfEntities = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1Entity(entry, context);
    });
};
var deserializeAws_json1_1ListOfKeyPhrases = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1KeyPhrase(entry, context);
    });
};
var deserializeAws_json1_1ListOfLabels = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1DocumentLabel(entry, context);
    });
};
var deserializeAws_json1_1ListOfSyntaxTokens = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1SyntaxToken(entry, context);
    });
};
var deserializeAws_json1_1ListSentimentDetectionJobsResponse = function (output, context) {
    var contents = {
        __type: "ListSentimentDetectionJobsResponse",
        NextToken: undefined,
        SentimentDetectionJobPropertiesList: undefined
    };
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    if (output.SentimentDetectionJobPropertiesList !== undefined &&
        output.SentimentDetectionJobPropertiesList !== null) {
        contents.SentimentDetectionJobPropertiesList = deserializeAws_json1_1SentimentDetectionJobPropertiesList(output.SentimentDetectionJobPropertiesList, context);
    }
    return contents;
};
var deserializeAws_json1_1ListTagsForResourceResponse = function (output, context) {
    var contents = {
        __type: "ListTagsForResourceResponse",
        ResourceArn: undefined,
        Tags: undefined
    };
    if (output.ResourceArn !== undefined && output.ResourceArn !== null) {
        contents.ResourceArn = output.ResourceArn;
    }
    if (output.Tags !== undefined && output.Tags !== null) {
        contents.Tags = deserializeAws_json1_1TagList(output.Tags, context);
    }
    return contents;
};
var deserializeAws_json1_1ListTopicsDetectionJobsResponse = function (output, context) {
    var contents = {
        __type: "ListTopicsDetectionJobsResponse",
        NextToken: undefined,
        TopicsDetectionJobPropertiesList: undefined
    };
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    if (output.TopicsDetectionJobPropertiesList !== undefined &&
        output.TopicsDetectionJobPropertiesList !== null) {
        contents.TopicsDetectionJobPropertiesList = deserializeAws_json1_1TopicsDetectionJobPropertiesList(output.TopicsDetectionJobPropertiesList, context);
    }
    return contents;
};
var deserializeAws_json1_1OutputDataConfig = function (output, context) {
    var contents = {
        __type: "OutputDataConfig",
        KmsKeyId: undefined,
        S3Uri: undefined
    };
    if (output.KmsKeyId !== undefined && output.KmsKeyId !== null) {
        contents.KmsKeyId = output.KmsKeyId;
    }
    if (output.S3Uri !== undefined && output.S3Uri !== null) {
        contents.S3Uri = output.S3Uri;
    }
    return contents;
};
var deserializeAws_json1_1PartOfSpeechTag = function (output, context) {
    var contents = {
        __type: "PartOfSpeechTag",
        Score: undefined,
        Tag: undefined
    };
    if (output.Score !== undefined && output.Score !== null) {
        contents.Score = output.Score;
    }
    if (output.Tag !== undefined && output.Tag !== null) {
        contents.Tag = output.Tag;
    }
    return contents;
};
var deserializeAws_json1_1ResourceInUseException = function (output, context) {
    var contents = {
        __type: "ResourceInUseException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1ResourceLimitExceededException = function (output, context) {
    var contents = {
        __type: "ResourceLimitExceededException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1ResourceNotFoundException = function (output, context) {
    var contents = {
        __type: "ResourceNotFoundException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1ResourceUnavailableException = function (output, context) {
    var contents = {
        __type: "ResourceUnavailableException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1SecurityGroupIds = function (output, context) {
    return (output || []).map(function (entry) { return entry; });
};
var deserializeAws_json1_1SentimentDetectionJobProperties = function (output, context) {
    var contents = {
        __type: "SentimentDetectionJobProperties",
        DataAccessRoleArn: undefined,
        EndTime: undefined,
        InputDataConfig: undefined,
        JobId: undefined,
        JobName: undefined,
        JobStatus: undefined,
        LanguageCode: undefined,
        Message: undefined,
        OutputDataConfig: undefined,
        SubmitTime: undefined,
        VolumeKmsKeyId: undefined,
        VpcConfig: undefined
    };
    if (output.DataAccessRoleArn !== undefined &&
        output.DataAccessRoleArn !== null) {
        contents.DataAccessRoleArn = output.DataAccessRoleArn;
    }
    if (output.EndTime !== undefined && output.EndTime !== null) {
        contents.EndTime = new Date(Math.round(output.EndTime * 1000));
    }
    if (output.InputDataConfig !== undefined && output.InputDataConfig !== null) {
        contents.InputDataConfig = deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context);
    }
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobName !== undefined && output.JobName !== null) {
        contents.JobName = output.JobName;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    if (output.LanguageCode !== undefined && output.LanguageCode !== null) {
        contents.LanguageCode = output.LanguageCode;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    if (output.OutputDataConfig !== undefined &&
        output.OutputDataConfig !== null) {
        contents.OutputDataConfig = deserializeAws_json1_1OutputDataConfig(output.OutputDataConfig, context);
    }
    if (output.SubmitTime !== undefined && output.SubmitTime !== null) {
        contents.SubmitTime = new Date(Math.round(output.SubmitTime * 1000));
    }
    if (output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null) {
        contents.VolumeKmsKeyId = output.VolumeKmsKeyId;
    }
    if (output.VpcConfig !== undefined && output.VpcConfig !== null) {
        contents.VpcConfig = deserializeAws_json1_1VpcConfig(output.VpcConfig, context);
    }
    return contents;
};
var deserializeAws_json1_1SentimentDetectionJobPropertiesList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1SentimentDetectionJobProperties(entry, context);
    });
};
var deserializeAws_json1_1SentimentScore = function (output, context) {
    var contents = {
        __type: "SentimentScore",
        Mixed: undefined,
        Negative: undefined,
        Neutral: undefined,
        Positive: undefined
    };
    if (output.Mixed !== undefined && output.Mixed !== null) {
        contents.Mixed = output.Mixed;
    }
    if (output.Negative !== undefined && output.Negative !== null) {
        contents.Negative = output.Negative;
    }
    if (output.Neutral !== undefined && output.Neutral !== null) {
        contents.Neutral = output.Neutral;
    }
    if (output.Positive !== undefined && output.Positive !== null) {
        contents.Positive = output.Positive;
    }
    return contents;
};
var deserializeAws_json1_1StartDocumentClassificationJobResponse = function (output, context) {
    var contents = {
        __type: "StartDocumentClassificationJobResponse",
        JobId: undefined,
        JobStatus: undefined
    };
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    return contents;
};
var deserializeAws_json1_1StartDominantLanguageDetectionJobResponse = function (output, context) {
    var contents = {
        __type: "StartDominantLanguageDetectionJobResponse",
        JobId: undefined,
        JobStatus: undefined
    };
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    return contents;
};
var deserializeAws_json1_1StartEntitiesDetectionJobResponse = function (output, context) {
    var contents = {
        __type: "StartEntitiesDetectionJobResponse",
        JobId: undefined,
        JobStatus: undefined
    };
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    return contents;
};
var deserializeAws_json1_1StartKeyPhrasesDetectionJobResponse = function (output, context) {
    var contents = {
        __type: "StartKeyPhrasesDetectionJobResponse",
        JobId: undefined,
        JobStatus: undefined
    };
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    return contents;
};
var deserializeAws_json1_1StartSentimentDetectionJobResponse = function (output, context) {
    var contents = {
        __type: "StartSentimentDetectionJobResponse",
        JobId: undefined,
        JobStatus: undefined
    };
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    return contents;
};
var deserializeAws_json1_1StartTopicsDetectionJobResponse = function (output, context) {
    var contents = {
        __type: "StartTopicsDetectionJobResponse",
        JobId: undefined,
        JobStatus: undefined
    };
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    return contents;
};
var deserializeAws_json1_1StopDominantLanguageDetectionJobResponse = function (output, context) {
    var contents = {
        __type: "StopDominantLanguageDetectionJobResponse",
        JobId: undefined,
        JobStatus: undefined
    };
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    return contents;
};
var deserializeAws_json1_1StopEntitiesDetectionJobResponse = function (output, context) {
    var contents = {
        __type: "StopEntitiesDetectionJobResponse",
        JobId: undefined,
        JobStatus: undefined
    };
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    return contents;
};
var deserializeAws_json1_1StopKeyPhrasesDetectionJobResponse = function (output, context) {
    var contents = {
        __type: "StopKeyPhrasesDetectionJobResponse",
        JobId: undefined,
        JobStatus: undefined
    };
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    return contents;
};
var deserializeAws_json1_1StopSentimentDetectionJobResponse = function (output, context) {
    var contents = {
        __type: "StopSentimentDetectionJobResponse",
        JobId: undefined,
        JobStatus: undefined
    };
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    return contents;
};
var deserializeAws_json1_1StopTrainingDocumentClassifierResponse = function (output, context) {
    var contents = {
        __type: "StopTrainingDocumentClassifierResponse"
    };
    return contents;
};
var deserializeAws_json1_1StopTrainingEntityRecognizerResponse = function (output, context) {
    var contents = {
        __type: "StopTrainingEntityRecognizerResponse"
    };
    return contents;
};
var deserializeAws_json1_1Subnets = function (output, context) {
    return (output || []).map(function (entry) { return entry; });
};
var deserializeAws_json1_1SyntaxToken = function (output, context) {
    var contents = {
        __type: "SyntaxToken",
        BeginOffset: undefined,
        EndOffset: undefined,
        PartOfSpeech: undefined,
        Text: undefined,
        TokenId: undefined
    };
    if (output.BeginOffset !== undefined && output.BeginOffset !== null) {
        contents.BeginOffset = output.BeginOffset;
    }
    if (output.EndOffset !== undefined && output.EndOffset !== null) {
        contents.EndOffset = output.EndOffset;
    }
    if (output.PartOfSpeech !== undefined && output.PartOfSpeech !== null) {
        contents.PartOfSpeech = deserializeAws_json1_1PartOfSpeechTag(output.PartOfSpeech, context);
    }
    if (output.Text !== undefined && output.Text !== null) {
        contents.Text = output.Text;
    }
    if (output.TokenId !== undefined && output.TokenId !== null) {
        contents.TokenId = output.TokenId;
    }
    return contents;
};
var deserializeAws_json1_1Tag = function (output, context) {
    var contents = {
        __type: "Tag",
        Key: undefined,
        Value: undefined
    };
    if (output.Key !== undefined && output.Key !== null) {
        contents.Key = output.Key;
    }
    if (output.Value !== undefined && output.Value !== null) {
        contents.Value = output.Value;
    }
    return contents;
};
var deserializeAws_json1_1TagList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1Tag(entry, context);
    });
};
var deserializeAws_json1_1TagResourceResponse = function (output, context) {
    var contents = {
        __type: "TagResourceResponse"
    };
    return contents;
};
var deserializeAws_json1_1TextSizeLimitExceededException = function (output, context) {
    var contents = {
        __type: "TextSizeLimitExceededException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1TooManyRequestsException = function (output, context) {
    var contents = {
        __type: "TooManyRequestsException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1TooManyTagKeysException = function (output, context) {
    var contents = {
        __type: "TooManyTagKeysException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1TooManyTagsException = function (output, context) {
    var contents = {
        __type: "TooManyTagsException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1TopicsDetectionJobProperties = function (output, context) {
    var contents = {
        __type: "TopicsDetectionJobProperties",
        DataAccessRoleArn: undefined,
        EndTime: undefined,
        InputDataConfig: undefined,
        JobId: undefined,
        JobName: undefined,
        JobStatus: undefined,
        Message: undefined,
        NumberOfTopics: undefined,
        OutputDataConfig: undefined,
        SubmitTime: undefined,
        VolumeKmsKeyId: undefined,
        VpcConfig: undefined
    };
    if (output.DataAccessRoleArn !== undefined &&
        output.DataAccessRoleArn !== null) {
        contents.DataAccessRoleArn = output.DataAccessRoleArn;
    }
    if (output.EndTime !== undefined && output.EndTime !== null) {
        contents.EndTime = new Date(Math.round(output.EndTime * 1000));
    }
    if (output.InputDataConfig !== undefined && output.InputDataConfig !== null) {
        contents.InputDataConfig = deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context);
    }
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    if (output.JobName !== undefined && output.JobName !== null) {
        contents.JobName = output.JobName;
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    if (output.NumberOfTopics !== undefined && output.NumberOfTopics !== null) {
        contents.NumberOfTopics = output.NumberOfTopics;
    }
    if (output.OutputDataConfig !== undefined &&
        output.OutputDataConfig !== null) {
        contents.OutputDataConfig = deserializeAws_json1_1OutputDataConfig(output.OutputDataConfig, context);
    }
    if (output.SubmitTime !== undefined && output.SubmitTime !== null) {
        contents.SubmitTime = new Date(Math.round(output.SubmitTime * 1000));
    }
    if (output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null) {
        contents.VolumeKmsKeyId = output.VolumeKmsKeyId;
    }
    if (output.VpcConfig !== undefined && output.VpcConfig !== null) {
        contents.VpcConfig = deserializeAws_json1_1VpcConfig(output.VpcConfig, context);
    }
    return contents;
};
var deserializeAws_json1_1TopicsDetectionJobPropertiesList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1TopicsDetectionJobProperties(entry, context);
    });
};
var deserializeAws_json1_1UnsupportedLanguageException = function (output, context) {
    var contents = {
        __type: "UnsupportedLanguageException",
        Message: undefined
    };
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1UntagResourceResponse = function (output, context) {
    var contents = {
        __type: "UntagResourceResponse"
    };
    return contents;
};
var deserializeAws_json1_1UpdateEndpointResponse = function (output, context) {
    var contents = {
        __type: "UpdateEndpointResponse"
    };
    return contents;
};
var deserializeAws_json1_1VpcConfig = function (output, context) {
    var contents = {
        __type: "VpcConfig",
        SecurityGroupIds: undefined,
        Subnets: undefined
    };
    if (output.SecurityGroupIds !== undefined &&
        output.SecurityGroupIds !== null) {
        contents.SecurityGroupIds = deserializeAws_json1_1SecurityGroupIds(output.SecurityGroupIds, context);
    }
    if (output.Subnets !== undefined && output.Subnets !== null) {
        contents.Subnets = deserializeAws_json1_1Subnets(output.Subnets, context);
    }
    return contents;
};
var deserializeMetadata = function (output) { return ({
    httpStatusCode: output.statusCode,
    httpHeaders: output.headers,
    requestId: output.headers["x-amzn-requestid"]
}); };
// Collect low-level response body stream to Uint8Array.
var collectBody = function (streamBody, context) {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return (context.streamCollector(streamBody) || Promise.resolve(new Uint8Array()));
};
// Encode Uint8Array data into string with utf-8.
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) {
        return context.utf8Encoder(body);
    });
};
var buildHttpRpcRequest = function (context, headers, path, resolvedHostname, body) {
    var contents = __assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", path: path, headers: headers });
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
};
//# sourceMappingURL=Aws_json1_1.js.map