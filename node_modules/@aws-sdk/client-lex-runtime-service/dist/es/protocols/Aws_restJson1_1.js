import { __assign, __awaiter, __generator, __values } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { LazyJsonString as __LazyJsonString, extendedEncodeURIComponent as __extendedEncodeURIComponent } from "@aws-sdk/smithy-client";
export function serializeAws_restJson1_1DeleteSessionCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/session";
            if (input.botAlias !== undefined) {
                labelValue = input.botAlias;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: botAlias.");
                }
                resolvedPath = resolvedPath.replace("{botAlias}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: botAlias.");
            }
            if (input.botName !== undefined) {
                labelValue = input.botName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: botName.");
                }
                resolvedPath = resolvedPath.replace("{botName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: botName.");
            }
            if (input.userId !== undefined) {
                labelValue = input.userId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: userId.");
                }
                resolvedPath = resolvedPath.replace("{userId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: userId.");
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1GetSessionCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, labelValue, query, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "";
            resolvedPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/session";
            if (input.botAlias !== undefined) {
                labelValue = input.botAlias;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: botAlias.");
                }
                resolvedPath = resolvedPath.replace("{botAlias}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: botAlias.");
            }
            if (input.botName !== undefined) {
                labelValue = input.botName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: botName.");
                }
                resolvedPath = resolvedPath.replace("{botName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: botName.");
            }
            if (input.userId !== undefined) {
                labelValue = input.userId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: userId.");
                }
                resolvedPath = resolvedPath.replace("{userId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: userId.");
            }
            query = {};
            if (input.checkpointLabelFilter !== undefined) {
                query["checkpointLabelFilter"] = input.checkpointLabelFilter;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1PostContentCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, labelValue, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/octet-stream";
            headers["x-amz-content-sha256"] = "UNSIGNED_PAYLOAD";
            if (input.accept !== undefined) {
                headers["Accept"] = input.accept;
            }
            if (input.contentType !== undefined) {
                headers["Content-Type"] = input.contentType;
            }
            if (input.requestAttributes !== undefined) {
                headers["x-amz-lex-request-attributes"] = __LazyJsonString.fromObject(input.requestAttributes);
            }
            if (input.sessionAttributes !== undefined) {
                headers["x-amz-lex-session-attributes"] = __LazyJsonString.fromObject(input.sessionAttributes);
            }
            resolvedPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/content";
            if (input.botAlias !== undefined) {
                labelValue = input.botAlias;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: botAlias.");
                }
                resolvedPath = resolvedPath.replace("{botAlias}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: botAlias.");
            }
            if (input.botName !== undefined) {
                labelValue = input.botName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: botName.");
                }
                resolvedPath = resolvedPath.replace("{botName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: botName.");
            }
            if (input.userId !== undefined) {
                labelValue = input.userId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: userId.");
                }
                resolvedPath = resolvedPath.replace("{userId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: userId.");
            }
            if (input.inputStream !== undefined) {
                body = input.inputStream;
            }
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1PostTextCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, labelValue, body, bodyParams;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/text";
            if (input.botAlias !== undefined) {
                labelValue = input.botAlias;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: botAlias.");
                }
                resolvedPath = resolvedPath.replace("{botAlias}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: botAlias.");
            }
            if (input.botName !== undefined) {
                labelValue = input.botName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: botName.");
                }
                resolvedPath = resolvedPath.replace("{botName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: botName.");
            }
            if (input.userId !== undefined) {
                labelValue = input.userId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: userId.");
                }
                resolvedPath = resolvedPath.replace("{userId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: userId.");
            }
            bodyParams = {};
            if (input.inputText !== undefined) {
                bodyParams["inputText"] = input.inputText;
            }
            if (input.requestAttributes !== undefined) {
                bodyParams["requestAttributes"] = serializeAws_restJson1_1StringMap(input.requestAttributes, context);
            }
            if (input.sessionAttributes !== undefined) {
                bodyParams["sessionAttributes"] = serializeAws_restJson1_1StringMap(input.sessionAttributes, context);
            }
            body = JSON.stringify(bodyParams);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function serializeAws_restJson1_1PutSessionCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, labelValue, labelValue, labelValue, body, bodyParams;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            if (input.accept !== undefined) {
                headers["Accept"] = input.accept;
            }
            resolvedPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/session";
            if (input.botAlias !== undefined) {
                labelValue = input.botAlias;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: botAlias.");
                }
                resolvedPath = resolvedPath.replace("{botAlias}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: botAlias.");
            }
            if (input.botName !== undefined) {
                labelValue = input.botName;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: botName.");
                }
                resolvedPath = resolvedPath.replace("{botName}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: botName.");
            }
            if (input.userId !== undefined) {
                labelValue = input.userId;
                if (labelValue.length <= 0) {
                    throw new Error("Empty value provided for input HTTP label: userId.");
                }
                resolvedPath = resolvedPath.replace("{userId}", __extendedEncodeURIComponent(labelValue));
            }
            else {
                throw new Error("No value provided for input HTTP label: userId.");
            }
            bodyParams = {};
            if (input.dialogAction !== undefined) {
                bodyParams["dialogAction"] = serializeAws_restJson1_1DialogAction(input.dialogAction, context);
            }
            if (input.recentIntentSummaryView !== undefined) {
                bodyParams["recentIntentSummaryView"] = serializeAws_restJson1_1IntentSummaryList(input.recentIntentSummaryView, context);
            }
            if (input.sessionAttributes !== undefined) {
                bodyParams["sessionAttributes"] = serializeAws_restJson1_1StringMap(input.sessionAttributes, context);
            }
            body = JSON.stringify(bodyParams);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function deserializeAws_restJson1_1DeleteSessionCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1DeleteSessionCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "DeleteSessionResponse",
                        botAlias: undefined,
                        botName: undefined,
                        sessionId: undefined,
                        userId: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    if (data.botAlias !== undefined && data.botAlias !== null) {
                        contents.botAlias = data.botAlias;
                    }
                    if (data.botName !== undefined && data.botName !== null) {
                        contents.botName = data.botName;
                    }
                    if (data.sessionId !== undefined && data.sessionId !== null) {
                        contents.sessionId = data.sessionId;
                    }
                    if (data.userId !== undefined && data.userId !== null) {
                        contents.userId = data.userId;
                    }
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1DeleteSessionCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, parsedBody, message;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _j.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.commonapi.exceptions#BadRequestException": return [3 /*break*/, 2];
                        case "ConflictException": return [3 /*break*/, 4];
                        case "com.amazonaws.commonapi.exceptions#ConflictException": return [3 /*break*/, 4];
                        case "InternalFailureException": return [3 /*break*/, 6];
                        case "com.amazonaws.commonapi.exceptions#InternalFailureException": return [3 /*break*/, 6];
                        case "LimitExceededException": return [3 /*break*/, 8];
                        case "com.amazonaws.commonapi.exceptions#LimitExceededException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.commonapi.exceptions#NotFoundException": return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 12];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ConflictExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalFailureExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 13];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1GetSessionCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1GetSessionCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "GetSessionResponse",
                        dialogAction: undefined,
                        recentIntentSummaryView: undefined,
                        sessionAttributes: undefined,
                        sessionId: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    if (data.dialogAction !== undefined && data.dialogAction !== null) {
                        contents.dialogAction = deserializeAws_restJson1_1DialogAction(data.dialogAction, context);
                    }
                    if (data.recentIntentSummaryView !== undefined &&
                        data.recentIntentSummaryView !== null) {
                        contents.recentIntentSummaryView = deserializeAws_restJson1_1IntentSummaryList(data.recentIntentSummaryView, context);
                    }
                    if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {
                        contents.sessionAttributes = deserializeAws_restJson1_1StringMap(data.sessionAttributes, context);
                    }
                    if (data.sessionId !== undefined && data.sessionId !== null) {
                        contents.sessionId = data.sessionId;
                    }
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1GetSessionCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, parsedBody, message;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _h.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.commonapi.exceptions#BadRequestException": return [3 /*break*/, 2];
                        case "InternalFailureException": return [3 /*break*/, 4];
                        case "com.amazonaws.commonapi.exceptions#InternalFailureException": return [3 /*break*/, 4];
                        case "LimitExceededException": return [3 /*break*/, 6];
                        case "com.amazonaws.commonapi.exceptions#LimitExceededException": return [3 /*break*/, 6];
                        case "NotFoundException": return [3 /*break*/, 8];
                        case "com.amazonaws.commonapi.exceptions#NotFoundException": return [3 /*break*/, 8];
                    }
                    return [3 /*break*/, 10];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalFailureExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 11];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1PostContentCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            if (output.statusCode !== 200 && output.statusCode >= 400) {
                return [2 /*return*/, deserializeAws_restJson1_1PostContentCommandError(output, context)];
            }
            contents = {
                $metadata: deserializeMetadata(output),
                __type: "PostContentResponse",
                audioStream: undefined,
                contentType: undefined,
                dialogState: undefined,
                inputTranscript: undefined,
                intentName: undefined,
                message: undefined,
                messageFormat: undefined,
                sentimentResponse: undefined,
                sessionAttributes: undefined,
                sessionId: undefined,
                slotToElicit: undefined,
                slots: undefined
            };
            if (output.headers["content-type"] !== undefined) {
                contents.contentType = output.headers["content-type"];
            }
            if (output.headers["x-amz-lex-dialog-state"] !== undefined) {
                contents.dialogState = output.headers["x-amz-lex-dialog-state"];
            }
            if (output.headers["x-amz-lex-input-transcript"] !== undefined) {
                contents.inputTranscript = output.headers["x-amz-lex-input-transcript"];
            }
            if (output.headers["x-amz-lex-intent-name"] !== undefined) {
                contents.intentName = output.headers["x-amz-lex-intent-name"];
            }
            if (output.headers["x-amz-lex-message"] !== undefined) {
                contents.message = output.headers["x-amz-lex-message"];
            }
            if (output.headers["x-amz-lex-message-format"] !== undefined) {
                contents.messageFormat = output.headers["x-amz-lex-message-format"];
            }
            if (output.headers["x-amz-lex-sentiment"] !== undefined) {
                contents.sentimentResponse = output.headers["x-amz-lex-sentiment"];
            }
            if (output.headers["x-amz-lex-session-attributes"] !== undefined) {
                contents.sessionAttributes = new __LazyJsonString(output.headers["x-amz-lex-session-attributes"]);
            }
            if (output.headers["x-amz-lex-session-id"] !== undefined) {
                contents.sessionId = output.headers["x-amz-lex-session-id"];
            }
            if (output.headers["x-amz-lex-slot-to-elicit"] !== undefined) {
                contents.slotToElicit = output.headers["x-amz-lex-slot-to-elicit"];
            }
            if (output.headers["x-amz-lex-slots"] !== undefined) {
                contents.slots = new __LazyJsonString(output.headers["x-amz-lex-slots"]);
            }
            data = output.body;
            contents.audioStream = data;
            return [2 /*return*/, Promise.resolve(contents)];
        });
    });
}
function deserializeAws_restJson1_1PostContentCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, parsedBody, message;
        return __generator(this, function (_q) {
            switch (_q.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _q.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.commonapi.exceptions#BadRequestException": return [3 /*break*/, 2];
                        case "ConflictException": return [3 /*break*/, 4];
                        case "com.amazonaws.commonapi.exceptions#ConflictException": return [3 /*break*/, 4];
                        case "InternalFailureException": return [3 /*break*/, 6];
                        case "com.amazonaws.commonapi.exceptions#InternalFailureException": return [3 /*break*/, 6];
                        case "LimitExceededException": return [3 /*break*/, 8];
                        case "com.amazonaws.commonapi.exceptions#LimitExceededException": return [3 /*break*/, 8];
                        case "NotAcceptableException": return [3 /*break*/, 10];
                        case "com.amazonaws.commonapi.exceptions#NotAcceptableException": return [3 /*break*/, 10];
                        case "NotFoundException": return [3 /*break*/, 12];
                        case "com.amazonaws.commonapi.exceptions#NotFoundException": return [3 /*break*/, 12];
                        case "RequestTimeoutException": return [3 /*break*/, 14];
                        case "com.amazonaws.commonapi.exceptions#RequestTimeoutException": return [3 /*break*/, 14];
                        case "UnsupportedMediaTypeException": return [3 /*break*/, 16];
                        case "com.amazonaws.commonapi.exceptions#UnsupportedMediaTypeException": return [3 /*break*/, 16];
                        case "BadGatewayException": return [3 /*break*/, 18];
                        case "com.amazonaws.deepsense.runtimeservice#BadGatewayException": return [3 /*break*/, 18];
                        case "DependencyFailedException": return [3 /*break*/, 20];
                        case "com.amazonaws.deepsense.runtimeservice#DependencyFailedException": return [3 /*break*/, 20];
                        case "LoopDetectedException": return [3 /*break*/, 22];
                        case "com.amazonaws.deepsense.runtimeservice#LoopDetectedException": return [3 /*break*/, 22];
                    }
                    return [3 /*break*/, 24];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ConflictExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalFailureExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotAcceptableExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1RequestTimeoutExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 16:
                    _l = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1UnsupportedMediaTypeExceptionResponse(parsedOutput, context)];
                case 17:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 18:
                    _m = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadGatewayExceptionResponse(parsedOutput, context)];
                case 19:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 20:
                    _o = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1DependencyFailedExceptionResponse(parsedOutput, context)];
                case 21:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 22:
                    _p = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1LoopDetectedExceptionResponse(parsedOutput, context)];
                case 23:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 24:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _q.label = 25;
                case 25:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1PostTextCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1PostTextCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output),
                        __type: "PostTextResponse",
                        dialogState: undefined,
                        intentName: undefined,
                        message: undefined,
                        messageFormat: undefined,
                        responseCard: undefined,
                        sentimentResponse: undefined,
                        sessionAttributes: undefined,
                        sessionId: undefined,
                        slotToElicit: undefined,
                        slots: undefined
                    };
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    if (data.dialogState !== undefined && data.dialogState !== null) {
                        contents.dialogState = data.dialogState;
                    }
                    if (data.intentName !== undefined && data.intentName !== null) {
                        contents.intentName = data.intentName;
                    }
                    if (data.message !== undefined && data.message !== null) {
                        contents.message = data.message;
                    }
                    if (data.messageFormat !== undefined && data.messageFormat !== null) {
                        contents.messageFormat = data.messageFormat;
                    }
                    if (data.responseCard !== undefined && data.responseCard !== null) {
                        contents.responseCard = deserializeAws_restJson1_1ResponseCard(data.responseCard, context);
                    }
                    if (data.sentimentResponse !== undefined && data.sentimentResponse !== null) {
                        contents.sentimentResponse = deserializeAws_restJson1_1SentimentResponse(data.sentimentResponse, context);
                    }
                    if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {
                        contents.sessionAttributes = deserializeAws_restJson1_1StringMap(data.sessionAttributes, context);
                    }
                    if (data.sessionId !== undefined && data.sessionId !== null) {
                        contents.sessionId = data.sessionId;
                    }
                    if (data.slotToElicit !== undefined && data.slotToElicit !== null) {
                        contents.slotToElicit = data.slotToElicit;
                    }
                    if (data.slots !== undefined && data.slots !== null) {
                        contents.slots = deserializeAws_restJson1_1StringMap(data.slots, context);
                    }
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1PostTextCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;
        return __generator(this, function (_m) {
            switch (_m.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _m.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.commonapi.exceptions#BadRequestException": return [3 /*break*/, 2];
                        case "ConflictException": return [3 /*break*/, 4];
                        case "com.amazonaws.commonapi.exceptions#ConflictException": return [3 /*break*/, 4];
                        case "InternalFailureException": return [3 /*break*/, 6];
                        case "com.amazonaws.commonapi.exceptions#InternalFailureException": return [3 /*break*/, 6];
                        case "LimitExceededException": return [3 /*break*/, 8];
                        case "com.amazonaws.commonapi.exceptions#LimitExceededException": return [3 /*break*/, 8];
                        case "NotFoundException": return [3 /*break*/, 10];
                        case "com.amazonaws.commonapi.exceptions#NotFoundException": return [3 /*break*/, 10];
                        case "BadGatewayException": return [3 /*break*/, 12];
                        case "com.amazonaws.deepsense.runtimeservice#BadGatewayException": return [3 /*break*/, 12];
                        case "DependencyFailedException": return [3 /*break*/, 14];
                        case "com.amazonaws.deepsense.runtimeservice#DependencyFailedException": return [3 /*break*/, 14];
                        case "LoopDetectedException": return [3 /*break*/, 16];
                        case "com.amazonaws.deepsense.runtimeservice#LoopDetectedException": return [3 /*break*/, 16];
                    }
                    return [3 /*break*/, 18];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ConflictExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalFailureExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadGatewayExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1DependencyFailedExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 16:
                    _l = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1LoopDetectedExceptionResponse(parsedOutput, context)];
                case 17:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 18:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _m.label = 19;
                case 19:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_restJson1_1PutSessionCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents, data;
        return __generator(this, function (_a) {
            if (output.statusCode !== 200 && output.statusCode >= 400) {
                return [2 /*return*/, deserializeAws_restJson1_1PutSessionCommandError(output, context)];
            }
            contents = {
                $metadata: deserializeMetadata(output),
                __type: "PutSessionResponse",
                audioStream: undefined,
                contentType: undefined,
                dialogState: undefined,
                intentName: undefined,
                message: undefined,
                messageFormat: undefined,
                sessionAttributes: undefined,
                sessionId: undefined,
                slotToElicit: undefined,
                slots: undefined
            };
            if (output.headers["content-type"] !== undefined) {
                contents.contentType = output.headers["content-type"];
            }
            if (output.headers["x-amz-lex-dialog-state"] !== undefined) {
                contents.dialogState = output.headers["x-amz-lex-dialog-state"];
            }
            if (output.headers["x-amz-lex-intent-name"] !== undefined) {
                contents.intentName = output.headers["x-amz-lex-intent-name"];
            }
            if (output.headers["x-amz-lex-message"] !== undefined) {
                contents.message = output.headers["x-amz-lex-message"];
            }
            if (output.headers["x-amz-lex-message-format"] !== undefined) {
                contents.messageFormat = output.headers["x-amz-lex-message-format"];
            }
            if (output.headers["x-amz-lex-session-attributes"] !== undefined) {
                contents.sessionAttributes = new __LazyJsonString(output.headers["x-amz-lex-session-attributes"]);
            }
            if (output.headers["x-amz-lex-session-id"] !== undefined) {
                contents.sessionId = output.headers["x-amz-lex-session-id"];
            }
            if (output.headers["x-amz-lex-slot-to-elicit"] !== undefined) {
                contents.slotToElicit = output.headers["x-amz-lex-slot-to-elicit"];
            }
            if (output.headers["x-amz-lex-slots"] !== undefined) {
                contents.slots = new __LazyJsonString(output.headers["x-amz-lex-slots"]);
            }
            data = output.body;
            contents.audioStream = data;
            return [2 /*return*/, Promise.resolve(contents)];
        });
    });
}
function deserializeAws_restJson1_1PutSessionCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;
        return __generator(this, function (_m) {
            switch (_m.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _m.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "BadRequestException": return [3 /*break*/, 2];
                        case "com.amazonaws.commonapi.exceptions#BadRequestException": return [3 /*break*/, 2];
                        case "ConflictException": return [3 /*break*/, 4];
                        case "com.amazonaws.commonapi.exceptions#ConflictException": return [3 /*break*/, 4];
                        case "InternalFailureException": return [3 /*break*/, 6];
                        case "com.amazonaws.commonapi.exceptions#InternalFailureException": return [3 /*break*/, 6];
                        case "LimitExceededException": return [3 /*break*/, 8];
                        case "com.amazonaws.commonapi.exceptions#LimitExceededException": return [3 /*break*/, 8];
                        case "NotAcceptableException": return [3 /*break*/, 10];
                        case "com.amazonaws.commonapi.exceptions#NotAcceptableException": return [3 /*break*/, 10];
                        case "NotFoundException": return [3 /*break*/, 12];
                        case "com.amazonaws.commonapi.exceptions#NotFoundException": return [3 /*break*/, 12];
                        case "BadGatewayException": return [3 /*break*/, 14];
                        case "com.amazonaws.deepsense.runtimeservice#BadGatewayException": return [3 /*break*/, 14];
                        case "DependencyFailedException": return [3 /*break*/, 16];
                        case "com.amazonaws.deepsense.runtimeservice#DependencyFailedException": return [3 /*break*/, 16];
                    }
                    return [3 /*break*/, 18];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1ConflictExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InternalFailureExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotAcceptableExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1BadGatewayExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 16:
                    _l = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1DependencyFailedExceptionResponse(parsedOutput, context)];
                case 17:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 19];
                case 18:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _m.label = 19;
                case 19:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
var deserializeAws_restJson1_1BadRequestExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "BadRequestException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1ConflictExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "ConflictException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1InternalFailureExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "InternalFailureException",
            $fault: "server",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1LimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "LimitExceededException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined,
            retryAfterSeconds: undefined
        };
        if (parsedOutput.headers["retry-after"] !== undefined) {
            contents.retryAfterSeconds = parsedOutput.headers["retry-after"];
        }
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1NotAcceptableExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "NotAcceptableException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1NotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "NotFoundException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1RequestTimeoutExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "RequestTimeoutException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1UnsupportedMediaTypeExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "UnsupportedMediaTypeException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1BadGatewayExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "BadGatewayException",
            $fault: "server",
            $metadata: deserializeMetadata(parsedOutput),
            Message: undefined
        };
        data = parsedOutput.body;
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = data.Message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1DependencyFailedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "DependencyFailedException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            Message: undefined
        };
        data = parsedOutput.body;
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = data.Message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1_1LoopDetectedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "LoopDetectedException",
            $fault: "server",
            $metadata: deserializeMetadata(parsedOutput),
            Message: undefined
        };
        data = parsedOutput.body;
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = data.Message;
        }
        return [2 /*return*/, contents];
    });
}); };
var serializeAws_restJson1_1DialogAction = function (input, context) {
    var bodyParams = {};
    if (input.fulfillmentState !== undefined) {
        bodyParams["fulfillmentState"] = input.fulfillmentState;
    }
    if (input.intentName !== undefined) {
        bodyParams["intentName"] = input.intentName;
    }
    if (input.message !== undefined) {
        bodyParams["message"] = input.message;
    }
    if (input.messageFormat !== undefined) {
        bodyParams["messageFormat"] = input.messageFormat;
    }
    if (input.slotToElicit !== undefined) {
        bodyParams["slotToElicit"] = input.slotToElicit;
    }
    if (input.slots !== undefined) {
        bodyParams["slots"] = serializeAws_restJson1_1StringMap(input.slots, context);
    }
    if (input.type !== undefined) {
        bodyParams["type"] = input.type;
    }
    return bodyParams;
};
var serializeAws_restJson1_1IntentSummary = function (input, context) {
    var bodyParams = {};
    if (input.checkpointLabel !== undefined) {
        bodyParams["checkpointLabel"] = input.checkpointLabel;
    }
    if (input.confirmationStatus !== undefined) {
        bodyParams["confirmationStatus"] = input.confirmationStatus;
    }
    if (input.dialogActionType !== undefined) {
        bodyParams["dialogActionType"] = input.dialogActionType;
    }
    if (input.fulfillmentState !== undefined) {
        bodyParams["fulfillmentState"] = input.fulfillmentState;
    }
    if (input.intentName !== undefined) {
        bodyParams["intentName"] = input.intentName;
    }
    if (input.slotToElicit !== undefined) {
        bodyParams["slotToElicit"] = input.slotToElicit;
    }
    if (input.slots !== undefined) {
        bodyParams["slots"] = serializeAws_restJson1_1StringMap(input.slots, context);
    }
    return bodyParams;
};
var serializeAws_restJson1_1IntentSummaryList = function (input, context) {
    var e_1, _a;
    var contents = [];
    try {
        for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
            var entry = input_1_1.value;
            contents.push(serializeAws_restJson1_1IntentSummary(entry, context));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return contents;
};
var serializeAws_restJson1_1StringMap = function (input, context) {
    var mapParams = {};
    Object.keys(input).forEach(function (key) {
        mapParams[key] = input[key];
    });
    return mapParams;
};
var deserializeAws_restJson1_1DialogAction = function (output, context) {
    var contents = {
        __type: "DialogAction",
        fulfillmentState: undefined,
        intentName: undefined,
        message: undefined,
        messageFormat: undefined,
        slotToElicit: undefined,
        slots: undefined,
        type: undefined
    };
    if (output.fulfillmentState !== undefined &&
        output.fulfillmentState !== null) {
        contents.fulfillmentState = output.fulfillmentState;
    }
    if (output.intentName !== undefined && output.intentName !== null) {
        contents.intentName = output.intentName;
    }
    if (output.message !== undefined && output.message !== null) {
        contents.message = output.message;
    }
    if (output.messageFormat !== undefined && output.messageFormat !== null) {
        contents.messageFormat = output.messageFormat;
    }
    if (output.slotToElicit !== undefined && output.slotToElicit !== null) {
        contents.slotToElicit = output.slotToElicit;
    }
    if (output.slots !== undefined && output.slots !== null) {
        contents.slots = deserializeAws_restJson1_1StringMap(output.slots, context);
    }
    if (output.type !== undefined && output.type !== null) {
        contents.type = output.type;
    }
    return contents;
};
var deserializeAws_restJson1_1IntentSummary = function (output, context) {
    var contents = {
        __type: "IntentSummary",
        checkpointLabel: undefined,
        confirmationStatus: undefined,
        dialogActionType: undefined,
        fulfillmentState: undefined,
        intentName: undefined,
        slotToElicit: undefined,
        slots: undefined
    };
    if (output.checkpointLabel !== undefined && output.checkpointLabel !== null) {
        contents.checkpointLabel = output.checkpointLabel;
    }
    if (output.confirmationStatus !== undefined &&
        output.confirmationStatus !== null) {
        contents.confirmationStatus = output.confirmationStatus;
    }
    if (output.dialogActionType !== undefined &&
        output.dialogActionType !== null) {
        contents.dialogActionType = output.dialogActionType;
    }
    if (output.fulfillmentState !== undefined &&
        output.fulfillmentState !== null) {
        contents.fulfillmentState = output.fulfillmentState;
    }
    if (output.intentName !== undefined && output.intentName !== null) {
        contents.intentName = output.intentName;
    }
    if (output.slotToElicit !== undefined && output.slotToElicit !== null) {
        contents.slotToElicit = output.slotToElicit;
    }
    if (output.slots !== undefined && output.slots !== null) {
        contents.slots = deserializeAws_restJson1_1StringMap(output.slots, context);
    }
    return contents;
};
var deserializeAws_restJson1_1IntentSummaryList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1IntentSummary(entry, context);
    });
};
var deserializeAws_restJson1_1SentimentResponse = function (output, context) {
    var contents = {
        __type: "SentimentResponse",
        sentimentLabel: undefined,
        sentimentScore: undefined
    };
    if (output.sentimentLabel !== undefined && output.sentimentLabel !== null) {
        contents.sentimentLabel = output.sentimentLabel;
    }
    if (output.sentimentScore !== undefined && output.sentimentScore !== null) {
        contents.sentimentScore = output.sentimentScore;
    }
    return contents;
};
var deserializeAws_restJson1_1StringMap = function (output, context) {
    var mapParams = {};
    Object.keys(output).forEach(function (key) {
        mapParams[key] = output[key];
    });
    return mapParams;
};
var deserializeAws_restJson1_1Button = function (output, context) {
    var contents = {
        __type: "Button",
        text: undefined,
        value: undefined
    };
    if (output.text !== undefined && output.text !== null) {
        contents.text = output.text;
    }
    if (output.value !== undefined && output.value !== null) {
        contents.value = output.value;
    }
    return contents;
};
var deserializeAws_restJson1_1GenericAttachment = function (output, context) {
    var contents = {
        __type: "GenericAttachment",
        attachmentLinkUrl: undefined,
        buttons: undefined,
        imageUrl: undefined,
        subTitle: undefined,
        title: undefined
    };
    if (output.attachmentLinkUrl !== undefined &&
        output.attachmentLinkUrl !== null) {
        contents.attachmentLinkUrl = output.attachmentLinkUrl;
    }
    if (output.buttons !== undefined && output.buttons !== null) {
        contents.buttons = deserializeAws_restJson1_1listOfButtons(output.buttons, context);
    }
    if (output.imageUrl !== undefined && output.imageUrl !== null) {
        contents.imageUrl = output.imageUrl;
    }
    if (output.subTitle !== undefined && output.subTitle !== null) {
        contents.subTitle = output.subTitle;
    }
    if (output.title !== undefined && output.title !== null) {
        contents.title = output.title;
    }
    return contents;
};
var deserializeAws_restJson1_1ResponseCard = function (output, context) {
    var contents = {
        __type: "ResponseCard",
        contentType: undefined,
        genericAttachments: undefined,
        version: undefined
    };
    if (output.contentType !== undefined && output.contentType !== null) {
        contents.contentType = output.contentType;
    }
    if (output.genericAttachments !== undefined &&
        output.genericAttachments !== null) {
        contents.genericAttachments = deserializeAws_restJson1_1genericAttachmentList(output.genericAttachments, context);
    }
    if (output.version !== undefined && output.version !== null) {
        contents.version = output.version;
    }
    return contents;
};
var deserializeAws_restJson1_1genericAttachmentList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1GenericAttachment(entry, context);
    });
};
var deserializeAws_restJson1_1listOfButtons = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_restJson1_1Button(entry, context);
    });
};
var deserializeMetadata = function (output) { return ({
    httpStatusCode: output.statusCode,
    httpHeaders: output.headers,
    requestId: output.headers["x-amzn-requestid"]
}); };
// Collect low-level response body stream to Uint8Array.
var collectBody = function (streamBody, context) {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return (context.streamCollector(streamBody) || Promise.resolve(new Uint8Array()));
};
// Encode Uint8Array data into string with utf-8.
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) {
        return context.utf8Encoder(body);
    });
};
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
};
/**
 * Load an error code for the aws.rest-json-1.1 protocol.
 */
var loadRestJsonErrorCode = function (output, data) {
    var findKey = function (object, key) {
        return Object.keys(object).find(function (k) { return k.toLowerCase() === key.toLowerCase(); });
    };
    var sanitizeErrorCode = function (rawValue) {
        var cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    var headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
    return "";
};
//# sourceMappingURL=Aws_restJson1_1.js.map