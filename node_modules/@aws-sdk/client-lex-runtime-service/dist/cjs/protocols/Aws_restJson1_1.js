"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
async function serializeAws_restJson1_1DeleteSessionCommand(input, context) {
    const headers = {};
    headers["Content-Type"] = "";
    let resolvedPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/session";
    if (input.botAlias !== undefined) {
        const labelValue = input.botAlias;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: botAlias.");
        }
        resolvedPath = resolvedPath.replace("{botAlias}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: botAlias.");
    }
    if (input.botName !== undefined) {
        const labelValue = input.botName;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: botName.");
        }
        resolvedPath = resolvedPath.replace("{botName}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: botName.");
    }
    if (input.userId !== undefined) {
        const labelValue = input.userId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: userId.");
        }
        resolvedPath = resolvedPath.replace("{userId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: userId.");
    }
    let body;
    return new protocol_http_1.HttpRequest(Object.assign(Object.assign({}, context.endpoint), { protocol: "https", method: "DELETE", headers: headers, path: resolvedPath, body: body }));
}
exports.serializeAws_restJson1_1DeleteSessionCommand = serializeAws_restJson1_1DeleteSessionCommand;
async function serializeAws_restJson1_1GetSessionCommand(input, context) {
    const headers = {};
    headers["Content-Type"] = "";
    let resolvedPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/session";
    if (input.botAlias !== undefined) {
        const labelValue = input.botAlias;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: botAlias.");
        }
        resolvedPath = resolvedPath.replace("{botAlias}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: botAlias.");
    }
    if (input.botName !== undefined) {
        const labelValue = input.botName;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: botName.");
        }
        resolvedPath = resolvedPath.replace("{botName}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: botName.");
    }
    if (input.userId !== undefined) {
        const labelValue = input.userId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: userId.");
        }
        resolvedPath = resolvedPath.replace("{userId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: userId.");
    }
    const query = {};
    if (input.checkpointLabelFilter !== undefined) {
        query["checkpointLabelFilter"] = input.checkpointLabelFilter;
    }
    let body;
    return new protocol_http_1.HttpRequest(Object.assign(Object.assign({}, context.endpoint), { protocol: "https", method: "GET", headers: headers, path: resolvedPath, query: query, body: body }));
}
exports.serializeAws_restJson1_1GetSessionCommand = serializeAws_restJson1_1GetSessionCommand;
async function serializeAws_restJson1_1PostContentCommand(input, context) {
    const headers = {};
    headers["Content-Type"] = "application/octet-stream";
    headers["x-amz-content-sha256"] = "UNSIGNED_PAYLOAD";
    if (input.accept !== undefined) {
        headers["Accept"] = input.accept;
    }
    if (input.contentType !== undefined) {
        headers["Content-Type"] = input.contentType;
    }
    if (input.requestAttributes !== undefined) {
        headers["x-amz-lex-request-attributes"] = smithy_client_1.LazyJsonString.fromObject(input.requestAttributes);
    }
    if (input.sessionAttributes !== undefined) {
        headers["x-amz-lex-session-attributes"] = smithy_client_1.LazyJsonString.fromObject(input.sessionAttributes);
    }
    let resolvedPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/content";
    if (input.botAlias !== undefined) {
        const labelValue = input.botAlias;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: botAlias.");
        }
        resolvedPath = resolvedPath.replace("{botAlias}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: botAlias.");
    }
    if (input.botName !== undefined) {
        const labelValue = input.botName;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: botName.");
        }
        resolvedPath = resolvedPath.replace("{botName}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: botName.");
    }
    if (input.userId !== undefined) {
        const labelValue = input.userId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: userId.");
        }
        resolvedPath = resolvedPath.replace("{userId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: userId.");
    }
    let body;
    if (input.inputStream !== undefined) {
        body = input.inputStream;
    }
    return new protocol_http_1.HttpRequest(Object.assign(Object.assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }));
}
exports.serializeAws_restJson1_1PostContentCommand = serializeAws_restJson1_1PostContentCommand;
async function serializeAws_restJson1_1PostTextCommand(input, context) {
    const headers = {};
    headers["Content-Type"] = "application/json";
    let resolvedPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/text";
    if (input.botAlias !== undefined) {
        const labelValue = input.botAlias;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: botAlias.");
        }
        resolvedPath = resolvedPath.replace("{botAlias}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: botAlias.");
    }
    if (input.botName !== undefined) {
        const labelValue = input.botName;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: botName.");
        }
        resolvedPath = resolvedPath.replace("{botName}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: botName.");
    }
    if (input.userId !== undefined) {
        const labelValue = input.userId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: userId.");
        }
        resolvedPath = resolvedPath.replace("{userId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: userId.");
    }
    let body;
    const bodyParams = {};
    if (input.inputText !== undefined) {
        bodyParams["inputText"] = input.inputText;
    }
    if (input.requestAttributes !== undefined) {
        bodyParams["requestAttributes"] = serializeAws_restJson1_1StringMap(input.requestAttributes, context);
    }
    if (input.sessionAttributes !== undefined) {
        bodyParams["sessionAttributes"] = serializeAws_restJson1_1StringMap(input.sessionAttributes, context);
    }
    body = JSON.stringify(bodyParams);
    return new protocol_http_1.HttpRequest(Object.assign(Object.assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }));
}
exports.serializeAws_restJson1_1PostTextCommand = serializeAws_restJson1_1PostTextCommand;
async function serializeAws_restJson1_1PutSessionCommand(input, context) {
    const headers = {};
    headers["Content-Type"] = "application/json";
    if (input.accept !== undefined) {
        headers["Accept"] = input.accept;
    }
    let resolvedPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/session";
    if (input.botAlias !== undefined) {
        const labelValue = input.botAlias;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: botAlias.");
        }
        resolvedPath = resolvedPath.replace("{botAlias}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: botAlias.");
    }
    if (input.botName !== undefined) {
        const labelValue = input.botName;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: botName.");
        }
        resolvedPath = resolvedPath.replace("{botName}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: botName.");
    }
    if (input.userId !== undefined) {
        const labelValue = input.userId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: userId.");
        }
        resolvedPath = resolvedPath.replace("{userId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: userId.");
    }
    let body;
    const bodyParams = {};
    if (input.dialogAction !== undefined) {
        bodyParams["dialogAction"] = serializeAws_restJson1_1DialogAction(input.dialogAction, context);
    }
    if (input.recentIntentSummaryView !== undefined) {
        bodyParams["recentIntentSummaryView"] = serializeAws_restJson1_1IntentSummaryList(input.recentIntentSummaryView, context);
    }
    if (input.sessionAttributes !== undefined) {
        bodyParams["sessionAttributes"] = serializeAws_restJson1_1StringMap(input.sessionAttributes, context);
    }
    body = JSON.stringify(bodyParams);
    return new protocol_http_1.HttpRequest(Object.assign(Object.assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }));
}
exports.serializeAws_restJson1_1PutSessionCommand = serializeAws_restJson1_1PutSessionCommand;
async function deserializeAws_restJson1_1DeleteSessionCommand(output, context) {
    if (output.statusCode !== 200 && output.statusCode >= 400) {
        return deserializeAws_restJson1_1DeleteSessionCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        __type: "DeleteSessionResponse",
        botAlias: undefined,
        botName: undefined,
        sessionId: undefined,
        userId: undefined
    };
    const data = await parseBody(output.body, context);
    if (data.botAlias !== undefined && data.botAlias !== null) {
        contents.botAlias = data.botAlias;
    }
    if (data.botName !== undefined && data.botName !== null) {
        contents.botName = data.botName;
    }
    if (data.sessionId !== undefined && data.sessionId !== null) {
        contents.sessionId = data.sessionId;
    }
    if (data.userId !== undefined && data.userId !== null) {
        contents.userId = data.userId;
    }
    return Promise.resolve(contents);
}
exports.deserializeAws_restJson1_1DeleteSessionCommand = deserializeAws_restJson1_1DeleteSessionCommand;
async function deserializeAws_restJson1_1DeleteSessionCommandError(output, context) {
    const parsedOutput = Object.assign(Object.assign({}, output), { body: await parseBody(output.body, context) });
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.commonapi.exceptions#BadRequestException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "ConflictException":
        case "com.amazonaws.commonapi.exceptions#ConflictException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1ConflictExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "InternalFailureException":
        case "com.amazonaws.commonapi.exceptions#InternalFailureException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1InternalFailureExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "LimitExceededException":
        case "com.amazonaws.commonapi.exceptions#LimitExceededException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1LimitExceededExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "NotFoundException":
        case "com.amazonaws.commonapi.exceptions#NotFoundException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = Object.assign(Object.assign({}, parsedBody), { name: `${errorCode}`, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
}
async function deserializeAws_restJson1_1GetSessionCommand(output, context) {
    if (output.statusCode !== 200 && output.statusCode >= 400) {
        return deserializeAws_restJson1_1GetSessionCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        __type: "GetSessionResponse",
        dialogAction: undefined,
        recentIntentSummaryView: undefined,
        sessionAttributes: undefined,
        sessionId: undefined
    };
    const data = await parseBody(output.body, context);
    if (data.dialogAction !== undefined && data.dialogAction !== null) {
        contents.dialogAction = deserializeAws_restJson1_1DialogAction(data.dialogAction, context);
    }
    if (data.recentIntentSummaryView !== undefined &&
        data.recentIntentSummaryView !== null) {
        contents.recentIntentSummaryView = deserializeAws_restJson1_1IntentSummaryList(data.recentIntentSummaryView, context);
    }
    if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {
        contents.sessionAttributes = deserializeAws_restJson1_1StringMap(data.sessionAttributes, context);
    }
    if (data.sessionId !== undefined && data.sessionId !== null) {
        contents.sessionId = data.sessionId;
    }
    return Promise.resolve(contents);
}
exports.deserializeAws_restJson1_1GetSessionCommand = deserializeAws_restJson1_1GetSessionCommand;
async function deserializeAws_restJson1_1GetSessionCommandError(output, context) {
    const parsedOutput = Object.assign(Object.assign({}, output), { body: await parseBody(output.body, context) });
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.commonapi.exceptions#BadRequestException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "InternalFailureException":
        case "com.amazonaws.commonapi.exceptions#InternalFailureException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1InternalFailureExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "LimitExceededException":
        case "com.amazonaws.commonapi.exceptions#LimitExceededException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1LimitExceededExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "NotFoundException":
        case "com.amazonaws.commonapi.exceptions#NotFoundException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = Object.assign(Object.assign({}, parsedBody), { name: `${errorCode}`, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
}
async function deserializeAws_restJson1_1PostContentCommand(output, context) {
    if (output.statusCode !== 200 && output.statusCode >= 400) {
        return deserializeAws_restJson1_1PostContentCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        __type: "PostContentResponse",
        audioStream: undefined,
        contentType: undefined,
        dialogState: undefined,
        inputTranscript: undefined,
        intentName: undefined,
        message: undefined,
        messageFormat: undefined,
        sentimentResponse: undefined,
        sessionAttributes: undefined,
        sessionId: undefined,
        slotToElicit: undefined,
        slots: undefined
    };
    if (output.headers["content-type"] !== undefined) {
        contents.contentType = output.headers["content-type"];
    }
    if (output.headers["x-amz-lex-dialog-state"] !== undefined) {
        contents.dialogState = output.headers["x-amz-lex-dialog-state"];
    }
    if (output.headers["x-amz-lex-input-transcript"] !== undefined) {
        contents.inputTranscript = output.headers["x-amz-lex-input-transcript"];
    }
    if (output.headers["x-amz-lex-intent-name"] !== undefined) {
        contents.intentName = output.headers["x-amz-lex-intent-name"];
    }
    if (output.headers["x-amz-lex-message"] !== undefined) {
        contents.message = output.headers["x-amz-lex-message"];
    }
    if (output.headers["x-amz-lex-message-format"] !== undefined) {
        contents.messageFormat = output.headers["x-amz-lex-message-format"];
    }
    if (output.headers["x-amz-lex-sentiment"] !== undefined) {
        contents.sentimentResponse = output.headers["x-amz-lex-sentiment"];
    }
    if (output.headers["x-amz-lex-session-attributes"] !== undefined) {
        contents.sessionAttributes = new smithy_client_1.LazyJsonString(output.headers["x-amz-lex-session-attributes"]);
    }
    if (output.headers["x-amz-lex-session-id"] !== undefined) {
        contents.sessionId = output.headers["x-amz-lex-session-id"];
    }
    if (output.headers["x-amz-lex-slot-to-elicit"] !== undefined) {
        contents.slotToElicit = output.headers["x-amz-lex-slot-to-elicit"];
    }
    if (output.headers["x-amz-lex-slots"] !== undefined) {
        contents.slots = new smithy_client_1.LazyJsonString(output.headers["x-amz-lex-slots"]);
    }
    const data = output.body;
    contents.audioStream = data;
    return Promise.resolve(contents);
}
exports.deserializeAws_restJson1_1PostContentCommand = deserializeAws_restJson1_1PostContentCommand;
async function deserializeAws_restJson1_1PostContentCommandError(output, context) {
    const parsedOutput = Object.assign(Object.assign({}, output), { body: await parseBody(output.body, context) });
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.commonapi.exceptions#BadRequestException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "ConflictException":
        case "com.amazonaws.commonapi.exceptions#ConflictException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1ConflictExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "InternalFailureException":
        case "com.amazonaws.commonapi.exceptions#InternalFailureException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1InternalFailureExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "LimitExceededException":
        case "com.amazonaws.commonapi.exceptions#LimitExceededException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1LimitExceededExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "NotAcceptableException":
        case "com.amazonaws.commonapi.exceptions#NotAcceptableException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1NotAcceptableExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "NotFoundException":
        case "com.amazonaws.commonapi.exceptions#NotFoundException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "RequestTimeoutException":
        case "com.amazonaws.commonapi.exceptions#RequestTimeoutException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1RequestTimeoutExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "UnsupportedMediaTypeException":
        case "com.amazonaws.commonapi.exceptions#UnsupportedMediaTypeException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1UnsupportedMediaTypeExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "BadGatewayException":
        case "com.amazonaws.deepsense.runtimeservice#BadGatewayException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1BadGatewayExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "DependencyFailedException":
        case "com.amazonaws.deepsense.runtimeservice#DependencyFailedException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1DependencyFailedExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "LoopDetectedException":
        case "com.amazonaws.deepsense.runtimeservice#LoopDetectedException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1LoopDetectedExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = Object.assign(Object.assign({}, parsedBody), { name: `${errorCode}`, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
}
async function deserializeAws_restJson1_1PostTextCommand(output, context) {
    if (output.statusCode !== 200 && output.statusCode >= 400) {
        return deserializeAws_restJson1_1PostTextCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        __type: "PostTextResponse",
        dialogState: undefined,
        intentName: undefined,
        message: undefined,
        messageFormat: undefined,
        responseCard: undefined,
        sentimentResponse: undefined,
        sessionAttributes: undefined,
        sessionId: undefined,
        slotToElicit: undefined,
        slots: undefined
    };
    const data = await parseBody(output.body, context);
    if (data.dialogState !== undefined && data.dialogState !== null) {
        contents.dialogState = data.dialogState;
    }
    if (data.intentName !== undefined && data.intentName !== null) {
        contents.intentName = data.intentName;
    }
    if (data.message !== undefined && data.message !== null) {
        contents.message = data.message;
    }
    if (data.messageFormat !== undefined && data.messageFormat !== null) {
        contents.messageFormat = data.messageFormat;
    }
    if (data.responseCard !== undefined && data.responseCard !== null) {
        contents.responseCard = deserializeAws_restJson1_1ResponseCard(data.responseCard, context);
    }
    if (data.sentimentResponse !== undefined && data.sentimentResponse !== null) {
        contents.sentimentResponse = deserializeAws_restJson1_1SentimentResponse(data.sentimentResponse, context);
    }
    if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {
        contents.sessionAttributes = deserializeAws_restJson1_1StringMap(data.sessionAttributes, context);
    }
    if (data.sessionId !== undefined && data.sessionId !== null) {
        contents.sessionId = data.sessionId;
    }
    if (data.slotToElicit !== undefined && data.slotToElicit !== null) {
        contents.slotToElicit = data.slotToElicit;
    }
    if (data.slots !== undefined && data.slots !== null) {
        contents.slots = deserializeAws_restJson1_1StringMap(data.slots, context);
    }
    return Promise.resolve(contents);
}
exports.deserializeAws_restJson1_1PostTextCommand = deserializeAws_restJson1_1PostTextCommand;
async function deserializeAws_restJson1_1PostTextCommandError(output, context) {
    const parsedOutput = Object.assign(Object.assign({}, output), { body: await parseBody(output.body, context) });
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.commonapi.exceptions#BadRequestException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "ConflictException":
        case "com.amazonaws.commonapi.exceptions#ConflictException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1ConflictExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "InternalFailureException":
        case "com.amazonaws.commonapi.exceptions#InternalFailureException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1InternalFailureExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "LimitExceededException":
        case "com.amazonaws.commonapi.exceptions#LimitExceededException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1LimitExceededExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "NotFoundException":
        case "com.amazonaws.commonapi.exceptions#NotFoundException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "BadGatewayException":
        case "com.amazonaws.deepsense.runtimeservice#BadGatewayException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1BadGatewayExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "DependencyFailedException":
        case "com.amazonaws.deepsense.runtimeservice#DependencyFailedException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1DependencyFailedExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "LoopDetectedException":
        case "com.amazonaws.deepsense.runtimeservice#LoopDetectedException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1LoopDetectedExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = Object.assign(Object.assign({}, parsedBody), { name: `${errorCode}`, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
}
async function deserializeAws_restJson1_1PutSessionCommand(output, context) {
    if (output.statusCode !== 200 && output.statusCode >= 400) {
        return deserializeAws_restJson1_1PutSessionCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        __type: "PutSessionResponse",
        audioStream: undefined,
        contentType: undefined,
        dialogState: undefined,
        intentName: undefined,
        message: undefined,
        messageFormat: undefined,
        sessionAttributes: undefined,
        sessionId: undefined,
        slotToElicit: undefined,
        slots: undefined
    };
    if (output.headers["content-type"] !== undefined) {
        contents.contentType = output.headers["content-type"];
    }
    if (output.headers["x-amz-lex-dialog-state"] !== undefined) {
        contents.dialogState = output.headers["x-amz-lex-dialog-state"];
    }
    if (output.headers["x-amz-lex-intent-name"] !== undefined) {
        contents.intentName = output.headers["x-amz-lex-intent-name"];
    }
    if (output.headers["x-amz-lex-message"] !== undefined) {
        contents.message = output.headers["x-amz-lex-message"];
    }
    if (output.headers["x-amz-lex-message-format"] !== undefined) {
        contents.messageFormat = output.headers["x-amz-lex-message-format"];
    }
    if (output.headers["x-amz-lex-session-attributes"] !== undefined) {
        contents.sessionAttributes = new smithy_client_1.LazyJsonString(output.headers["x-amz-lex-session-attributes"]);
    }
    if (output.headers["x-amz-lex-session-id"] !== undefined) {
        contents.sessionId = output.headers["x-amz-lex-session-id"];
    }
    if (output.headers["x-amz-lex-slot-to-elicit"] !== undefined) {
        contents.slotToElicit = output.headers["x-amz-lex-slot-to-elicit"];
    }
    if (output.headers["x-amz-lex-slots"] !== undefined) {
        contents.slots = new smithy_client_1.LazyJsonString(output.headers["x-amz-lex-slots"]);
    }
    const data = output.body;
    contents.audioStream = data;
    return Promise.resolve(contents);
}
exports.deserializeAws_restJson1_1PutSessionCommand = deserializeAws_restJson1_1PutSessionCommand;
async function deserializeAws_restJson1_1PutSessionCommandError(output, context) {
    const parsedOutput = Object.assign(Object.assign({}, output), { body: await parseBody(output.body, context) });
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.commonapi.exceptions#BadRequestException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1BadRequestExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "ConflictException":
        case "com.amazonaws.commonapi.exceptions#ConflictException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1ConflictExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "InternalFailureException":
        case "com.amazonaws.commonapi.exceptions#InternalFailureException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1InternalFailureExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "LimitExceededException":
        case "com.amazonaws.commonapi.exceptions#LimitExceededException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1LimitExceededExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "NotAcceptableException":
        case "com.amazonaws.commonapi.exceptions#NotAcceptableException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1NotAcceptableExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "NotFoundException":
        case "com.amazonaws.commonapi.exceptions#NotFoundException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1NotFoundExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "BadGatewayException":
        case "com.amazonaws.deepsense.runtimeservice#BadGatewayException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1BadGatewayExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        case "DependencyFailedException":
        case "com.amazonaws.deepsense.runtimeservice#DependencyFailedException":
            response = Object.assign(Object.assign({}, (await deserializeAws_restJson1_1DependencyFailedExceptionResponse(parsedOutput, context))), { name: errorCode, $metadata: deserializeMetadata(output) });
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = Object.assign(Object.assign({}, parsedBody), { name: `${errorCode}`, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
}
const deserializeAws_restJson1_1BadRequestExceptionResponse = async (parsedOutput, context) => {
    const contents = {
        name: "BadRequestException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        message: undefined
    };
    const data = parsedOutput.body;
    if (data.message !== undefined && data.message !== null) {
        contents.message = data.message;
    }
    return contents;
};
const deserializeAws_restJson1_1ConflictExceptionResponse = async (parsedOutput, context) => {
    const contents = {
        name: "ConflictException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        message: undefined
    };
    const data = parsedOutput.body;
    if (data.message !== undefined && data.message !== null) {
        contents.message = data.message;
    }
    return contents;
};
const deserializeAws_restJson1_1InternalFailureExceptionResponse = async (parsedOutput, context) => {
    const contents = {
        name: "InternalFailureException",
        $fault: "server",
        $metadata: deserializeMetadata(parsedOutput),
        message: undefined
    };
    const data = parsedOutput.body;
    if (data.message !== undefined && data.message !== null) {
        contents.message = data.message;
    }
    return contents;
};
const deserializeAws_restJson1_1LimitExceededExceptionResponse = async (parsedOutput, context) => {
    const contents = {
        name: "LimitExceededException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        message: undefined,
        retryAfterSeconds: undefined
    };
    if (parsedOutput.headers["retry-after"] !== undefined) {
        contents.retryAfterSeconds = parsedOutput.headers["retry-after"];
    }
    const data = parsedOutput.body;
    if (data.message !== undefined && data.message !== null) {
        contents.message = data.message;
    }
    return contents;
};
const deserializeAws_restJson1_1NotAcceptableExceptionResponse = async (parsedOutput, context) => {
    const contents = {
        name: "NotAcceptableException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        message: undefined
    };
    const data = parsedOutput.body;
    if (data.message !== undefined && data.message !== null) {
        contents.message = data.message;
    }
    return contents;
};
const deserializeAws_restJson1_1NotFoundExceptionResponse = async (parsedOutput, context) => {
    const contents = {
        name: "NotFoundException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        message: undefined
    };
    const data = parsedOutput.body;
    if (data.message !== undefined && data.message !== null) {
        contents.message = data.message;
    }
    return contents;
};
const deserializeAws_restJson1_1RequestTimeoutExceptionResponse = async (parsedOutput, context) => {
    const contents = {
        name: "RequestTimeoutException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        message: undefined
    };
    const data = parsedOutput.body;
    if (data.message !== undefined && data.message !== null) {
        contents.message = data.message;
    }
    return contents;
};
const deserializeAws_restJson1_1UnsupportedMediaTypeExceptionResponse = async (parsedOutput, context) => {
    const contents = {
        name: "UnsupportedMediaTypeException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        message: undefined
    };
    const data = parsedOutput.body;
    if (data.message !== undefined && data.message !== null) {
        contents.message = data.message;
    }
    return contents;
};
const deserializeAws_restJson1_1BadGatewayExceptionResponse = async (parsedOutput, context) => {
    const contents = {
        name: "BadGatewayException",
        $fault: "server",
        $metadata: deserializeMetadata(parsedOutput),
        Message: undefined
    };
    const data = parsedOutput.body;
    if (data.Message !== undefined && data.Message !== null) {
        contents.Message = data.Message;
    }
    return contents;
};
const deserializeAws_restJson1_1DependencyFailedExceptionResponse = async (parsedOutput, context) => {
    const contents = {
        name: "DependencyFailedException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        Message: undefined
    };
    const data = parsedOutput.body;
    if (data.Message !== undefined && data.Message !== null) {
        contents.Message = data.Message;
    }
    return contents;
};
const deserializeAws_restJson1_1LoopDetectedExceptionResponse = async (parsedOutput, context) => {
    const contents = {
        name: "LoopDetectedException",
        $fault: "server",
        $metadata: deserializeMetadata(parsedOutput),
        Message: undefined
    };
    const data = parsedOutput.body;
    if (data.Message !== undefined && data.Message !== null) {
        contents.Message = data.Message;
    }
    return contents;
};
const serializeAws_restJson1_1DialogAction = (input, context) => {
    const bodyParams = {};
    if (input.fulfillmentState !== undefined) {
        bodyParams["fulfillmentState"] = input.fulfillmentState;
    }
    if (input.intentName !== undefined) {
        bodyParams["intentName"] = input.intentName;
    }
    if (input.message !== undefined) {
        bodyParams["message"] = input.message;
    }
    if (input.messageFormat !== undefined) {
        bodyParams["messageFormat"] = input.messageFormat;
    }
    if (input.slotToElicit !== undefined) {
        bodyParams["slotToElicit"] = input.slotToElicit;
    }
    if (input.slots !== undefined) {
        bodyParams["slots"] = serializeAws_restJson1_1StringMap(input.slots, context);
    }
    if (input.type !== undefined) {
        bodyParams["type"] = input.type;
    }
    return bodyParams;
};
const serializeAws_restJson1_1IntentSummary = (input, context) => {
    const bodyParams = {};
    if (input.checkpointLabel !== undefined) {
        bodyParams["checkpointLabel"] = input.checkpointLabel;
    }
    if (input.confirmationStatus !== undefined) {
        bodyParams["confirmationStatus"] = input.confirmationStatus;
    }
    if (input.dialogActionType !== undefined) {
        bodyParams["dialogActionType"] = input.dialogActionType;
    }
    if (input.fulfillmentState !== undefined) {
        bodyParams["fulfillmentState"] = input.fulfillmentState;
    }
    if (input.intentName !== undefined) {
        bodyParams["intentName"] = input.intentName;
    }
    if (input.slotToElicit !== undefined) {
        bodyParams["slotToElicit"] = input.slotToElicit;
    }
    if (input.slots !== undefined) {
        bodyParams["slots"] = serializeAws_restJson1_1StringMap(input.slots, context);
    }
    return bodyParams;
};
const serializeAws_restJson1_1IntentSummaryList = (input, context) => {
    const contents = [];
    for (let entry of input) {
        contents.push(serializeAws_restJson1_1IntentSummary(entry, context));
    }
    return contents;
};
const serializeAws_restJson1_1StringMap = (input, context) => {
    const mapParams = {};
    Object.keys(input).forEach(key => {
        mapParams[key] = input[key];
    });
    return mapParams;
};
const deserializeAws_restJson1_1DialogAction = (output, context) => {
    let contents = {
        __type: "DialogAction",
        fulfillmentState: undefined,
        intentName: undefined,
        message: undefined,
        messageFormat: undefined,
        slotToElicit: undefined,
        slots: undefined,
        type: undefined
    };
    if (output.fulfillmentState !== undefined &&
        output.fulfillmentState !== null) {
        contents.fulfillmentState = output.fulfillmentState;
    }
    if (output.intentName !== undefined && output.intentName !== null) {
        contents.intentName = output.intentName;
    }
    if (output.message !== undefined && output.message !== null) {
        contents.message = output.message;
    }
    if (output.messageFormat !== undefined && output.messageFormat !== null) {
        contents.messageFormat = output.messageFormat;
    }
    if (output.slotToElicit !== undefined && output.slotToElicit !== null) {
        contents.slotToElicit = output.slotToElicit;
    }
    if (output.slots !== undefined && output.slots !== null) {
        contents.slots = deserializeAws_restJson1_1StringMap(output.slots, context);
    }
    if (output.type !== undefined && output.type !== null) {
        contents.type = output.type;
    }
    return contents;
};
const deserializeAws_restJson1_1IntentSummary = (output, context) => {
    let contents = {
        __type: "IntentSummary",
        checkpointLabel: undefined,
        confirmationStatus: undefined,
        dialogActionType: undefined,
        fulfillmentState: undefined,
        intentName: undefined,
        slotToElicit: undefined,
        slots: undefined
    };
    if (output.checkpointLabel !== undefined && output.checkpointLabel !== null) {
        contents.checkpointLabel = output.checkpointLabel;
    }
    if (output.confirmationStatus !== undefined &&
        output.confirmationStatus !== null) {
        contents.confirmationStatus = output.confirmationStatus;
    }
    if (output.dialogActionType !== undefined &&
        output.dialogActionType !== null) {
        contents.dialogActionType = output.dialogActionType;
    }
    if (output.fulfillmentState !== undefined &&
        output.fulfillmentState !== null) {
        contents.fulfillmentState = output.fulfillmentState;
    }
    if (output.intentName !== undefined && output.intentName !== null) {
        contents.intentName = output.intentName;
    }
    if (output.slotToElicit !== undefined && output.slotToElicit !== null) {
        contents.slotToElicit = output.slotToElicit;
    }
    if (output.slots !== undefined && output.slots !== null) {
        contents.slots = deserializeAws_restJson1_1StringMap(output.slots, context);
    }
    return contents;
};
const deserializeAws_restJson1_1IntentSummaryList = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restJson1_1IntentSummary(entry, context));
};
const deserializeAws_restJson1_1SentimentResponse = (output, context) => {
    let contents = {
        __type: "SentimentResponse",
        sentimentLabel: undefined,
        sentimentScore: undefined
    };
    if (output.sentimentLabel !== undefined && output.sentimentLabel !== null) {
        contents.sentimentLabel = output.sentimentLabel;
    }
    if (output.sentimentScore !== undefined && output.sentimentScore !== null) {
        contents.sentimentScore = output.sentimentScore;
    }
    return contents;
};
const deserializeAws_restJson1_1StringMap = (output, context) => {
    const mapParams = {};
    Object.keys(output).forEach(key => {
        mapParams[key] = output[key];
    });
    return mapParams;
};
const deserializeAws_restJson1_1Button = (output, context) => {
    let contents = {
        __type: "Button",
        text: undefined,
        value: undefined
    };
    if (output.text !== undefined && output.text !== null) {
        contents.text = output.text;
    }
    if (output.value !== undefined && output.value !== null) {
        contents.value = output.value;
    }
    return contents;
};
const deserializeAws_restJson1_1GenericAttachment = (output, context) => {
    let contents = {
        __type: "GenericAttachment",
        attachmentLinkUrl: undefined,
        buttons: undefined,
        imageUrl: undefined,
        subTitle: undefined,
        title: undefined
    };
    if (output.attachmentLinkUrl !== undefined &&
        output.attachmentLinkUrl !== null) {
        contents.attachmentLinkUrl = output.attachmentLinkUrl;
    }
    if (output.buttons !== undefined && output.buttons !== null) {
        contents.buttons = deserializeAws_restJson1_1listOfButtons(output.buttons, context);
    }
    if (output.imageUrl !== undefined && output.imageUrl !== null) {
        contents.imageUrl = output.imageUrl;
    }
    if (output.subTitle !== undefined && output.subTitle !== null) {
        contents.subTitle = output.subTitle;
    }
    if (output.title !== undefined && output.title !== null) {
        contents.title = output.title;
    }
    return contents;
};
const deserializeAws_restJson1_1ResponseCard = (output, context) => {
    let contents = {
        __type: "ResponseCard",
        contentType: undefined,
        genericAttachments: undefined,
        version: undefined
    };
    if (output.contentType !== undefined && output.contentType !== null) {
        contents.contentType = output.contentType;
    }
    if (output.genericAttachments !== undefined &&
        output.genericAttachments !== null) {
        contents.genericAttachments = deserializeAws_restJson1_1genericAttachmentList(output.genericAttachments, context);
    }
    if (output.version !== undefined && output.version !== null) {
        contents.version = output.version;
    }
    return contents;
};
const deserializeAws_restJson1_1genericAttachmentList = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restJson1_1GenericAttachment(entry, context));
};
const deserializeAws_restJson1_1listOfButtons = (output, context) => {
    return (output || []).map((entry) => deserializeAws_restJson1_1Button(entry, context));
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    httpHeaders: output.headers,
    requestId: output.headers["x-amzn-requestid"]
});
// Collect low-level response body stream to Uint8Array.
const collectBody = (streamBody, context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return (context.streamCollector(streamBody) || Promise.resolve(new Uint8Array()));
};
// Encode Uint8Array data into string with utf-8.
const collectBodyString = (streamBody, context) => {
    return collectBody(streamBody, context).then(body => context.utf8Encoder(body));
};
const parseBody = (streamBody, context) => {
    return collectBodyString(streamBody, context).then(encoded => {
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
};
/**
 * Load an error code for the aws.rest-json-1.1 protocol.
 */
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find(k => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
    return "";
};
//# sourceMappingURL=Aws_restJson1_1.js.map