import { __assign, __awaiter, __generator, __values } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { LazyJsonString as __LazyJsonString } from "@aws-sdk/smithy-client";
export function serializeAws_json1_1AnalyzeDocumentCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Textract.AnalyzeDocument";
            body = JSON.stringify(serializeAws_json1_1AnalyzeDocumentRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1DetectDocumentTextCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Textract.DetectDocumentText";
            body = JSON.stringify(serializeAws_json1_1DetectDocumentTextRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1GetDocumentAnalysisCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Textract.GetDocumentAnalysis";
            body = JSON.stringify(serializeAws_json1_1GetDocumentAnalysisRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1GetDocumentTextDetectionCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Textract.GetDocumentTextDetection";
            body = JSON.stringify(serializeAws_json1_1GetDocumentTextDetectionRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StartDocumentAnalysisCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Textract.StartDocumentAnalysis";
            body = JSON.stringify(serializeAws_json1_1StartDocumentAnalysisRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function serializeAws_json1_1StartDocumentTextDetectionCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, body;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/x-amz-json-1.1";
            headers["X-Amz-Target"] = "Textract.StartDocumentTextDetection";
            body = JSON.stringify(serializeAws_json1_1StartDocumentTextDetectionRequest(input, context));
            return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
        });
    });
}
export function deserializeAws_json1_1AnalyzeDocumentCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1AnalyzeDocumentCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1AnalyzeDocumentResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "AnalyzeDocumentResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1AnalyzeDocumentCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, parsedBody, message;
        return __generator(this, function (_p) {
            switch (_p.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _p.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "AccessDeniedException": return [3 /*break*/, 2];
                        case "com.amazonaws.textract#AccessDeniedException": return [3 /*break*/, 2];
                        case "BadDocumentException": return [3 /*break*/, 4];
                        case "com.amazonaws.textract#BadDocumentException": return [3 /*break*/, 4];
                        case "DocumentTooLargeException": return [3 /*break*/, 6];
                        case "com.amazonaws.textract#DocumentTooLargeException": return [3 /*break*/, 6];
                        case "HumanLoopQuotaExceededException": return [3 /*break*/, 8];
                        case "com.amazonaws.textract#HumanLoopQuotaExceededException": return [3 /*break*/, 8];
                        case "InternalServerError": return [3 /*break*/, 10];
                        case "com.amazonaws.textract#InternalServerError": return [3 /*break*/, 10];
                        case "InvalidParameterException": return [3 /*break*/, 12];
                        case "com.amazonaws.textract#InvalidParameterException": return [3 /*break*/, 12];
                        case "InvalidS3ObjectException": return [3 /*break*/, 14];
                        case "com.amazonaws.textract#InvalidS3ObjectException": return [3 /*break*/, 14];
                        case "ProvisionedThroughputExceededException": return [3 /*break*/, 16];
                        case "com.amazonaws.textract#ProvisionedThroughputExceededException": return [3 /*break*/, 16];
                        case "ThrottlingException": return [3 /*break*/, 18];
                        case "com.amazonaws.textract#ThrottlingException": return [3 /*break*/, 18];
                        case "UnsupportedDocumentException": return [3 /*break*/, 20];
                        case "com.amazonaws.textract#UnsupportedDocumentException": return [3 /*break*/, 20];
                    }
                    return [3 /*break*/, 22];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1BadDocumentExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1DocumentTooLargeExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1HumanLoopQuotaExceededExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 16:
                    _l = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
                case 17:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 18:
                    _m = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context)];
                case 19:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 20:
                    _o = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1UnsupportedDocumentExceptionResponse(parsedOutput, context)];
                case 21:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 23];
                case 22:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _p.label = 23;
                case 23:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1DetectDocumentTextCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1DetectDocumentTextCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DetectDocumentTextResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "DetectDocumentTextResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1DetectDocumentTextCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, parsedBody, message;
        return __generator(this, function (_o) {
            switch (_o.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _o.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "AccessDeniedException": return [3 /*break*/, 2];
                        case "com.amazonaws.textract#AccessDeniedException": return [3 /*break*/, 2];
                        case "BadDocumentException": return [3 /*break*/, 4];
                        case "com.amazonaws.textract#BadDocumentException": return [3 /*break*/, 4];
                        case "DocumentTooLargeException": return [3 /*break*/, 6];
                        case "com.amazonaws.textract#DocumentTooLargeException": return [3 /*break*/, 6];
                        case "InternalServerError": return [3 /*break*/, 8];
                        case "com.amazonaws.textract#InternalServerError": return [3 /*break*/, 8];
                        case "InvalidParameterException": return [3 /*break*/, 10];
                        case "com.amazonaws.textract#InvalidParameterException": return [3 /*break*/, 10];
                        case "InvalidS3ObjectException": return [3 /*break*/, 12];
                        case "com.amazonaws.textract#InvalidS3ObjectException": return [3 /*break*/, 12];
                        case "ProvisionedThroughputExceededException": return [3 /*break*/, 14];
                        case "com.amazonaws.textract#ProvisionedThroughputExceededException": return [3 /*break*/, 14];
                        case "ThrottlingException": return [3 /*break*/, 16];
                        case "com.amazonaws.textract#ThrottlingException": return [3 /*break*/, 16];
                        case "UnsupportedDocumentException": return [3 /*break*/, 18];
                        case "com.amazonaws.textract#UnsupportedDocumentException": return [3 /*break*/, 18];
                    }
                    return [3 /*break*/, 20];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1BadDocumentExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1DocumentTooLargeExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 16:
                    _l = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context)];
                case 17:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 18:
                    _m = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1UnsupportedDocumentExceptionResponse(parsedOutput, context)];
                case 19:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 21];
                case 20:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _o.label = 21;
                case 21:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1GetDocumentAnalysisCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1GetDocumentAnalysisCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetDocumentAnalysisResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "GetDocumentAnalysisResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1GetDocumentAnalysisCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "AccessDeniedException": return [3 /*break*/, 2];
                        case "com.amazonaws.textract#AccessDeniedException": return [3 /*break*/, 2];
                        case "InternalServerError": return [3 /*break*/, 4];
                        case "com.amazonaws.textract#InternalServerError": return [3 /*break*/, 4];
                        case "InvalidJobIdException": return [3 /*break*/, 6];
                        case "com.amazonaws.textract#InvalidJobIdException": return [3 /*break*/, 6];
                        case "InvalidParameterException": return [3 /*break*/, 8];
                        case "com.amazonaws.textract#InvalidParameterException": return [3 /*break*/, 8];
                        case "ProvisionedThroughputExceededException": return [3 /*break*/, 10];
                        case "com.amazonaws.textract#ProvisionedThroughputExceededException": return [3 /*break*/, 10];
                        case "ThrottlingException": return [3 /*break*/, 12];
                        case "com.amazonaws.textract#ThrottlingException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidJobIdExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1GetDocumentTextDetectionCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1GetDocumentTextDetectionCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetDocumentTextDetectionResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "GetDocumentTextDetectionResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1GetDocumentTextDetectionCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _k.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "AccessDeniedException": return [3 /*break*/, 2];
                        case "com.amazonaws.textract#AccessDeniedException": return [3 /*break*/, 2];
                        case "InternalServerError": return [3 /*break*/, 4];
                        case "com.amazonaws.textract#InternalServerError": return [3 /*break*/, 4];
                        case "InvalidJobIdException": return [3 /*break*/, 6];
                        case "com.amazonaws.textract#InvalidJobIdException": return [3 /*break*/, 6];
                        case "InvalidParameterException": return [3 /*break*/, 8];
                        case "com.amazonaws.textract#InvalidParameterException": return [3 /*break*/, 8];
                        case "ProvisionedThroughputExceededException": return [3 /*break*/, 10];
                        case "com.amazonaws.textract#ProvisionedThroughputExceededException": return [3 /*break*/, 10];
                        case "ThrottlingException": return [3 /*break*/, 12];
                        case "com.amazonaws.textract#ThrottlingException": return [3 /*break*/, 12];
                    }
                    return [3 /*break*/, 14];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidJobIdExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 15];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StartDocumentAnalysisCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StartDocumentAnalysisCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StartDocumentAnalysisResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "StartDocumentAnalysisResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StartDocumentAnalysisCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, parsedBody, message;
        return __generator(this, function (_q) {
            switch (_q.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _q.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "AccessDeniedException": return [3 /*break*/, 2];
                        case "com.amazonaws.textract#AccessDeniedException": return [3 /*break*/, 2];
                        case "BadDocumentException": return [3 /*break*/, 4];
                        case "com.amazonaws.textract#BadDocumentException": return [3 /*break*/, 4];
                        case "DocumentTooLargeException": return [3 /*break*/, 6];
                        case "com.amazonaws.textract#DocumentTooLargeException": return [3 /*break*/, 6];
                        case "IdempotentParameterMismatchException": return [3 /*break*/, 8];
                        case "com.amazonaws.textract#IdempotentParameterMismatchException": return [3 /*break*/, 8];
                        case "InternalServerError": return [3 /*break*/, 10];
                        case "com.amazonaws.textract#InternalServerError": return [3 /*break*/, 10];
                        case "InvalidParameterException": return [3 /*break*/, 12];
                        case "com.amazonaws.textract#InvalidParameterException": return [3 /*break*/, 12];
                        case "InvalidS3ObjectException": return [3 /*break*/, 14];
                        case "com.amazonaws.textract#InvalidS3ObjectException": return [3 /*break*/, 14];
                        case "LimitExceededException": return [3 /*break*/, 16];
                        case "com.amazonaws.textract#LimitExceededException": return [3 /*break*/, 16];
                        case "ProvisionedThroughputExceededException": return [3 /*break*/, 18];
                        case "com.amazonaws.textract#ProvisionedThroughputExceededException": return [3 /*break*/, 18];
                        case "ThrottlingException": return [3 /*break*/, 20];
                        case "com.amazonaws.textract#ThrottlingException": return [3 /*break*/, 20];
                        case "UnsupportedDocumentException": return [3 /*break*/, 22];
                        case "com.amazonaws.textract#UnsupportedDocumentException": return [3 /*break*/, 22];
                    }
                    return [3 /*break*/, 24];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1BadDocumentExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1DocumentTooLargeExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1IdempotentParameterMismatchExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 16:
                    _l = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 17:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 18:
                    _m = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
                case 19:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 20:
                    _o = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context)];
                case 21:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 22:
                    _p = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1UnsupportedDocumentExceptionResponse(parsedOutput, context)];
                case 23:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 24:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _q.label = 25;
                case 25:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
export function deserializeAws_json1_1StartDocumentTextDetectionCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var data, contents, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_json1_1StartDocumentTextDetectionCommandError(output, context)];
                    }
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StartDocumentTextDetectionResponse(data, context);
                    response = __assign({ $metadata: deserializeMetadata(output), __type: "StartDocumentTextDetectionResponse" }, contents);
                    return [2 /*return*/, Promise.resolve(response)];
            }
        });
    });
}
function deserializeAws_json1_1StartDocumentTextDetectionCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, errorTypeParts, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, parsedBody, message;
        return __generator(this, function (_q) {
            switch (_q.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _q.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorTypeParts = parsedOutput.body["__type"].split("#");
                    errorCode =
                        errorTypeParts[1] === undefined ? errorTypeParts[0] : errorTypeParts[1];
                    _c = errorCode;
                    switch (_c) {
                        case "AccessDeniedException": return [3 /*break*/, 2];
                        case "com.amazonaws.textract#AccessDeniedException": return [3 /*break*/, 2];
                        case "BadDocumentException": return [3 /*break*/, 4];
                        case "com.amazonaws.textract#BadDocumentException": return [3 /*break*/, 4];
                        case "DocumentTooLargeException": return [3 /*break*/, 6];
                        case "com.amazonaws.textract#DocumentTooLargeException": return [3 /*break*/, 6];
                        case "IdempotentParameterMismatchException": return [3 /*break*/, 8];
                        case "com.amazonaws.textract#IdempotentParameterMismatchException": return [3 /*break*/, 8];
                        case "InternalServerError": return [3 /*break*/, 10];
                        case "com.amazonaws.textract#InternalServerError": return [3 /*break*/, 10];
                        case "InvalidParameterException": return [3 /*break*/, 12];
                        case "com.amazonaws.textract#InvalidParameterException": return [3 /*break*/, 12];
                        case "InvalidS3ObjectException": return [3 /*break*/, 14];
                        case "com.amazonaws.textract#InvalidS3ObjectException": return [3 /*break*/, 14];
                        case "LimitExceededException": return [3 /*break*/, 16];
                        case "com.amazonaws.textract#LimitExceededException": return [3 /*break*/, 16];
                        case "ProvisionedThroughputExceededException": return [3 /*break*/, 18];
                        case "com.amazonaws.textract#ProvisionedThroughputExceededException": return [3 /*break*/, 18];
                        case "ThrottlingException": return [3 /*break*/, 20];
                        case "com.amazonaws.textract#ThrottlingException": return [3 /*break*/, 20];
                        case "UnsupportedDocumentException": return [3 /*break*/, 22];
                        case "com.amazonaws.textract#UnsupportedDocumentException": return [3 /*break*/, 22];
                    }
                    return [3 /*break*/, 24];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 4:
                    _e = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1BadDocumentExceptionResponse(parsedOutput, context)];
                case 5:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 6:
                    _f = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1DocumentTooLargeExceptionResponse(parsedOutput, context)];
                case 7:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 8:
                    _g = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1IdempotentParameterMismatchExceptionResponse(parsedOutput, context)];
                case 9:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 10:
                    _h = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context)];
                case 11:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 12:
                    _j = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
                case 13:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 14:
                    _k = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1InvalidS3ObjectExceptionResponse(parsedOutput, context)];
                case 15:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 16:
                    _l = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
                case 17:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 18:
                    _m = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context)];
                case 19:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 20:
                    _o = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context)];
                case 21:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 22:
                    _p = [{}];
                    return [4 /*yield*/, deserializeAws_json1_1UnsupportedDocumentExceptionResponse(parsedOutput, context)];
                case 23:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 25];
                case 24:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _q.label = 25;
                case 25:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
var deserializeAws_json1_1AccessDeniedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1AccessDeniedException(body, context);
        contents = __assign({ name: "AccessDeniedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1BadDocumentExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1BadDocumentException(body, context);
        contents = __assign({ name: "BadDocumentException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1DocumentTooLargeExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1DocumentTooLargeException(body, context);
        contents = __assign({ name: "DocumentTooLargeException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1HumanLoopQuotaExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1HumanLoopQuotaExceededException(body, context);
        contents = __assign({ name: "HumanLoopQuotaExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1IdempotentParameterMismatchExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1IdempotentParameterMismatchException(body, context);
        contents = __assign({ name: "IdempotentParameterMismatchException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InternalServerErrorResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InternalServerError(body, context);
        contents = __assign({ name: "InternalServerError", $fault: "server", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidJobIdExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidJobIdException(body, context);
        contents = __assign({ name: "InvalidJobIdException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidParameterExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidParameterException(body, context);
        contents = __assign({ name: "InvalidParameterException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidS3ObjectExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidS3ObjectException(body, context);
        contents = __assign({ name: "InvalidS3ObjectException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1LimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1LimitExceededException(body, context);
        contents = __assign({ name: "LimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ProvisionedThroughputExceededException(body, context);
        contents = __assign({ name: "ProvisionedThroughputExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ThrottlingExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ThrottlingException(body, context);
        contents = __assign({ name: "ThrottlingException", $fault: "server", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1UnsupportedDocumentExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1UnsupportedDocumentException(body, context);
        contents = __assign({ name: "UnsupportedDocumentException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var serializeAws_json1_1AnalyzeDocumentRequest = function (input, context) {
    var bodyParams = {};
    if (input.Document !== undefined) {
        bodyParams["Document"] = serializeAws_json1_1Document(input.Document, context);
    }
    if (input.FeatureTypes !== undefined) {
        bodyParams["FeatureTypes"] = serializeAws_json1_1FeatureTypes(input.FeatureTypes, context);
    }
    if (input.HumanLoopConfig !== undefined) {
        bodyParams["HumanLoopConfig"] = serializeAws_json1_1HumanLoopConfig(input.HumanLoopConfig, context);
    }
    return bodyParams;
};
var serializeAws_json1_1ContentClassifiers = function (input, context) {
    var e_1, _a;
    var contents = [];
    try {
        for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
            var entry = input_1_1.value;
            contents.push(entry);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return contents;
};
var serializeAws_json1_1DetectDocumentTextRequest = function (input, context) {
    var bodyParams = {};
    if (input.Document !== undefined) {
        bodyParams["Document"] = serializeAws_json1_1Document(input.Document, context);
    }
    return bodyParams;
};
var serializeAws_json1_1Document = function (input, context) {
    var bodyParams = {};
    if (input.Bytes !== undefined) {
        bodyParams["Bytes"] = context.base64Encoder(input.Bytes);
    }
    if (input.S3Object !== undefined) {
        bodyParams["S3Object"] = serializeAws_json1_1S3Object(input.S3Object, context);
    }
    return bodyParams;
};
var serializeAws_json1_1DocumentLocation = function (input, context) {
    var bodyParams = {};
    if (input.S3Object !== undefined) {
        bodyParams["S3Object"] = serializeAws_json1_1S3Object(input.S3Object, context);
    }
    return bodyParams;
};
var serializeAws_json1_1FeatureTypes = function (input, context) {
    var e_2, _a;
    var contents = [];
    try {
        for (var input_2 = __values(input), input_2_1 = input_2.next(); !input_2_1.done; input_2_1 = input_2.next()) {
            var entry = input_2_1.value;
            contents.push(entry);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (input_2_1 && !input_2_1.done && (_a = input_2.return)) _a.call(input_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return contents;
};
var serializeAws_json1_1GetDocumentAnalysisRequest = function (input, context) {
    var bodyParams = {};
    if (input.JobId !== undefined) {
        bodyParams["JobId"] = input.JobId;
    }
    if (input.MaxResults !== undefined) {
        bodyParams["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined) {
        bodyParams["NextToken"] = input.NextToken;
    }
    return bodyParams;
};
var serializeAws_json1_1GetDocumentTextDetectionRequest = function (input, context) {
    var bodyParams = {};
    if (input.JobId !== undefined) {
        bodyParams["JobId"] = input.JobId;
    }
    if (input.MaxResults !== undefined) {
        bodyParams["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken !== undefined) {
        bodyParams["NextToken"] = input.NextToken;
    }
    return bodyParams;
};
var serializeAws_json1_1HumanLoopConfig = function (input, context) {
    var bodyParams = {};
    if (input.DataAttributes !== undefined) {
        bodyParams["DataAttributes"] = serializeAws_json1_1HumanLoopDataAttributes(input.DataAttributes, context);
    }
    if (input.FlowDefinitionArn !== undefined) {
        bodyParams["FlowDefinitionArn"] = input.FlowDefinitionArn;
    }
    if (input.HumanLoopName !== undefined) {
        bodyParams["HumanLoopName"] = input.HumanLoopName;
    }
    return bodyParams;
};
var serializeAws_json1_1HumanLoopDataAttributes = function (input, context) {
    var bodyParams = {};
    if (input.ContentClassifiers !== undefined) {
        bodyParams["ContentClassifiers"] = serializeAws_json1_1ContentClassifiers(input.ContentClassifiers, context);
    }
    return bodyParams;
};
var serializeAws_json1_1NotificationChannel = function (input, context) {
    var bodyParams = {};
    if (input.RoleArn !== undefined) {
        bodyParams["RoleArn"] = input.RoleArn;
    }
    if (input.SNSTopicArn !== undefined) {
        bodyParams["SNSTopicArn"] = input.SNSTopicArn;
    }
    return bodyParams;
};
var serializeAws_json1_1S3Object = function (input, context) {
    var bodyParams = {};
    if (input.Bucket !== undefined) {
        bodyParams["Bucket"] = input.Bucket;
    }
    if (input.Name !== undefined) {
        bodyParams["Name"] = input.Name;
    }
    if (input.Version !== undefined) {
        bodyParams["Version"] = input.Version;
    }
    return bodyParams;
};
var serializeAws_json1_1StartDocumentAnalysisRequest = function (input, context) {
    var bodyParams = {};
    if (input.ClientRequestToken !== undefined) {
        bodyParams["ClientRequestToken"] = input.ClientRequestToken;
    }
    if (input.DocumentLocation !== undefined) {
        bodyParams["DocumentLocation"] = serializeAws_json1_1DocumentLocation(input.DocumentLocation, context);
    }
    if (input.FeatureTypes !== undefined) {
        bodyParams["FeatureTypes"] = serializeAws_json1_1FeatureTypes(input.FeatureTypes, context);
    }
    if (input.JobTag !== undefined) {
        bodyParams["JobTag"] = input.JobTag;
    }
    if (input.NotificationChannel !== undefined) {
        bodyParams["NotificationChannel"] = serializeAws_json1_1NotificationChannel(input.NotificationChannel, context);
    }
    return bodyParams;
};
var serializeAws_json1_1StartDocumentTextDetectionRequest = function (input, context) {
    var bodyParams = {};
    if (input.ClientRequestToken !== undefined) {
        bodyParams["ClientRequestToken"] = input.ClientRequestToken;
    }
    if (input.DocumentLocation !== undefined) {
        bodyParams["DocumentLocation"] = serializeAws_json1_1DocumentLocation(input.DocumentLocation, context);
    }
    if (input.JobTag !== undefined) {
        bodyParams["JobTag"] = input.JobTag;
    }
    if (input.NotificationChannel !== undefined) {
        bodyParams["NotificationChannel"] = serializeAws_json1_1NotificationChannel(input.NotificationChannel, context);
    }
    return bodyParams;
};
var deserializeAws_json1_1AccessDeniedException = function (output, context) {
    var contents = {
        __type: "AccessDeniedException",
        Code: undefined,
        Message: undefined
    };
    if (output.Code !== undefined && output.Code !== null) {
        contents.Code = output.Code;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1AnalyzeDocumentResponse = function (output, context) {
    var contents = {
        __type: "AnalyzeDocumentResponse",
        AnalyzeDocumentModelVersion: undefined,
        Blocks: undefined,
        DocumentMetadata: undefined,
        HumanLoopActivationOutput: undefined
    };
    if (output.AnalyzeDocumentModelVersion !== undefined &&
        output.AnalyzeDocumentModelVersion !== null) {
        contents.AnalyzeDocumentModelVersion = output.AnalyzeDocumentModelVersion;
    }
    if (output.Blocks !== undefined && output.Blocks !== null) {
        contents.Blocks = deserializeAws_json1_1BlockList(output.Blocks, context);
    }
    if (output.DocumentMetadata !== undefined &&
        output.DocumentMetadata !== null) {
        contents.DocumentMetadata = deserializeAws_json1_1DocumentMetadata(output.DocumentMetadata, context);
    }
    if (output.HumanLoopActivationOutput !== undefined &&
        output.HumanLoopActivationOutput !== null) {
        contents.HumanLoopActivationOutput = deserializeAws_json1_1HumanLoopActivationOutput(output.HumanLoopActivationOutput, context);
    }
    return contents;
};
var deserializeAws_json1_1BadDocumentException = function (output, context) {
    var contents = {
        __type: "BadDocumentException",
        Code: undefined,
        Message: undefined
    };
    if (output.Code !== undefined && output.Code !== null) {
        contents.Code = output.Code;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1Block = function (output, context) {
    var contents = {
        __type: "Block",
        BlockType: undefined,
        ColumnIndex: undefined,
        ColumnSpan: undefined,
        Confidence: undefined,
        EntityTypes: undefined,
        Geometry: undefined,
        Id: undefined,
        Page: undefined,
        Relationships: undefined,
        RowIndex: undefined,
        RowSpan: undefined,
        SelectionStatus: undefined,
        Text: undefined
    };
    if (output.BlockType !== undefined && output.BlockType !== null) {
        contents.BlockType = output.BlockType;
    }
    if (output.ColumnIndex !== undefined && output.ColumnIndex !== null) {
        contents.ColumnIndex = output.ColumnIndex;
    }
    if (output.ColumnSpan !== undefined && output.ColumnSpan !== null) {
        contents.ColumnSpan = output.ColumnSpan;
    }
    if (output.Confidence !== undefined && output.Confidence !== null) {
        contents.Confidence = output.Confidence;
    }
    if (output.EntityTypes !== undefined && output.EntityTypes !== null) {
        contents.EntityTypes = deserializeAws_json1_1EntityTypes(output.EntityTypes, context);
    }
    if (output.Geometry !== undefined && output.Geometry !== null) {
        contents.Geometry = deserializeAws_json1_1Geometry(output.Geometry, context);
    }
    if (output.Id !== undefined && output.Id !== null) {
        contents.Id = output.Id;
    }
    if (output.Page !== undefined && output.Page !== null) {
        contents.Page = output.Page;
    }
    if (output.Relationships !== undefined && output.Relationships !== null) {
        contents.Relationships = deserializeAws_json1_1RelationshipList(output.Relationships, context);
    }
    if (output.RowIndex !== undefined && output.RowIndex !== null) {
        contents.RowIndex = output.RowIndex;
    }
    if (output.RowSpan !== undefined && output.RowSpan !== null) {
        contents.RowSpan = output.RowSpan;
    }
    if (output.SelectionStatus !== undefined && output.SelectionStatus !== null) {
        contents.SelectionStatus = output.SelectionStatus;
    }
    if (output.Text !== undefined && output.Text !== null) {
        contents.Text = output.Text;
    }
    return contents;
};
var deserializeAws_json1_1BlockList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1Block(entry, context);
    });
};
var deserializeAws_json1_1BoundingBox = function (output, context) {
    var contents = {
        __type: "BoundingBox",
        Height: undefined,
        Left: undefined,
        Top: undefined,
        Width: undefined
    };
    if (output.Height !== undefined && output.Height !== null) {
        contents.Height = output.Height;
    }
    if (output.Left !== undefined && output.Left !== null) {
        contents.Left = output.Left;
    }
    if (output.Top !== undefined && output.Top !== null) {
        contents.Top = output.Top;
    }
    if (output.Width !== undefined && output.Width !== null) {
        contents.Width = output.Width;
    }
    return contents;
};
var deserializeAws_json1_1DetectDocumentTextResponse = function (output, context) {
    var contents = {
        __type: "DetectDocumentTextResponse",
        Blocks: undefined,
        DetectDocumentTextModelVersion: undefined,
        DocumentMetadata: undefined
    };
    if (output.Blocks !== undefined && output.Blocks !== null) {
        contents.Blocks = deserializeAws_json1_1BlockList(output.Blocks, context);
    }
    if (output.DetectDocumentTextModelVersion !== undefined &&
        output.DetectDocumentTextModelVersion !== null) {
        contents.DetectDocumentTextModelVersion =
            output.DetectDocumentTextModelVersion;
    }
    if (output.DocumentMetadata !== undefined &&
        output.DocumentMetadata !== null) {
        contents.DocumentMetadata = deserializeAws_json1_1DocumentMetadata(output.DocumentMetadata, context);
    }
    return contents;
};
var deserializeAws_json1_1DocumentMetadata = function (output, context) {
    var contents = {
        __type: "DocumentMetadata",
        Pages: undefined
    };
    if (output.Pages !== undefined && output.Pages !== null) {
        contents.Pages = output.Pages;
    }
    return contents;
};
var deserializeAws_json1_1DocumentTooLargeException = function (output, context) {
    var contents = {
        __type: "DocumentTooLargeException",
        Code: undefined,
        Message: undefined
    };
    if (output.Code !== undefined && output.Code !== null) {
        contents.Code = output.Code;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1EntityTypes = function (output, context) {
    return (output || []).map(function (entry) { return entry; });
};
var deserializeAws_json1_1Geometry = function (output, context) {
    var contents = {
        __type: "Geometry",
        BoundingBox: undefined,
        Polygon: undefined
    };
    if (output.BoundingBox !== undefined && output.BoundingBox !== null) {
        contents.BoundingBox = deserializeAws_json1_1BoundingBox(output.BoundingBox, context);
    }
    if (output.Polygon !== undefined && output.Polygon !== null) {
        contents.Polygon = deserializeAws_json1_1Polygon(output.Polygon, context);
    }
    return contents;
};
var deserializeAws_json1_1GetDocumentAnalysisResponse = function (output, context) {
    var contents = {
        __type: "GetDocumentAnalysisResponse",
        AnalyzeDocumentModelVersion: undefined,
        Blocks: undefined,
        DocumentMetadata: undefined,
        JobStatus: undefined,
        NextToken: undefined,
        StatusMessage: undefined,
        Warnings: undefined
    };
    if (output.AnalyzeDocumentModelVersion !== undefined &&
        output.AnalyzeDocumentModelVersion !== null) {
        contents.AnalyzeDocumentModelVersion = output.AnalyzeDocumentModelVersion;
    }
    if (output.Blocks !== undefined && output.Blocks !== null) {
        contents.Blocks = deserializeAws_json1_1BlockList(output.Blocks, context);
    }
    if (output.DocumentMetadata !== undefined &&
        output.DocumentMetadata !== null) {
        contents.DocumentMetadata = deserializeAws_json1_1DocumentMetadata(output.DocumentMetadata, context);
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    if (output.StatusMessage !== undefined && output.StatusMessage !== null) {
        contents.StatusMessage = output.StatusMessage;
    }
    if (output.Warnings !== undefined && output.Warnings !== null) {
        contents.Warnings = deserializeAws_json1_1Warnings(output.Warnings, context);
    }
    return contents;
};
var deserializeAws_json1_1GetDocumentTextDetectionResponse = function (output, context) {
    var contents = {
        __type: "GetDocumentTextDetectionResponse",
        Blocks: undefined,
        DetectDocumentTextModelVersion: undefined,
        DocumentMetadata: undefined,
        JobStatus: undefined,
        NextToken: undefined,
        StatusMessage: undefined,
        Warnings: undefined
    };
    if (output.Blocks !== undefined && output.Blocks !== null) {
        contents.Blocks = deserializeAws_json1_1BlockList(output.Blocks, context);
    }
    if (output.DetectDocumentTextModelVersion !== undefined &&
        output.DetectDocumentTextModelVersion !== null) {
        contents.DetectDocumentTextModelVersion =
            output.DetectDocumentTextModelVersion;
    }
    if (output.DocumentMetadata !== undefined &&
        output.DocumentMetadata !== null) {
        contents.DocumentMetadata = deserializeAws_json1_1DocumentMetadata(output.DocumentMetadata, context);
    }
    if (output.JobStatus !== undefined && output.JobStatus !== null) {
        contents.JobStatus = output.JobStatus;
    }
    if (output.NextToken !== undefined && output.NextToken !== null) {
        contents.NextToken = output.NextToken;
    }
    if (output.StatusMessage !== undefined && output.StatusMessage !== null) {
        contents.StatusMessage = output.StatusMessage;
    }
    if (output.Warnings !== undefined && output.Warnings !== null) {
        contents.Warnings = deserializeAws_json1_1Warnings(output.Warnings, context);
    }
    return contents;
};
var deserializeAws_json1_1HumanLoopActivationOutput = function (output, context) {
    var contents = {
        __type: "HumanLoopActivationOutput",
        HumanLoopActivationConditionsEvaluationResults: undefined,
        HumanLoopActivationReasons: undefined,
        HumanLoopArn: undefined
    };
    if (output.HumanLoopActivationConditionsEvaluationResults !== undefined &&
        output.HumanLoopActivationConditionsEvaluationResults !== null) {
        contents.HumanLoopActivationConditionsEvaluationResults = new __LazyJsonString(output.HumanLoopActivationConditionsEvaluationResults);
    }
    if (output.HumanLoopActivationReasons !== undefined &&
        output.HumanLoopActivationReasons !== null) {
        contents.HumanLoopActivationReasons = deserializeAws_json1_1HumanLoopActivationReasons(output.HumanLoopActivationReasons, context);
    }
    if (output.HumanLoopArn !== undefined && output.HumanLoopArn !== null) {
        contents.HumanLoopArn = output.HumanLoopArn;
    }
    return contents;
};
var deserializeAws_json1_1HumanLoopActivationReasons = function (output, context) {
    return (output || []).map(function (entry) { return entry; });
};
var deserializeAws_json1_1HumanLoopQuotaExceededException = function (output, context) {
    var contents = {
        __type: "HumanLoopQuotaExceededException",
        Code: undefined,
        Message: undefined,
        QuotaCode: undefined,
        ResourceType: undefined,
        ServiceCode: undefined
    };
    if (output.Code !== undefined && output.Code !== null) {
        contents.Code = output.Code;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    if (output.QuotaCode !== undefined && output.QuotaCode !== null) {
        contents.QuotaCode = output.QuotaCode;
    }
    if (output.ResourceType !== undefined && output.ResourceType !== null) {
        contents.ResourceType = output.ResourceType;
    }
    if (output.ServiceCode !== undefined && output.ServiceCode !== null) {
        contents.ServiceCode = output.ServiceCode;
    }
    return contents;
};
var deserializeAws_json1_1IdList = function (output, context) {
    return (output || []).map(function (entry) { return entry; });
};
var deserializeAws_json1_1IdempotentParameterMismatchException = function (output, context) {
    var contents = {
        __type: "IdempotentParameterMismatchException",
        Code: undefined,
        Message: undefined
    };
    if (output.Code !== undefined && output.Code !== null) {
        contents.Code = output.Code;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1InternalServerError = function (output, context) {
    var contents = {
        __type: "InternalServerError",
        Code: undefined,
        Message: undefined
    };
    if (output.Code !== undefined && output.Code !== null) {
        contents.Code = output.Code;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1InvalidJobIdException = function (output, context) {
    var contents = {
        __type: "InvalidJobIdException",
        Code: undefined,
        Message: undefined
    };
    if (output.Code !== undefined && output.Code !== null) {
        contents.Code = output.Code;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1InvalidParameterException = function (output, context) {
    var contents = {
        __type: "InvalidParameterException",
        Code: undefined,
        Message: undefined
    };
    if (output.Code !== undefined && output.Code !== null) {
        contents.Code = output.Code;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1InvalidS3ObjectException = function (output, context) {
    var contents = {
        __type: "InvalidS3ObjectException",
        Code: undefined,
        Message: undefined
    };
    if (output.Code !== undefined && output.Code !== null) {
        contents.Code = output.Code;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1LimitExceededException = function (output, context) {
    var contents = {
        __type: "LimitExceededException",
        Code: undefined,
        Message: undefined
    };
    if (output.Code !== undefined && output.Code !== null) {
        contents.Code = output.Code;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1Pages = function (output, context) {
    return (output || []).map(function (entry) { return entry; });
};
var deserializeAws_json1_1Point = function (output, context) {
    var contents = {
        __type: "Point",
        X: undefined,
        Y: undefined
    };
    if (output.X !== undefined && output.X !== null) {
        contents.X = output.X;
    }
    if (output.Y !== undefined && output.Y !== null) {
        contents.Y = output.Y;
    }
    return contents;
};
var deserializeAws_json1_1Polygon = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1Point(entry, context);
    });
};
var deserializeAws_json1_1ProvisionedThroughputExceededException = function (output, context) {
    var contents = {
        __type: "ProvisionedThroughputExceededException",
        Code: undefined,
        Message: undefined
    };
    if (output.Code !== undefined && output.Code !== null) {
        contents.Code = output.Code;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1Relationship = function (output, context) {
    var contents = {
        __type: "Relationship",
        Ids: undefined,
        Type: undefined
    };
    if (output.Ids !== undefined && output.Ids !== null) {
        contents.Ids = deserializeAws_json1_1IdList(output.Ids, context);
    }
    if (output.Type !== undefined && output.Type !== null) {
        contents.Type = output.Type;
    }
    return contents;
};
var deserializeAws_json1_1RelationshipList = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1Relationship(entry, context);
    });
};
var deserializeAws_json1_1StartDocumentAnalysisResponse = function (output, context) {
    var contents = {
        __type: "StartDocumentAnalysisResponse",
        JobId: undefined
    };
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    return contents;
};
var deserializeAws_json1_1StartDocumentTextDetectionResponse = function (output, context) {
    var contents = {
        __type: "StartDocumentTextDetectionResponse",
        JobId: undefined
    };
    if (output.JobId !== undefined && output.JobId !== null) {
        contents.JobId = output.JobId;
    }
    return contents;
};
var deserializeAws_json1_1ThrottlingException = function (output, context) {
    var contents = {
        __type: "ThrottlingException",
        Code: undefined,
        Message: undefined
    };
    if (output.Code !== undefined && output.Code !== null) {
        contents.Code = output.Code;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1UnsupportedDocumentException = function (output, context) {
    var contents = {
        __type: "UnsupportedDocumentException",
        Code: undefined,
        Message: undefined
    };
    if (output.Code !== undefined && output.Code !== null) {
        contents.Code = output.Code;
    }
    if (output.Message !== undefined && output.Message !== null) {
        contents.Message = output.Message;
    }
    return contents;
};
var deserializeAws_json1_1Warning = function (output, context) {
    var contents = {
        __type: "Warning",
        ErrorCode: undefined,
        Pages: undefined
    };
    if (output.ErrorCode !== undefined && output.ErrorCode !== null) {
        contents.ErrorCode = output.ErrorCode;
    }
    if (output.Pages !== undefined && output.Pages !== null) {
        contents.Pages = deserializeAws_json1_1Pages(output.Pages, context);
    }
    return contents;
};
var deserializeAws_json1_1Warnings = function (output, context) {
    return (output || []).map(function (entry) {
        return deserializeAws_json1_1Warning(entry, context);
    });
};
var deserializeMetadata = function (output) { return ({
    httpStatusCode: output.statusCode,
    httpHeaders: output.headers,
    requestId: output.headers["x-amzn-requestid"]
}); };
// Collect low-level response body stream to Uint8Array.
var collectBody = function (streamBody, context) {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return (context.streamCollector(streamBody) || Promise.resolve(new Uint8Array()));
};
// Encode Uint8Array data into string with utf-8.
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) {
        return context.utf8Encoder(body);
    });
};
var buildHttpRpcRequest = function (context, headers, path, resolvedHostname, body) {
    var contents = __assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", path: path, headers: headers });
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
};
//# sourceMappingURL=Aws_json1_1.js.map