import { __assign, __awaiter, __generator, __values } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { LazyJsonString as __LazyJsonString } from "@aws-sdk/smithy-client";
export function serializeAws_restJson1_1PutEventsCommand(input, context) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, resolvedPath, body, bodyParams;
        return __generator(this, function (_a) {
            headers = {};
            headers["Content-Type"] = "application/json";
            resolvedPath = "/events";
            bodyParams = {};
            if (input.eventList !== undefined) {
                bodyParams["eventList"] = serializeAws_restJson1_1EventList(input.eventList, context);
            }
            if (input.sessionId !== undefined) {
                bodyParams["sessionId"] = input.sessionId;
            }
            if (input.trackingId !== undefined) {
                bodyParams["trackingId"] = input.trackingId;
            }
            if (input.userId !== undefined) {
                bodyParams["userId"] = input.userId;
            }
            body = JSON.stringify(bodyParams);
            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: "https", method: "POST", headers: headers, path: resolvedPath, body: body }))];
        });
    });
}
export function deserializeAws_restJson1_1PutEventsCommand(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var contents;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 400) {
                        return [2 /*return*/, deserializeAws_restJson1_1PutEventsCommandError(output, context)];
                    }
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [4 /*yield*/, collectBody(output.body, context)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, Promise.resolve(contents)];
            }
        });
    });
}
function deserializeAws_restJson1_1PutEventsCommandError(output, context) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedOutput, _a, _b, response, errorCode, _c, _d, parsedBody, message;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _a = [__assign({}, output)];
                    _b = {};
                    return [4 /*yield*/, parseBody(output.body, context)];
                case 1:
                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _e.sent(), _b)]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _c = errorCode;
                    switch (_c) {
                        case "InvalidInputException": return [3 /*break*/, 2];
                        case "com.amazonaws.services.personalize.events.exceptions#InvalidInputException": return [3 /*break*/, 2];
                    }
                    return [3 /*break*/, 4];
                case 2:
                    _d = [{}];
                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidInputExceptionResponse(parsedOutput, context)];
                case 3:
                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_e.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                    return [3 /*break*/, 5];
                case 4:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                    _e.label = 5;
                case 5:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
            }
        });
    });
}
var deserializeAws_restJson1_1InvalidInputExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data;
    return __generator(this, function (_a) {
        contents = {
            name: "InvalidInputException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var serializeAws_restJson1_1Event = function (input, context) {
    var bodyParams = {};
    if (input.eventId !== undefined) {
        bodyParams["eventId"] = input.eventId;
    }
    if (input.eventType !== undefined) {
        bodyParams["eventType"] = input.eventType;
    }
    if (input.properties !== undefined) {
        bodyParams["properties"] = __LazyJsonString.fromObject(input.properties);
    }
    if (input.sentAt !== undefined) {
        bodyParams["sentAt"] = Math.round(input.sentAt.getTime() / 1000);
    }
    return bodyParams;
};
var serializeAws_restJson1_1EventList = function (input, context) {
    var e_1, _a;
    var contents = [];
    try {
        for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
            var entry = input_1_1.value;
            contents.push(serializeAws_restJson1_1Event(entry, context));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return contents;
};
var deserializeMetadata = function (output) { return ({
    httpStatusCode: output.statusCode,
    httpHeaders: output.headers,
    requestId: output.headers["x-amzn-requestid"]
}); };
// Collect low-level response body stream to Uint8Array.
var collectBody = function (streamBody, context) {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return (context.streamCollector(streamBody) || Promise.resolve(new Uint8Array()));
};
// Encode Uint8Array data into string with utf-8.
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) {
        return context.utf8Encoder(body);
    });
};
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
};
/**
 * Load an error code for the aws.rest-json-1.1 protocol.
 */
var loadRestJsonErrorCode = function (output, data) {
    var findKey = function (object, key) {
        return Object.keys(object).find(function (k) { return k.toLowerCase() === key.toLowerCase(); });
    };
    var sanitizeErrorCode = function (rawValue) {
        var cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    var headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
    return "";
};
//# sourceMappingURL=Aws_restJson1_1.js.map